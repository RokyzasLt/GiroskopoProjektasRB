
GyroProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08008aa0  08008aa0  00018aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009408  08009408  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009410  08009410  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08009418  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000108  08009520  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  08009520  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011de8  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002863  00000000  00000000  00031f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  000347c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf6  00000000  00000000  00035870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016282  00000000  00000000  00036566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140fc  00000000  00000000  0004c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000876f1  00000000  00000000  000608e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004558  00000000  00000000  000e7fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ec530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000108 	.word	0x20000108
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008a84 	.word	0x08008a84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000010c 	.word	0x2000010c
 8000104:	08008a84 	.word	0x08008a84

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0010      	movs	r0, r2
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	0019      	movs	r1, r3
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fb4f 	bl	80018e8 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fa9f 	bl	8001798 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fb41 	bl	80018e8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fb37 	bl	80018e8 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fac7 	bl	800181c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fabd 	bl	800181c <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_uldivmod>:
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d111      	bne.n	80002d8 <__aeabi_uldivmod+0x28>
 80002b4:	2a00      	cmp	r2, #0
 80002b6:	d10f      	bne.n	80002d8 <__aeabi_uldivmod+0x28>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d100      	bne.n	80002be <__aeabi_uldivmod+0xe>
 80002bc:	2800      	cmp	r0, #0
 80002be:	d002      	beq.n	80002c6 <__aeabi_uldivmod+0x16>
 80002c0:	2100      	movs	r1, #0
 80002c2:	43c9      	mvns	r1, r1
 80002c4:	0008      	movs	r0, r1
 80002c6:	b407      	push	{r0, r1, r2}
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__aeabi_uldivmod+0x24>)
 80002ca:	a102      	add	r1, pc, #8	; (adr r1, 80002d4 <__aeabi_uldivmod+0x24>)
 80002cc:	1840      	adds	r0, r0, r1
 80002ce:	9002      	str	r0, [sp, #8]
 80002d0:	bd03      	pop	{r0, r1, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	ffffff5d 	.word	0xffffff5d
 80002d8:	b403      	push	{r0, r1}
 80002da:	4668      	mov	r0, sp
 80002dc:	b501      	push	{r0, lr}
 80002de:	9802      	ldr	r0, [sp, #8]
 80002e0:	f000 f834 	bl	800034c <__udivmoddi4>
 80002e4:	9b01      	ldr	r3, [sp, #4]
 80002e6:	469e      	mov	lr, r3
 80002e8:	b002      	add	sp, #8
 80002ea:	bc0c      	pop	{r2, r3}
 80002ec:	4770      	bx	lr
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_lmul>:
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f2:	46ce      	mov	lr, r9
 80002f4:	4699      	mov	r9, r3
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	469c      	mov	ip, r3
 80002fa:	0413      	lsls	r3, r2, #16
 80002fc:	4647      	mov	r7, r8
 80002fe:	0c1b      	lsrs	r3, r3, #16
 8000300:	001d      	movs	r5, r3
 8000302:	000e      	movs	r6, r1
 8000304:	4661      	mov	r1, ip
 8000306:	0404      	lsls	r4, r0, #16
 8000308:	0c24      	lsrs	r4, r4, #16
 800030a:	b580      	push	{r7, lr}
 800030c:	0007      	movs	r7, r0
 800030e:	0c10      	lsrs	r0, r2, #16
 8000310:	434b      	muls	r3, r1
 8000312:	4365      	muls	r5, r4
 8000314:	4341      	muls	r1, r0
 8000316:	4360      	muls	r0, r4
 8000318:	0c2c      	lsrs	r4, r5, #16
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	1820      	adds	r0, r4, r0
 800031e:	468c      	mov	ip, r1
 8000320:	4283      	cmp	r3, r0
 8000322:	d903      	bls.n	800032c <__aeabi_lmul+0x3c>
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	025b      	lsls	r3, r3, #9
 8000328:	4698      	mov	r8, r3
 800032a:	44c4      	add	ip, r8
 800032c:	4649      	mov	r1, r9
 800032e:	4379      	muls	r1, r7
 8000330:	4356      	muls	r6, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	042d      	lsls	r5, r5, #16
 8000336:	0c2d      	lsrs	r5, r5, #16
 8000338:	1989      	adds	r1, r1, r6
 800033a:	4463      	add	r3, ip
 800033c:	0400      	lsls	r0, r0, #16
 800033e:	1940      	adds	r0, r0, r5
 8000340:	18c9      	adds	r1, r1, r3
 8000342:	bcc0      	pop	{r6, r7}
 8000344:	46b9      	mov	r9, r7
 8000346:	46b0      	mov	r8, r6
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)

0800034c <__udivmoddi4>:
 800034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034e:	4657      	mov	r7, sl
 8000350:	464e      	mov	r6, r9
 8000352:	4645      	mov	r5, r8
 8000354:	46de      	mov	lr, fp
 8000356:	b5e0      	push	{r5, r6, r7, lr}
 8000358:	0004      	movs	r4, r0
 800035a:	000d      	movs	r5, r1
 800035c:	4692      	mov	sl, r2
 800035e:	4699      	mov	r9, r3
 8000360:	b083      	sub	sp, #12
 8000362:	428b      	cmp	r3, r1
 8000364:	d830      	bhi.n	80003c8 <__udivmoddi4+0x7c>
 8000366:	d02d      	beq.n	80003c4 <__udivmoddi4+0x78>
 8000368:	4649      	mov	r1, r9
 800036a:	4650      	mov	r0, sl
 800036c:	f002 fa2c 	bl	80027c8 <__clzdi2>
 8000370:	0029      	movs	r1, r5
 8000372:	0006      	movs	r6, r0
 8000374:	0020      	movs	r0, r4
 8000376:	f002 fa27 	bl	80027c8 <__clzdi2>
 800037a:	1a33      	subs	r3, r6, r0
 800037c:	4698      	mov	r8, r3
 800037e:	3b20      	subs	r3, #32
 8000380:	d434      	bmi.n	80003ec <__udivmoddi4+0xa0>
 8000382:	469b      	mov	fp, r3
 8000384:	4653      	mov	r3, sl
 8000386:	465a      	mov	r2, fp
 8000388:	4093      	lsls	r3, r2
 800038a:	4642      	mov	r2, r8
 800038c:	001f      	movs	r7, r3
 800038e:	4653      	mov	r3, sl
 8000390:	4093      	lsls	r3, r2
 8000392:	001e      	movs	r6, r3
 8000394:	42af      	cmp	r7, r5
 8000396:	d83b      	bhi.n	8000410 <__udivmoddi4+0xc4>
 8000398:	42af      	cmp	r7, r5
 800039a:	d100      	bne.n	800039e <__udivmoddi4+0x52>
 800039c:	e079      	b.n	8000492 <__udivmoddi4+0x146>
 800039e:	465b      	mov	r3, fp
 80003a0:	1ba4      	subs	r4, r4, r6
 80003a2:	41bd      	sbcs	r5, r7
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	da00      	bge.n	80003aa <__udivmoddi4+0x5e>
 80003a8:	e076      	b.n	8000498 <__udivmoddi4+0x14c>
 80003aa:	2200      	movs	r2, #0
 80003ac:	2300      	movs	r3, #0
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	2301      	movs	r3, #1
 80003b4:	465a      	mov	r2, fp
 80003b6:	4093      	lsls	r3, r2
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2301      	movs	r3, #1
 80003bc:	4642      	mov	r2, r8
 80003be:	4093      	lsls	r3, r2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	e029      	b.n	8000418 <__udivmoddi4+0xcc>
 80003c4:	4282      	cmp	r2, r0
 80003c6:	d9cf      	bls.n	8000368 <__udivmoddi4+0x1c>
 80003c8:	2200      	movs	r2, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <__udivmoddi4+0x8e>
 80003d6:	601c      	str	r4, [r3, #0]
 80003d8:	605d      	str	r5, [r3, #4]
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	b003      	add	sp, #12
 80003e0:	bcf0      	pop	{r4, r5, r6, r7}
 80003e2:	46bb      	mov	fp, r7
 80003e4:	46b2      	mov	sl, r6
 80003e6:	46a9      	mov	r9, r5
 80003e8:	46a0      	mov	r8, r4
 80003ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ec:	4642      	mov	r2, r8
 80003ee:	469b      	mov	fp, r3
 80003f0:	2320      	movs	r3, #32
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	4652      	mov	r2, sl
 80003f6:	40da      	lsrs	r2, r3
 80003f8:	4641      	mov	r1, r8
 80003fa:	0013      	movs	r3, r2
 80003fc:	464a      	mov	r2, r9
 80003fe:	408a      	lsls	r2, r1
 8000400:	0017      	movs	r7, r2
 8000402:	4642      	mov	r2, r8
 8000404:	431f      	orrs	r7, r3
 8000406:	4653      	mov	r3, sl
 8000408:	4093      	lsls	r3, r2
 800040a:	001e      	movs	r6, r3
 800040c:	42af      	cmp	r7, r5
 800040e:	d9c3      	bls.n	8000398 <__udivmoddi4+0x4c>
 8000410:	2200      	movs	r2, #0
 8000412:	2300      	movs	r3, #0
 8000414:	9200      	str	r2, [sp, #0]
 8000416:	9301      	str	r3, [sp, #4]
 8000418:	4643      	mov	r3, r8
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0d8      	beq.n	80003d0 <__udivmoddi4+0x84>
 800041e:	07fb      	lsls	r3, r7, #31
 8000420:	0872      	lsrs	r2, r6, #1
 8000422:	431a      	orrs	r2, r3
 8000424:	4646      	mov	r6, r8
 8000426:	087b      	lsrs	r3, r7, #1
 8000428:	e00e      	b.n	8000448 <__udivmoddi4+0xfc>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d101      	bne.n	8000432 <__udivmoddi4+0xe6>
 800042e:	42a2      	cmp	r2, r4
 8000430:	d80c      	bhi.n	800044c <__udivmoddi4+0x100>
 8000432:	1aa4      	subs	r4, r4, r2
 8000434:	419d      	sbcs	r5, r3
 8000436:	2001      	movs	r0, #1
 8000438:	1924      	adds	r4, r4, r4
 800043a:	416d      	adcs	r5, r5
 800043c:	2100      	movs	r1, #0
 800043e:	3e01      	subs	r6, #1
 8000440:	1824      	adds	r4, r4, r0
 8000442:	414d      	adcs	r5, r1
 8000444:	2e00      	cmp	r6, #0
 8000446:	d006      	beq.n	8000456 <__udivmoddi4+0x10a>
 8000448:	42ab      	cmp	r3, r5
 800044a:	d9ee      	bls.n	800042a <__udivmoddi4+0xde>
 800044c:	3e01      	subs	r6, #1
 800044e:	1924      	adds	r4, r4, r4
 8000450:	416d      	adcs	r5, r5
 8000452:	2e00      	cmp	r6, #0
 8000454:	d1f8      	bne.n	8000448 <__udivmoddi4+0xfc>
 8000456:	9800      	ldr	r0, [sp, #0]
 8000458:	9901      	ldr	r1, [sp, #4]
 800045a:	465b      	mov	r3, fp
 800045c:	1900      	adds	r0, r0, r4
 800045e:	4169      	adcs	r1, r5
 8000460:	2b00      	cmp	r3, #0
 8000462:	db24      	blt.n	80004ae <__udivmoddi4+0x162>
 8000464:	002b      	movs	r3, r5
 8000466:	465a      	mov	r2, fp
 8000468:	4644      	mov	r4, r8
 800046a:	40d3      	lsrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	db2a      	blt.n	80004d0 <__udivmoddi4+0x184>
 800047a:	0026      	movs	r6, r4
 800047c:	409e      	lsls	r6, r3
 800047e:	0033      	movs	r3, r6
 8000480:	0026      	movs	r6, r4
 8000482:	4647      	mov	r7, r8
 8000484:	40be      	lsls	r6, r7
 8000486:	0032      	movs	r2, r6
 8000488:	1a80      	subs	r0, r0, r2
 800048a:	4199      	sbcs	r1, r3
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	9101      	str	r1, [sp, #4]
 8000490:	e79e      	b.n	80003d0 <__udivmoddi4+0x84>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d8bc      	bhi.n	8000410 <__udivmoddi4+0xc4>
 8000496:	e782      	b.n	800039e <__udivmoddi4+0x52>
 8000498:	4642      	mov	r2, r8
 800049a:	2320      	movs	r3, #32
 800049c:	2100      	movs	r1, #0
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	9100      	str	r1, [sp, #0]
 80004a4:	9201      	str	r2, [sp, #4]
 80004a6:	2201      	movs	r2, #1
 80004a8:	40da      	lsrs	r2, r3
 80004aa:	9201      	str	r2, [sp, #4]
 80004ac:	e785      	b.n	80003ba <__udivmoddi4+0x6e>
 80004ae:	4642      	mov	r2, r8
 80004b0:	2320      	movs	r3, #32
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	002a      	movs	r2, r5
 80004b6:	4646      	mov	r6, r8
 80004b8:	409a      	lsls	r2, r3
 80004ba:	0023      	movs	r3, r4
 80004bc:	40f3      	lsrs	r3, r6
 80004be:	4644      	mov	r4, r8
 80004c0:	4313      	orrs	r3, r2
 80004c2:	002a      	movs	r2, r5
 80004c4:	40e2      	lsrs	r2, r4
 80004c6:	001c      	movs	r4, r3
 80004c8:	465b      	mov	r3, fp
 80004ca:	0015      	movs	r5, r2
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dad4      	bge.n	800047a <__udivmoddi4+0x12e>
 80004d0:	4642      	mov	r2, r8
 80004d2:	002f      	movs	r7, r5
 80004d4:	2320      	movs	r3, #32
 80004d6:	0026      	movs	r6, r4
 80004d8:	4097      	lsls	r7, r2
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	40de      	lsrs	r6, r3
 80004de:	003b      	movs	r3, r7
 80004e0:	4333      	orrs	r3, r6
 80004e2:	e7cd      	b.n	8000480 <__udivmoddi4+0x134>

080004e4 <__aeabi_fadd>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	4647      	mov	r7, r8
 80004e8:	46ce      	mov	lr, r9
 80004ea:	024a      	lsls	r2, r1, #9
 80004ec:	0243      	lsls	r3, r0, #9
 80004ee:	0045      	lsls	r5, r0, #1
 80004f0:	0fc4      	lsrs	r4, r0, #31
 80004f2:	0a50      	lsrs	r0, r2, #9
 80004f4:	4680      	mov	r8, r0
 80004f6:	0048      	lsls	r0, r1, #1
 80004f8:	0a5b      	lsrs	r3, r3, #9
 80004fa:	0e00      	lsrs	r0, r0, #24
 80004fc:	0992      	lsrs	r2, r2, #6
 80004fe:	4694      	mov	ip, r2
 8000500:	b580      	push	{r7, lr}
 8000502:	001e      	movs	r6, r3
 8000504:	4681      	mov	r9, r0
 8000506:	0002      	movs	r2, r0
 8000508:	0e2d      	lsrs	r5, r5, #24
 800050a:	00df      	lsls	r7, r3, #3
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	428c      	cmp	r4, r1
 8000510:	d024      	beq.n	800055c <__aeabi_fadd+0x78>
 8000512:	1a28      	subs	r0, r5, r0
 8000514:	2800      	cmp	r0, #0
 8000516:	dd0e      	ble.n	8000536 <__aeabi_fadd+0x52>
 8000518:	2a00      	cmp	r2, #0
 800051a:	d13e      	bne.n	800059a <__aeabi_fadd+0xb6>
 800051c:	4662      	mov	r2, ip
 800051e:	2a00      	cmp	r2, #0
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x40>
 8000522:	e0fd      	b.n	8000720 <__aeabi_fadd+0x23c>
 8000524:	1e42      	subs	r2, r0, #1
 8000526:	2801      	cmp	r0, #1
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0x48>
 800052a:	e137      	b.n	800079c <__aeabi_fadd+0x2b8>
 800052c:	28ff      	cmp	r0, #255	; 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x4e>
 8000530:	e0a9      	b.n	8000686 <__aeabi_fadd+0x1a2>
 8000532:	0010      	movs	r0, r2
 8000534:	e039      	b.n	80005aa <__aeabi_fadd+0xc6>
 8000536:	2800      	cmp	r0, #0
 8000538:	d063      	beq.n	8000602 <__aeabi_fadd+0x11e>
 800053a:	464b      	mov	r3, r9
 800053c:	1b52      	subs	r2, r2, r5
 800053e:	2d00      	cmp	r5, #0
 8000540:	d000      	beq.n	8000544 <__aeabi_fadd+0x60>
 8000542:	e0e0      	b.n	8000706 <__aeabi_fadd+0x222>
 8000544:	2f00      	cmp	r7, #0
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x66>
 8000548:	e0ce      	b.n	80006e8 <__aeabi_fadd+0x204>
 800054a:	1e53      	subs	r3, r2, #1
 800054c:	2a01      	cmp	r2, #1
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x6e>
 8000550:	e155      	b.n	80007fe <__aeabi_fadd+0x31a>
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x74>
 8000556:	e094      	b.n	8000682 <__aeabi_fadd+0x19e>
 8000558:	001a      	movs	r2, r3
 800055a:	e0d9      	b.n	8000710 <__aeabi_fadd+0x22c>
 800055c:	1a2a      	subs	r2, r5, r0
 800055e:	2a00      	cmp	r2, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_fadd+0x80>
 8000562:	e099      	b.n	8000698 <__aeabi_fadd+0x1b4>
 8000564:	2800      	cmp	r0, #0
 8000566:	d062      	beq.n	800062e <__aeabi_fadd+0x14a>
 8000568:	2dff      	cmp	r5, #255	; 0xff
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x8a>
 800056c:	e08b      	b.n	8000686 <__aeabi_fadd+0x1a2>
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	4661      	mov	r1, ip
 8000572:	04db      	lsls	r3, r3, #19
 8000574:	4319      	orrs	r1, r3
 8000576:	468c      	mov	ip, r1
 8000578:	2a1b      	cmp	r2, #27
 800057a:	dc00      	bgt.n	800057e <__aeabi_fadd+0x9a>
 800057c:	e0d2      	b.n	8000724 <__aeabi_fadd+0x240>
 800057e:	2301      	movs	r3, #1
 8000580:	19db      	adds	r3, r3, r7
 8000582:	015a      	lsls	r2, r3, #5
 8000584:	d56a      	bpl.n	800065c <__aeabi_fadd+0x178>
 8000586:	3501      	adds	r5, #1
 8000588:	2dff      	cmp	r5, #255	; 0xff
 800058a:	d05b      	beq.n	8000644 <__aeabi_fadd+0x160>
 800058c:	2201      	movs	r2, #1
 800058e:	49a3      	ldr	r1, [pc, #652]	; (800081c <__aeabi_fadd+0x338>)
 8000590:	401a      	ands	r2, r3
 8000592:	085b      	lsrs	r3, r3, #1
 8000594:	400b      	ands	r3, r1
 8000596:	4313      	orrs	r3, r2
 8000598:	e01c      	b.n	80005d4 <__aeabi_fadd+0xf0>
 800059a:	2dff      	cmp	r5, #255	; 0xff
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0xbc>
 800059e:	e072      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	4662      	mov	r2, ip
 80005a4:	04db      	lsls	r3, r3, #19
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4694      	mov	ip, r2
 80005aa:	281b      	cmp	r0, #27
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_fadd+0xcc>
 80005ae:	e090      	b.n	80006d2 <__aeabi_fadd+0x1ee>
 80005b0:	2301      	movs	r3, #1
 80005b2:	1afb      	subs	r3, r7, r3
 80005b4:	015a      	lsls	r2, r3, #5
 80005b6:	d551      	bpl.n	800065c <__aeabi_fadd+0x178>
 80005b8:	019b      	lsls	r3, r3, #6
 80005ba:	099e      	lsrs	r6, r3, #6
 80005bc:	0030      	movs	r0, r6
 80005be:	f002 f8e5 	bl	800278c <__clzsi2>
 80005c2:	0033      	movs	r3, r6
 80005c4:	3805      	subs	r0, #5
 80005c6:	4083      	lsls	r3, r0
 80005c8:	4285      	cmp	r5, r0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_fadd+0xea>
 80005cc:	e075      	b.n	80006ba <__aeabi_fadd+0x1d6>
 80005ce:	4a94      	ldr	r2, [pc, #592]	; (8000820 <__aeabi_fadd+0x33c>)
 80005d0:	1a2d      	subs	r5, r5, r0
 80005d2:	4013      	ands	r3, r2
 80005d4:	075a      	lsls	r2, r3, #29
 80005d6:	d004      	beq.n	80005e2 <__aeabi_fadd+0xfe>
 80005d8:	220f      	movs	r2, #15
 80005da:	401a      	ands	r2, r3
 80005dc:	2a04      	cmp	r2, #4
 80005de:	d000      	beq.n	80005e2 <__aeabi_fadd+0xfe>
 80005e0:	3304      	adds	r3, #4
 80005e2:	015a      	lsls	r2, r3, #5
 80005e4:	d53c      	bpl.n	8000660 <__aeabi_fadd+0x17c>
 80005e6:	1c68      	adds	r0, r5, #1
 80005e8:	2dfe      	cmp	r5, #254	; 0xfe
 80005ea:	d02b      	beq.n	8000644 <__aeabi_fadd+0x160>
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	0a5e      	lsrs	r6, r3, #9
 80005f0:	b2c0      	uxtb	r0, r0
 80005f2:	05c0      	lsls	r0, r0, #23
 80005f4:	4330      	orrs	r0, r6
 80005f6:	07e4      	lsls	r4, r4, #31
 80005f8:	4320      	orrs	r0, r4
 80005fa:	bcc0      	pop	{r6, r7}
 80005fc:	46b9      	mov	r9, r7
 80005fe:	46b0      	mov	r8, r6
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000602:	20fe      	movs	r0, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4210      	tst	r0, r2
 8000608:	d172      	bne.n	80006f0 <__aeabi_fadd+0x20c>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d000      	beq.n	8000610 <__aeabi_fadd+0x12c>
 800060e:	e0ae      	b.n	800076e <__aeabi_fadd+0x28a>
 8000610:	2f00      	cmp	r7, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x132>
 8000614:	e0ec      	b.n	80007f0 <__aeabi_fadd+0x30c>
 8000616:	4663      	mov	r3, ip
 8000618:	2000      	movs	r0, #0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0e9      	beq.n	80005f2 <__aeabi_fadd+0x10e>
 800061e:	1afb      	subs	r3, r7, r3
 8000620:	015a      	lsls	r2, r3, #5
 8000622:	d400      	bmi.n	8000626 <__aeabi_fadd+0x142>
 8000624:	e0f3      	b.n	800080e <__aeabi_fadd+0x32a>
 8000626:	4663      	mov	r3, ip
 8000628:	000c      	movs	r4, r1
 800062a:	1bdb      	subs	r3, r3, r7
 800062c:	e7d2      	b.n	80005d4 <__aeabi_fadd+0xf0>
 800062e:	4661      	mov	r1, ip
 8000630:	2900      	cmp	r1, #0
 8000632:	d05b      	beq.n	80006ec <__aeabi_fadd+0x208>
 8000634:	1e51      	subs	r1, r2, #1
 8000636:	2a01      	cmp	r2, #1
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x158>
 800063a:	e0a7      	b.n	800078c <__aeabi_fadd+0x2a8>
 800063c:	2aff      	cmp	r2, #255	; 0xff
 800063e:	d022      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 8000640:	000a      	movs	r2, r1
 8000642:	e799      	b.n	8000578 <__aeabi_fadd+0x94>
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	2600      	movs	r6, #0
 8000648:	e7d3      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800064a:	21fe      	movs	r1, #254	; 0xfe
 800064c:	1c6a      	adds	r2, r5, #1
 800064e:	4211      	tst	r1, r2
 8000650:	d073      	beq.n	800073a <__aeabi_fadd+0x256>
 8000652:	2aff      	cmp	r2, #255	; 0xff
 8000654:	d0f6      	beq.n	8000644 <__aeabi_fadd+0x160>
 8000656:	0015      	movs	r5, r2
 8000658:	4467      	add	r7, ip
 800065a:	087b      	lsrs	r3, r7, #1
 800065c:	075a      	lsls	r2, r3, #29
 800065e:	d1bb      	bne.n	80005d8 <__aeabi_fadd+0xf4>
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	2dff      	cmp	r5, #255	; 0xff
 8000664:	d00f      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 8000666:	025b      	lsls	r3, r3, #9
 8000668:	0a5e      	lsrs	r6, r3, #9
 800066a:	b2e8      	uxtb	r0, r5
 800066c:	e7c1      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800066e:	4662      	mov	r2, ip
 8000670:	2a00      	cmp	r2, #0
 8000672:	d008      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	03d2      	lsls	r2, r2, #15
 8000678:	4213      	tst	r3, r2
 800067a:	d004      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 800067c:	4640      	mov	r0, r8
 800067e:	4210      	tst	r0, r2
 8000680:	d101      	bne.n	8000686 <__aeabi_fadd+0x1a2>
 8000682:	000c      	movs	r4, r1
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0dc      	beq.n	8000644 <__aeabi_fadd+0x160>
 800068a:	2680      	movs	r6, #128	; 0x80
 800068c:	03f6      	lsls	r6, r6, #15
 800068e:	431e      	orrs	r6, r3
 8000690:	0276      	lsls	r6, r6, #9
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	0a76      	lsrs	r6, r6, #9
 8000696:	e7ac      	b.n	80005f2 <__aeabi_fadd+0x10e>
 8000698:	2a00      	cmp	r2, #0
 800069a:	d0d6      	beq.n	800064a <__aeabi_fadd+0x166>
 800069c:	1b42      	subs	r2, r0, r5
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d05c      	beq.n	800075c <__aeabi_fadd+0x278>
 80006a2:	28ff      	cmp	r0, #255	; 0xff
 80006a4:	d0ee      	beq.n	8000684 <__aeabi_fadd+0x1a0>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	04db      	lsls	r3, r3, #19
 80006aa:	431f      	orrs	r7, r3
 80006ac:	2a1b      	cmp	r2, #27
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_fadd+0x1ce>
 80006b0:	e082      	b.n	80007b8 <__aeabi_fadd+0x2d4>
 80006b2:	2301      	movs	r3, #1
 80006b4:	464d      	mov	r5, r9
 80006b6:	4463      	add	r3, ip
 80006b8:	e763      	b.n	8000582 <__aeabi_fadd+0x9e>
 80006ba:	2220      	movs	r2, #32
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	3001      	adds	r0, #1
 80006c0:	1a12      	subs	r2, r2, r0
 80006c2:	0019      	movs	r1, r3
 80006c4:	4093      	lsls	r3, r2
 80006c6:	40c1      	lsrs	r1, r0
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	4193      	sbcs	r3, r2
 80006cc:	2500      	movs	r5, #0
 80006ce:	430b      	orrs	r3, r1
 80006d0:	e780      	b.n	80005d4 <__aeabi_fadd+0xf0>
 80006d2:	2320      	movs	r3, #32
 80006d4:	4661      	mov	r1, ip
 80006d6:	1a1b      	subs	r3, r3, r0
 80006d8:	4099      	lsls	r1, r3
 80006da:	4662      	mov	r2, ip
 80006dc:	000b      	movs	r3, r1
 80006de:	40c2      	lsrs	r2, r0
 80006e0:	1e59      	subs	r1, r3, #1
 80006e2:	418b      	sbcs	r3, r1
 80006e4:	4313      	orrs	r3, r2
 80006e6:	e764      	b.n	80005b2 <__aeabi_fadd+0xce>
 80006e8:	000c      	movs	r4, r1
 80006ea:	4643      	mov	r3, r8
 80006ec:	0015      	movs	r5, r2
 80006ee:	e7b8      	b.n	8000662 <__aeabi_fadd+0x17e>
 80006f0:	4663      	mov	r3, ip
 80006f2:	1afe      	subs	r6, r7, r3
 80006f4:	0173      	lsls	r3, r6, #5
 80006f6:	d445      	bmi.n	8000784 <__aeabi_fadd+0x2a0>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_fadd+0x21a>
 80006fc:	e75e      	b.n	80005bc <__aeabi_fadd+0xd8>
 80006fe:	2400      	movs	r4, #0
 8000700:	2000      	movs	r0, #0
 8000702:	2600      	movs	r6, #0
 8000704:	e775      	b.n	80005f2 <__aeabi_fadd+0x10e>
 8000706:	2bff      	cmp	r3, #255	; 0xff
 8000708:	d0bb      	beq.n	8000682 <__aeabi_fadd+0x19e>
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	04db      	lsls	r3, r3, #19
 800070e:	431f      	orrs	r7, r3
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dd47      	ble.n	80007a4 <__aeabi_fadd+0x2c0>
 8000714:	2301      	movs	r3, #1
 8000716:	4662      	mov	r2, ip
 8000718:	000c      	movs	r4, r1
 800071a:	464d      	mov	r5, r9
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	e749      	b.n	80005b4 <__aeabi_fadd+0xd0>
 8000720:	0005      	movs	r5, r0
 8000722:	e79e      	b.n	8000662 <__aeabi_fadd+0x17e>
 8000724:	4661      	mov	r1, ip
 8000726:	2320      	movs	r3, #32
 8000728:	40d1      	lsrs	r1, r2
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	4662      	mov	r2, ip
 800072e:	409a      	lsls	r2, r3
 8000730:	0013      	movs	r3, r2
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	4193      	sbcs	r3, r2
 8000736:	430b      	orrs	r3, r1
 8000738:	e722      	b.n	8000580 <__aeabi_fadd+0x9c>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d146      	bne.n	80007cc <__aeabi_fadd+0x2e8>
 800073e:	2f00      	cmp	r7, #0
 8000740:	d062      	beq.n	8000808 <__aeabi_fadd+0x324>
 8000742:	4663      	mov	r3, ip
 8000744:	2000      	movs	r0, #0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x268>
 800074a:	e752      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800074c:	003b      	movs	r3, r7
 800074e:	4463      	add	r3, ip
 8000750:	015a      	lsls	r2, r3, #5
 8000752:	d583      	bpl.n	800065c <__aeabi_fadd+0x178>
 8000754:	4a32      	ldr	r2, [pc, #200]	; (8000820 <__aeabi_fadd+0x33c>)
 8000756:	3501      	adds	r5, #1
 8000758:	4013      	ands	r3, r2
 800075a:	e77f      	b.n	800065c <__aeabi_fadd+0x178>
 800075c:	2f00      	cmp	r7, #0
 800075e:	d0c4      	beq.n	80006ea <__aeabi_fadd+0x206>
 8000760:	1e53      	subs	r3, r2, #1
 8000762:	2a01      	cmp	r2, #1
 8000764:	d012      	beq.n	800078c <__aeabi_fadd+0x2a8>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d08c      	beq.n	8000684 <__aeabi_fadd+0x1a0>
 800076a:	001a      	movs	r2, r3
 800076c:	e79e      	b.n	80006ac <__aeabi_fadd+0x1c8>
 800076e:	2f00      	cmp	r7, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x290>
 8000772:	e77c      	b.n	800066e <__aeabi_fadd+0x18a>
 8000774:	4663      	mov	r3, ip
 8000776:	2b00      	cmp	r3, #0
 8000778:	d183      	bne.n	8000682 <__aeabi_fadd+0x19e>
 800077a:	2680      	movs	r6, #128	; 0x80
 800077c:	2400      	movs	r4, #0
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	03f6      	lsls	r6, r6, #15
 8000782:	e736      	b.n	80005f2 <__aeabi_fadd+0x10e>
 8000784:	4663      	mov	r3, ip
 8000786:	000c      	movs	r4, r1
 8000788:	1bde      	subs	r6, r3, r7
 800078a:	e717      	b.n	80005bc <__aeabi_fadd+0xd8>
 800078c:	003b      	movs	r3, r7
 800078e:	4463      	add	r3, ip
 8000790:	2501      	movs	r5, #1
 8000792:	015a      	lsls	r2, r3, #5
 8000794:	d400      	bmi.n	8000798 <__aeabi_fadd+0x2b4>
 8000796:	e761      	b.n	800065c <__aeabi_fadd+0x178>
 8000798:	2502      	movs	r5, #2
 800079a:	e6f7      	b.n	800058c <__aeabi_fadd+0xa8>
 800079c:	4663      	mov	r3, ip
 800079e:	2501      	movs	r5, #1
 80007a0:	1afb      	subs	r3, r7, r3
 80007a2:	e707      	b.n	80005b4 <__aeabi_fadd+0xd0>
 80007a4:	2320      	movs	r3, #32
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	0038      	movs	r0, r7
 80007aa:	409f      	lsls	r7, r3
 80007ac:	003b      	movs	r3, r7
 80007ae:	40d0      	lsrs	r0, r2
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	4193      	sbcs	r3, r2
 80007b4:	4303      	orrs	r3, r0
 80007b6:	e7ae      	b.n	8000716 <__aeabi_fadd+0x232>
 80007b8:	2320      	movs	r3, #32
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	0039      	movs	r1, r7
 80007be:	409f      	lsls	r7, r3
 80007c0:	003b      	movs	r3, r7
 80007c2:	40d1      	lsrs	r1, r2
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	4193      	sbcs	r3, r2
 80007c8:	430b      	orrs	r3, r1
 80007ca:	e773      	b.n	80006b4 <__aeabi_fadd+0x1d0>
 80007cc:	2f00      	cmp	r7, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0x2ee>
 80007d0:	e758      	b.n	8000684 <__aeabi_fadd+0x1a0>
 80007d2:	4662      	mov	r2, ip
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2f6>
 80007d8:	e755      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	03d2      	lsls	r2, r2, #15
 80007de:	4213      	tst	r3, r2
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x300>
 80007e2:	e750      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007e4:	4641      	mov	r1, r8
 80007e6:	4211      	tst	r1, r2
 80007e8:	d000      	beq.n	80007ec <__aeabi_fadd+0x308>
 80007ea:	e74c      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007ec:	4643      	mov	r3, r8
 80007ee:	e74a      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007f0:	4663      	mov	r3, ip
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d083      	beq.n	80006fe <__aeabi_fadd+0x21a>
 80007f6:	000c      	movs	r4, r1
 80007f8:	4646      	mov	r6, r8
 80007fa:	2000      	movs	r0, #0
 80007fc:	e6f9      	b.n	80005f2 <__aeabi_fadd+0x10e>
 80007fe:	4663      	mov	r3, ip
 8000800:	000c      	movs	r4, r1
 8000802:	1bdb      	subs	r3, r3, r7
 8000804:	3501      	adds	r5, #1
 8000806:	e6d5      	b.n	80005b4 <__aeabi_fadd+0xd0>
 8000808:	4646      	mov	r6, r8
 800080a:	2000      	movs	r0, #0
 800080c:	e6f1      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_fadd+0x330>
 8000812:	e723      	b.n	800065c <__aeabi_fadd+0x178>
 8000814:	2400      	movs	r4, #0
 8000816:	2600      	movs	r6, #0
 8000818:	e6eb      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	fbffffff 	.word	0xfbffffff

08000824 <__aeabi_fdiv>:
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	464f      	mov	r7, r9
 8000828:	4646      	mov	r6, r8
 800082a:	46d6      	mov	lr, sl
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	b5c0      	push	{r6, r7, lr}
 8000830:	0047      	lsls	r7, r0, #1
 8000832:	1c0c      	adds	r4, r1, #0
 8000834:	0a6d      	lsrs	r5, r5, #9
 8000836:	0e3f      	lsrs	r7, r7, #24
 8000838:	0fc6      	lsrs	r6, r0, #31
 800083a:	2f00      	cmp	r7, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fdiv+0x1c>
 800083e:	e06f      	b.n	8000920 <__aeabi_fdiv+0xfc>
 8000840:	2fff      	cmp	r7, #255	; 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fdiv+0x22>
 8000844:	e074      	b.n	8000930 <__aeabi_fdiv+0x10c>
 8000846:	2300      	movs	r3, #0
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	4699      	mov	r9, r3
 800084c:	469a      	mov	sl, r3
 800084e:	00ed      	lsls	r5, r5, #3
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4315      	orrs	r5, r2
 8000854:	3f7f      	subs	r7, #127	; 0x7f
 8000856:	0263      	lsls	r3, r4, #9
 8000858:	0a5b      	lsrs	r3, r3, #9
 800085a:	4698      	mov	r8, r3
 800085c:	0063      	lsls	r3, r4, #1
 800085e:	0e1b      	lsrs	r3, r3, #24
 8000860:	0fe4      	lsrs	r4, r4, #31
 8000862:	2b00      	cmp	r3, #0
 8000864:	d04d      	beq.n	8000902 <__aeabi_fdiv+0xde>
 8000866:	2bff      	cmp	r3, #255	; 0xff
 8000868:	d045      	beq.n	80008f6 <__aeabi_fdiv+0xd2>
 800086a:	4642      	mov	r2, r8
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	00d2      	lsls	r2, r2, #3
 8000870:	04c9      	lsls	r1, r1, #19
 8000872:	4311      	orrs	r1, r2
 8000874:	4688      	mov	r8, r1
 8000876:	2200      	movs	r2, #0
 8000878:	3b7f      	subs	r3, #127	; 0x7f
 800087a:	0031      	movs	r1, r6
 800087c:	1aff      	subs	r7, r7, r3
 800087e:	464b      	mov	r3, r9
 8000880:	4061      	eors	r1, r4
 8000882:	b2c9      	uxtb	r1, r1
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d900      	bls.n	800088a <__aeabi_fdiv+0x66>
 8000888:	e0b8      	b.n	80009fc <__aeabi_fdiv+0x1d8>
 800088a:	4870      	ldr	r0, [pc, #448]	; (8000a4c <__aeabi_fdiv+0x228>)
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	58c3      	ldr	r3, [r0, r3]
 8000890:	469f      	mov	pc, r3
 8000892:	2300      	movs	r3, #0
 8000894:	4698      	mov	r8, r3
 8000896:	0026      	movs	r6, r4
 8000898:	4645      	mov	r5, r8
 800089a:	4692      	mov	sl, r2
 800089c:	4653      	mov	r3, sl
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fdiv+0x80>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fdiv+0x19c>
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d100      	bne.n	80008aa <__aeabi_fdiv+0x86>
 80008a8:	e0a1      	b.n	80009ee <__aeabi_fdiv+0x1ca>
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d018      	beq.n	80008e0 <__aeabi_fdiv+0xbc>
 80008ae:	003b      	movs	r3, r7
 80008b0:	337f      	adds	r3, #127	; 0x7f
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	dd6d      	ble.n	8000992 <__aeabi_fdiv+0x16e>
 80008b6:	076a      	lsls	r2, r5, #29
 80008b8:	d004      	beq.n	80008c4 <__aeabi_fdiv+0xa0>
 80008ba:	220f      	movs	r2, #15
 80008bc:	402a      	ands	r2, r5
 80008be:	2a04      	cmp	r2, #4
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fdiv+0xa0>
 80008c2:	3504      	adds	r5, #4
 80008c4:	012a      	lsls	r2, r5, #4
 80008c6:	d503      	bpl.n	80008d0 <__aeabi_fdiv+0xac>
 80008c8:	4b61      	ldr	r3, [pc, #388]	; (8000a50 <__aeabi_fdiv+0x22c>)
 80008ca:	401d      	ands	r5, r3
 80008cc:	003b      	movs	r3, r7
 80008ce:	3380      	adds	r3, #128	; 0x80
 80008d0:	2bfe      	cmp	r3, #254	; 0xfe
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_fdiv+0xb2>
 80008d4:	e074      	b.n	80009c0 <__aeabi_fdiv+0x19c>
 80008d6:	01aa      	lsls	r2, r5, #6
 80008d8:	0a52      	lsrs	r2, r2, #9
 80008da:	b2d8      	uxtb	r0, r3
 80008dc:	e002      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80008de:	000e      	movs	r6, r1
 80008e0:	2000      	movs	r0, #0
 80008e2:	2200      	movs	r2, #0
 80008e4:	05c0      	lsls	r0, r0, #23
 80008e6:	07f6      	lsls	r6, r6, #31
 80008e8:	4310      	orrs	r0, r2
 80008ea:	4330      	orrs	r0, r6
 80008ec:	bce0      	pop	{r5, r6, r7}
 80008ee:	46ba      	mov	sl, r7
 80008f0:	46b1      	mov	r9, r6
 80008f2:	46a8      	mov	r8, r5
 80008f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f6:	4643      	mov	r3, r8
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d13f      	bne.n	800097c <__aeabi_fdiv+0x158>
 80008fc:	2202      	movs	r2, #2
 80008fe:	3fff      	subs	r7, #255	; 0xff
 8000900:	e003      	b.n	800090a <__aeabi_fdiv+0xe6>
 8000902:	4643      	mov	r3, r8
 8000904:	2b00      	cmp	r3, #0
 8000906:	d12d      	bne.n	8000964 <__aeabi_fdiv+0x140>
 8000908:	2201      	movs	r2, #1
 800090a:	0031      	movs	r1, r6
 800090c:	464b      	mov	r3, r9
 800090e:	4061      	eors	r1, r4
 8000910:	b2c9      	uxtb	r1, r1
 8000912:	4313      	orrs	r3, r2
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d838      	bhi.n	800098a <__aeabi_fdiv+0x166>
 8000918:	484e      	ldr	r0, [pc, #312]	; (8000a54 <__aeabi_fdiv+0x230>)
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	58c3      	ldr	r3, [r0, r3]
 800091e:	469f      	mov	pc, r3
 8000920:	2d00      	cmp	r5, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0x128>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e792      	b.n	8000856 <__aeabi_fdiv+0x32>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0x11c>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e78a      	b.n	8000856 <__aeabi_fdiv+0x32>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e784      	b.n	8000856 <__aeabi_fdiv+0x32>
 800094c:	0028      	movs	r0, r5
 800094e:	f001 ff1d 	bl	800278c <__clzsi2>
 8000952:	2776      	movs	r7, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409d      	lsls	r5, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e778      	b.n	8000856 <__aeabi_fdiv+0x32>
 8000964:	4640      	mov	r0, r8
 8000966:	f001 ff11 	bl	800278c <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	409a      	lsls	r2, r3
 8000970:	2376      	movs	r3, #118	; 0x76
 8000972:	425b      	negs	r3, r3
 8000974:	4690      	mov	r8, r2
 8000976:	1a1b      	subs	r3, r3, r0
 8000978:	2200      	movs	r2, #0
 800097a:	e77e      	b.n	800087a <__aeabi_fdiv+0x56>
 800097c:	2303      	movs	r3, #3
 800097e:	464a      	mov	r2, r9
 8000980:	431a      	orrs	r2, r3
 8000982:	4691      	mov	r9, r2
 8000984:	33fc      	adds	r3, #252	; 0xfc
 8000986:	2203      	movs	r2, #3
 8000988:	e777      	b.n	800087a <__aeabi_fdiv+0x56>
 800098a:	000e      	movs	r6, r1
 800098c:	20ff      	movs	r0, #255	; 0xff
 800098e:	2200      	movs	r2, #0
 8000990:	e7a8      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 8000992:	2201      	movs	r2, #1
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b1b      	cmp	r3, #27
 8000998:	dca2      	bgt.n	80008e0 <__aeabi_fdiv+0xbc>
 800099a:	379e      	adds	r7, #158	; 0x9e
 800099c:	002a      	movs	r2, r5
 800099e:	40bd      	lsls	r5, r7
 80009a0:	40da      	lsrs	r2, r3
 80009a2:	1e6b      	subs	r3, r5, #1
 80009a4:	419d      	sbcs	r5, r3
 80009a6:	4315      	orrs	r5, r2
 80009a8:	076a      	lsls	r2, r5, #29
 80009aa:	d004      	beq.n	80009b6 <__aeabi_fdiv+0x192>
 80009ac:	220f      	movs	r2, #15
 80009ae:	402a      	ands	r2, r5
 80009b0:	2a04      	cmp	r2, #4
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fdiv+0x192>
 80009b4:	3504      	adds	r5, #4
 80009b6:	016a      	lsls	r2, r5, #5
 80009b8:	d544      	bpl.n	8000a44 <__aeabi_fdiv+0x220>
 80009ba:	2001      	movs	r0, #1
 80009bc:	2200      	movs	r2, #0
 80009be:	e791      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009c0:	20ff      	movs	r0, #255	; 0xff
 80009c2:	2200      	movs	r2, #0
 80009c4:	e78e      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	2600      	movs	r6, #0
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	e789      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009d0:	2300      	movs	r3, #0
 80009d2:	4698      	mov	r8, r3
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	4215      	tst	r5, r2
 80009da:	d008      	beq.n	80009ee <__aeabi_fdiv+0x1ca>
 80009dc:	4643      	mov	r3, r8
 80009de:	4213      	tst	r3, r2
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x1ca>
 80009e2:	431a      	orrs	r2, r3
 80009e4:	0252      	lsls	r2, r2, #9
 80009e6:	0026      	movs	r6, r4
 80009e8:	20ff      	movs	r0, #255	; 0xff
 80009ea:	0a52      	lsrs	r2, r2, #9
 80009ec:	e77a      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	03d2      	lsls	r2, r2, #15
 80009f2:	432a      	orrs	r2, r5
 80009f4:	0252      	lsls	r2, r2, #9
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	0a52      	lsrs	r2, r2, #9
 80009fa:	e773      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009fc:	4642      	mov	r2, r8
 80009fe:	016b      	lsls	r3, r5, #5
 8000a00:	0155      	lsls	r5, r2, #5
 8000a02:	42ab      	cmp	r3, r5
 8000a04:	d21a      	bcs.n	8000a3c <__aeabi_fdiv+0x218>
 8000a06:	201b      	movs	r0, #27
 8000a08:	2200      	movs	r2, #0
 8000a0a:	3f01      	subs	r7, #1
 8000a0c:	2601      	movs	r6, #1
 8000a0e:	001c      	movs	r4, r3
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	db01      	blt.n	8000a1c <__aeabi_fdiv+0x1f8>
 8000a18:	429d      	cmp	r5, r3
 8000a1a:	d801      	bhi.n	8000a20 <__aeabi_fdiv+0x1fc>
 8000a1c:	1b5b      	subs	r3, r3, r5
 8000a1e:	4332      	orrs	r2, r6
 8000a20:	3801      	subs	r0, #1
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d1f3      	bne.n	8000a0e <__aeabi_fdiv+0x1ea>
 8000a26:	1e58      	subs	r0, r3, #1
 8000a28:	4183      	sbcs	r3, r0
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	001d      	movs	r5, r3
 8000a2e:	003b      	movs	r3, r7
 8000a30:	337f      	adds	r3, #127	; 0x7f
 8000a32:	000e      	movs	r6, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dd00      	ble.n	8000a3a <__aeabi_fdiv+0x216>
 8000a38:	e73d      	b.n	80008b6 <__aeabi_fdiv+0x92>
 8000a3a:	e7aa      	b.n	8000992 <__aeabi_fdiv+0x16e>
 8000a3c:	201a      	movs	r0, #26
 8000a3e:	2201      	movs	r2, #1
 8000a40:	1b5b      	subs	r3, r3, r5
 8000a42:	e7e3      	b.n	8000a0c <__aeabi_fdiv+0x1e8>
 8000a44:	01aa      	lsls	r2, r5, #6
 8000a46:	2000      	movs	r0, #0
 8000a48:	0a52      	lsrs	r2, r2, #9
 8000a4a:	e74b      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 8000a4c:	08008acc 	.word	0x08008acc
 8000a50:	f7ffffff 	.word	0xf7ffffff
 8000a54:	08008b0c 	.word	0x08008b0c

08000a58 <__aeabi_i2f>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d013      	beq.n	8000a86 <__aeabi_i2f+0x2e>
 8000a5e:	17c3      	asrs	r3, r0, #31
 8000a60:	18c5      	adds	r5, r0, r3
 8000a62:	405d      	eors	r5, r3
 8000a64:	0fc4      	lsrs	r4, r0, #31
 8000a66:	0028      	movs	r0, r5
 8000a68:	f001 fe90 	bl	800278c <__clzsi2>
 8000a6c:	239e      	movs	r3, #158	; 0x9e
 8000a6e:	0001      	movs	r1, r0
 8000a70:	1a1b      	subs	r3, r3, r0
 8000a72:	2b96      	cmp	r3, #150	; 0x96
 8000a74:	dc0f      	bgt.n	8000a96 <__aeabi_i2f+0x3e>
 8000a76:	2808      	cmp	r0, #8
 8000a78:	d031      	beq.n	8000ade <__aeabi_i2f+0x86>
 8000a7a:	3908      	subs	r1, #8
 8000a7c:	408d      	lsls	r5, r1
 8000a7e:	026d      	lsls	r5, r5, #9
 8000a80:	0a6d      	lsrs	r5, r5, #9
 8000a82:	b2d8      	uxtb	r0, r3
 8000a84:	e002      	b.n	8000a8c <__aeabi_i2f+0x34>
 8000a86:	2400      	movs	r4, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	05c0      	lsls	r0, r0, #23
 8000a8e:	4328      	orrs	r0, r5
 8000a90:	07e4      	lsls	r4, r4, #31
 8000a92:	4320      	orrs	r0, r4
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	2b99      	cmp	r3, #153	; 0x99
 8000a98:	dd0c      	ble.n	8000ab4 <__aeabi_i2f+0x5c>
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	1a12      	subs	r2, r2, r0
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	40d0      	lsrs	r0, r2
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	0008      	movs	r0, r1
 8000aa6:	301b      	adds	r0, #27
 8000aa8:	4085      	lsls	r5, r0
 8000aaa:	0028      	movs	r0, r5
 8000aac:	1e45      	subs	r5, r0, #1
 8000aae:	41a8      	sbcs	r0, r5
 8000ab0:	4302      	orrs	r2, r0
 8000ab2:	0015      	movs	r5, r2
 8000ab4:	2905      	cmp	r1, #5
 8000ab6:	dc16      	bgt.n	8000ae6 <__aeabi_i2f+0x8e>
 8000ab8:	002a      	movs	r2, r5
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <__aeabi_i2f+0xa0>)
 8000abc:	4002      	ands	r2, r0
 8000abe:	076e      	lsls	r6, r5, #29
 8000ac0:	d009      	beq.n	8000ad6 <__aeabi_i2f+0x7e>
 8000ac2:	260f      	movs	r6, #15
 8000ac4:	4035      	ands	r5, r6
 8000ac6:	2d04      	cmp	r5, #4
 8000ac8:	d005      	beq.n	8000ad6 <__aeabi_i2f+0x7e>
 8000aca:	3204      	adds	r2, #4
 8000acc:	0155      	lsls	r5, r2, #5
 8000ace:	d502      	bpl.n	8000ad6 <__aeabi_i2f+0x7e>
 8000ad0:	239f      	movs	r3, #159	; 0x9f
 8000ad2:	4002      	ands	r2, r0
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	0192      	lsls	r2, r2, #6
 8000ad8:	0a55      	lsrs	r5, r2, #9
 8000ada:	b2d8      	uxtb	r0, r3
 8000adc:	e7d6      	b.n	8000a8c <__aeabi_i2f+0x34>
 8000ade:	026d      	lsls	r5, r5, #9
 8000ae0:	2096      	movs	r0, #150	; 0x96
 8000ae2:	0a6d      	lsrs	r5, r5, #9
 8000ae4:	e7d2      	b.n	8000a8c <__aeabi_i2f+0x34>
 8000ae6:	1f4a      	subs	r2, r1, #5
 8000ae8:	4095      	lsls	r5, r2
 8000aea:	002a      	movs	r2, r5
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <__aeabi_i2f+0xa0>)
 8000aee:	4002      	ands	r2, r0
 8000af0:	076e      	lsls	r6, r5, #29
 8000af2:	d0f0      	beq.n	8000ad6 <__aeabi_i2f+0x7e>
 8000af4:	e7e5      	b.n	8000ac2 <__aeabi_i2f+0x6a>
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__aeabi_dadd>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	464f      	mov	r7, r9
 8000b00:	4646      	mov	r6, r8
 8000b02:	46d6      	mov	lr, sl
 8000b04:	0004      	movs	r4, r0
 8000b06:	b5c0      	push	{r6, r7, lr}
 8000b08:	001f      	movs	r7, r3
 8000b0a:	030b      	lsls	r3, r1, #12
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	004e      	lsls	r6, r1, #1
 8000b10:	0a5b      	lsrs	r3, r3, #9
 8000b12:	0fcd      	lsrs	r5, r1, #31
 8000b14:	0f61      	lsrs	r1, r4, #29
 8000b16:	007a      	lsls	r2, r7, #1
 8000b18:	4319      	orrs	r1, r3
 8000b1a:	00e3      	lsls	r3, r4, #3
 8000b1c:	033c      	lsls	r4, r7, #12
 8000b1e:	0fff      	lsrs	r7, r7, #31
 8000b20:	46bc      	mov	ip, r7
 8000b22:	0a64      	lsrs	r4, r4, #9
 8000b24:	0f47      	lsrs	r7, r0, #29
 8000b26:	4327      	orrs	r7, r4
 8000b28:	0d76      	lsrs	r6, r6, #21
 8000b2a:	0d52      	lsrs	r2, r2, #21
 8000b2c:	00c0      	lsls	r0, r0, #3
 8000b2e:	46b9      	mov	r9, r7
 8000b30:	4680      	mov	r8, r0
 8000b32:	1ab7      	subs	r7, r6, r2
 8000b34:	4565      	cmp	r5, ip
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x3e>
 8000b38:	e09b      	b.n	8000c72 <__aeabi_dadd+0x176>
 8000b3a:	2f00      	cmp	r7, #0
 8000b3c:	dc00      	bgt.n	8000b40 <__aeabi_dadd+0x44>
 8000b3e:	e084      	b.n	8000c4a <__aeabi_dadd+0x14e>
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x4a>
 8000b44:	e0be      	b.n	8000cc4 <__aeabi_dadd+0x1c8>
 8000b46:	4ac8      	ldr	r2, [pc, #800]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000b48:	4296      	cmp	r6, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x52>
 8000b4c:	e124      	b.n	8000d98 <__aeabi_dadd+0x29c>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	464c      	mov	r4, r9
 8000b52:	0412      	lsls	r2, r2, #16
 8000b54:	4314      	orrs	r4, r2
 8000b56:	46a1      	mov	r9, r4
 8000b58:	2f38      	cmp	r7, #56	; 0x38
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_dadd+0x62>
 8000b5c:	e167      	b.n	8000e2e <__aeabi_dadd+0x332>
 8000b5e:	2f1f      	cmp	r7, #31
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dadd+0x68>
 8000b62:	e1d6      	b.n	8000f12 <__aeabi_dadd+0x416>
 8000b64:	2220      	movs	r2, #32
 8000b66:	464c      	mov	r4, r9
 8000b68:	1bd2      	subs	r2, r2, r7
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	46a2      	mov	sl, r4
 8000b6e:	4644      	mov	r4, r8
 8000b70:	40fc      	lsrs	r4, r7
 8000b72:	0020      	movs	r0, r4
 8000b74:	4654      	mov	r4, sl
 8000b76:	4304      	orrs	r4, r0
 8000b78:	4640      	mov	r0, r8
 8000b7a:	4090      	lsls	r0, r2
 8000b7c:	1e42      	subs	r2, r0, #1
 8000b7e:	4190      	sbcs	r0, r2
 8000b80:	464a      	mov	r2, r9
 8000b82:	40fa      	lsrs	r2, r7
 8000b84:	4304      	orrs	r4, r0
 8000b86:	1a89      	subs	r1, r1, r2
 8000b88:	1b1c      	subs	r4, r3, r4
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	4192      	sbcs	r2, r2
 8000b8e:	4252      	negs	r2, r2
 8000b90:	1a8b      	subs	r3, r1, r2
 8000b92:	469a      	mov	sl, r3
 8000b94:	4653      	mov	r3, sl
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_dadd+0xa0>
 8000b9a:	e0d4      	b.n	8000d46 <__aeabi_dadd+0x24a>
 8000b9c:	4653      	mov	r3, sl
 8000b9e:	025a      	lsls	r2, r3, #9
 8000ba0:	0a53      	lsrs	r3, r2, #9
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0xb0>
 8000baa:	e104      	b.n	8000db6 <__aeabi_dadd+0x2ba>
 8000bac:	4650      	mov	r0, sl
 8000bae:	f001 fded 	bl	800278c <__clzsi2>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	3b08      	subs	r3, #8
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	0020      	movs	r0, r4
 8000bba:	1ad2      	subs	r2, r2, r3
 8000bbc:	4651      	mov	r1, sl
 8000bbe:	40d0      	lsrs	r0, r2
 8000bc0:	4099      	lsls	r1, r3
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	409c      	lsls	r4, r3
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	42b3      	cmp	r3, r6
 8000bca:	da00      	bge.n	8000bce <__aeabi_dadd+0xd2>
 8000bcc:	e102      	b.n	8000dd4 <__aeabi_dadd+0x2d8>
 8000bce:	1b9b      	subs	r3, r3, r6
 8000bd0:	1c59      	adds	r1, r3, #1
 8000bd2:	291f      	cmp	r1, #31
 8000bd4:	dd00      	ble.n	8000bd8 <__aeabi_dadd+0xdc>
 8000bd6:	e0a7      	b.n	8000d28 <__aeabi_dadd+0x22c>
 8000bd8:	2320      	movs	r3, #32
 8000bda:	0010      	movs	r0, r2
 8000bdc:	0026      	movs	r6, r4
 8000bde:	1a5b      	subs	r3, r3, r1
 8000be0:	409c      	lsls	r4, r3
 8000be2:	4098      	lsls	r0, r3
 8000be4:	40ce      	lsrs	r6, r1
 8000be6:	40ca      	lsrs	r2, r1
 8000be8:	1e63      	subs	r3, r4, #1
 8000bea:	419c      	sbcs	r4, r3
 8000bec:	4330      	orrs	r0, r6
 8000bee:	4692      	mov	sl, r2
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	4304      	orrs	r4, r0
 8000bf4:	0763      	lsls	r3, r4, #29
 8000bf6:	d009      	beq.n	8000c0c <__aeabi_dadd+0x110>
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	4023      	ands	r3, r4
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d005      	beq.n	8000c0c <__aeabi_dadd+0x110>
 8000c00:	1d23      	adds	r3, r4, #4
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	41a4      	sbcs	r4, r4
 8000c06:	4264      	negs	r4, r4
 8000c08:	44a2      	add	sl, r4
 8000c0a:	001c      	movs	r4, r3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	d400      	bmi.n	8000c14 <__aeabi_dadd+0x118>
 8000c12:	e09b      	b.n	8000d4c <__aeabi_dadd+0x250>
 8000c14:	4b94      	ldr	r3, [pc, #592]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000c16:	3601      	adds	r6, #1
 8000c18:	429e      	cmp	r6, r3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x122>
 8000c1c:	e0b8      	b.n	8000d90 <__aeabi_dadd+0x294>
 8000c1e:	4653      	mov	r3, sl
 8000c20:	4992      	ldr	r1, [pc, #584]	; (8000e6c <__aeabi_dadd+0x370>)
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	400b      	ands	r3, r1
 8000c26:	0019      	movs	r1, r3
 8000c28:	075b      	lsls	r3, r3, #29
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	0572      	lsls	r2, r6, #21
 8000c2e:	024c      	lsls	r4, r1, #9
 8000c30:	0b24      	lsrs	r4, r4, #12
 8000c32:	0d52      	lsrs	r2, r2, #21
 8000c34:	0512      	lsls	r2, r2, #20
 8000c36:	07ed      	lsls	r5, r5, #31
 8000c38:	4322      	orrs	r2, r4
 8000c3a:	432a      	orrs	r2, r5
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	0011      	movs	r1, r2
 8000c40:	bce0      	pop	{r5, r6, r7}
 8000c42:	46ba      	mov	sl, r7
 8000c44:	46b1      	mov	r9, r6
 8000c46:	46a8      	mov	r8, r5
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d048      	beq.n	8000ce0 <__aeabi_dadd+0x1e4>
 8000c4e:	1b97      	subs	r7, r2, r6
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_dadd+0x15a>
 8000c54:	e10e      	b.n	8000e74 <__aeabi_dadd+0x378>
 8000c56:	000c      	movs	r4, r1
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x162>
 8000c5c:	e1b7      	b.n	8000fce <__aeabi_dadd+0x4d2>
 8000c5e:	1e7c      	subs	r4, r7, #1
 8000c60:	2f01      	cmp	r7, #1
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x16a>
 8000c64:	e226      	b.n	80010b4 <__aeabi_dadd+0x5b8>
 8000c66:	4d80      	ldr	r5, [pc, #512]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000c68:	42af      	cmp	r7, r5
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x172>
 8000c6c:	e1d5      	b.n	800101a <__aeabi_dadd+0x51e>
 8000c6e:	0027      	movs	r7, r4
 8000c70:	e107      	b.n	8000e82 <__aeabi_dadd+0x386>
 8000c72:	2f00      	cmp	r7, #0
 8000c74:	dc00      	bgt.n	8000c78 <__aeabi_dadd+0x17c>
 8000c76:	e0b2      	b.n	8000dde <__aeabi_dadd+0x2e2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d047      	beq.n	8000d0c <__aeabi_dadd+0x210>
 8000c7c:	4a7a      	ldr	r2, [pc, #488]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000c7e:	4296      	cmp	r6, r2
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x188>
 8000c82:	e089      	b.n	8000d98 <__aeabi_dadd+0x29c>
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	464c      	mov	r4, r9
 8000c88:	0412      	lsls	r2, r2, #16
 8000c8a:	4314      	orrs	r4, r2
 8000c8c:	46a1      	mov	r9, r4
 8000c8e:	2f38      	cmp	r7, #56	; 0x38
 8000c90:	dc6b      	bgt.n	8000d6a <__aeabi_dadd+0x26e>
 8000c92:	2f1f      	cmp	r7, #31
 8000c94:	dc00      	bgt.n	8000c98 <__aeabi_dadd+0x19c>
 8000c96:	e16e      	b.n	8000f76 <__aeabi_dadd+0x47a>
 8000c98:	003a      	movs	r2, r7
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	3a20      	subs	r2, #32
 8000c9e:	40d0      	lsrs	r0, r2
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	2f20      	cmp	r7, #32
 8000ca4:	d007      	beq.n	8000cb6 <__aeabi_dadd+0x1ba>
 8000ca6:	2240      	movs	r2, #64	; 0x40
 8000ca8:	4648      	mov	r0, r9
 8000caa:	1bd2      	subs	r2, r2, r7
 8000cac:	4090      	lsls	r0, r2
 8000cae:	0002      	movs	r2, r0
 8000cb0:	4640      	mov	r0, r8
 8000cb2:	4310      	orrs	r0, r2
 8000cb4:	4680      	mov	r8, r0
 8000cb6:	4640      	mov	r0, r8
 8000cb8:	1e42      	subs	r2, r0, #1
 8000cba:	4190      	sbcs	r0, r2
 8000cbc:	4662      	mov	r2, ip
 8000cbe:	0004      	movs	r4, r0
 8000cc0:	4314      	orrs	r4, r2
 8000cc2:	e057      	b.n	8000d74 <__aeabi_dadd+0x278>
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	4302      	orrs	r2, r0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dadd+0x1d0>
 8000cca:	e103      	b.n	8000ed4 <__aeabi_dadd+0x3d8>
 8000ccc:	1e7a      	subs	r2, r7, #1
 8000cce:	2f01      	cmp	r7, #1
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x1d8>
 8000cd2:	e193      	b.n	8000ffc <__aeabi_dadd+0x500>
 8000cd4:	4c64      	ldr	r4, [pc, #400]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000cd6:	42a7      	cmp	r7, r4
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x1e0>
 8000cda:	e18a      	b.n	8000ff2 <__aeabi_dadd+0x4f6>
 8000cdc:	0017      	movs	r7, r2
 8000cde:	e73b      	b.n	8000b58 <__aeabi_dadd+0x5c>
 8000ce0:	4c63      	ldr	r4, [pc, #396]	; (8000e70 <__aeabi_dadd+0x374>)
 8000ce2:	1c72      	adds	r2, r6, #1
 8000ce4:	4222      	tst	r2, r4
 8000ce6:	d000      	beq.n	8000cea <__aeabi_dadd+0x1ee>
 8000ce8:	e0e0      	b.n	8000eac <__aeabi_dadd+0x3b0>
 8000cea:	000a      	movs	r2, r1
 8000cec:	431a      	orrs	r2, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_dadd+0x1f8>
 8000cf2:	e174      	b.n	8000fde <__aeabi_dadd+0x4e2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x1fe>
 8000cf8:	e1d0      	b.n	800109c <__aeabi_dadd+0x5a0>
 8000cfa:	464a      	mov	r2, r9
 8000cfc:	4302      	orrs	r2, r0
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_dadd+0x206>
 8000d00:	e1e3      	b.n	80010ca <__aeabi_dadd+0x5ce>
 8000d02:	074a      	lsls	r2, r1, #29
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	08c9      	lsrs	r1, r1, #3
 8000d0a:	e029      	b.n	8000d60 <__aeabi_dadd+0x264>
 8000d0c:	464a      	mov	r2, r9
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x218>
 8000d12:	e17d      	b.n	8001010 <__aeabi_dadd+0x514>
 8000d14:	1e7a      	subs	r2, r7, #1
 8000d16:	2f01      	cmp	r7, #1
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x220>
 8000d1a:	e0e0      	b.n	8000ede <__aeabi_dadd+0x3e2>
 8000d1c:	4c52      	ldr	r4, [pc, #328]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000d1e:	42a7      	cmp	r7, r4
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dadd+0x228>
 8000d22:	e166      	b.n	8000ff2 <__aeabi_dadd+0x4f6>
 8000d24:	0017      	movs	r7, r2
 8000d26:	e7b2      	b.n	8000c8e <__aeabi_dadd+0x192>
 8000d28:	0010      	movs	r0, r2
 8000d2a:	3b1f      	subs	r3, #31
 8000d2c:	40d8      	lsrs	r0, r3
 8000d2e:	2920      	cmp	r1, #32
 8000d30:	d003      	beq.n	8000d3a <__aeabi_dadd+0x23e>
 8000d32:	2340      	movs	r3, #64	; 0x40
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	409a      	lsls	r2, r3
 8000d38:	4314      	orrs	r4, r2
 8000d3a:	1e63      	subs	r3, r4, #1
 8000d3c:	419c      	sbcs	r4, r3
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2600      	movs	r6, #0
 8000d42:	469a      	mov	sl, r3
 8000d44:	4304      	orrs	r4, r0
 8000d46:	0763      	lsls	r3, r4, #29
 8000d48:	d000      	beq.n	8000d4c <__aeabi_dadd+0x250>
 8000d4a:	e755      	b.n	8000bf8 <__aeabi_dadd+0xfc>
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	08e3      	lsrs	r3, r4, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	4313      	orrs	r3, r2
 8000d54:	4652      	mov	r2, sl
 8000d56:	0037      	movs	r7, r6
 8000d58:	08d1      	lsrs	r1, r2, #3
 8000d5a:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000d5c:	4297      	cmp	r7, r2
 8000d5e:	d01f      	beq.n	8000da0 <__aeabi_dadd+0x2a4>
 8000d60:	0309      	lsls	r1, r1, #12
 8000d62:	057a      	lsls	r2, r7, #21
 8000d64:	0b0c      	lsrs	r4, r1, #12
 8000d66:	0d52      	lsrs	r2, r2, #21
 8000d68:	e764      	b.n	8000c34 <__aeabi_dadd+0x138>
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	464c      	mov	r4, r9
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	1e62      	subs	r2, r4, #1
 8000d72:	4194      	sbcs	r4, r2
 8000d74:	18e4      	adds	r4, r4, r3
 8000d76:	429c      	cmp	r4, r3
 8000d78:	4192      	sbcs	r2, r2
 8000d7a:	4252      	negs	r2, r2
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	448a      	add	sl, r1
 8000d80:	4653      	mov	r3, sl
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	d5df      	bpl.n	8000d46 <__aeabi_dadd+0x24a>
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000d88:	3601      	adds	r6, #1
 8000d8a:	429e      	cmp	r6, r3
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_dadd+0x294>
 8000d8e:	e0b3      	b.n	8000ef8 <__aeabi_dadd+0x3fc>
 8000d90:	0032      	movs	r2, r6
 8000d92:	2400      	movs	r4, #0
 8000d94:	2300      	movs	r3, #0
 8000d96:	e74d      	b.n	8000c34 <__aeabi_dadd+0x138>
 8000d98:	074a      	lsls	r2, r1, #29
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	08c9      	lsrs	r1, r1, #3
 8000da0:	001a      	movs	r2, r3
 8000da2:	430a      	orrs	r2, r1
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x2ac>
 8000da6:	e200      	b.n	80011aa <__aeabi_dadd+0x6ae>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	0324      	lsls	r4, r4, #12
 8000dac:	430c      	orrs	r4, r1
 8000dae:	0324      	lsls	r4, r4, #12
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000db2:	0b24      	lsrs	r4, r4, #12
 8000db4:	e73e      	b.n	8000c34 <__aeabi_dadd+0x138>
 8000db6:	0020      	movs	r0, r4
 8000db8:	f001 fce8 	bl	800278c <__clzsi2>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	2b1f      	cmp	r3, #31
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_dadd+0x2ca>
 8000dc4:	e6f7      	b.n	8000bb6 <__aeabi_dadd+0xba>
 8000dc6:	0022      	movs	r2, r4
 8000dc8:	3808      	subs	r0, #8
 8000dca:	4082      	lsls	r2, r0
 8000dcc:	2400      	movs	r4, #0
 8000dce:	42b3      	cmp	r3, r6
 8000dd0:	db00      	blt.n	8000dd4 <__aeabi_dadd+0x2d8>
 8000dd2:	e6fc      	b.n	8000bce <__aeabi_dadd+0xd2>
 8000dd4:	1af6      	subs	r6, r6, r3
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <__aeabi_dadd+0x370>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	4692      	mov	sl, r2
 8000ddc:	e70a      	b.n	8000bf4 <__aeabi_dadd+0xf8>
 8000dde:	2f00      	cmp	r7, #0
 8000de0:	d02b      	beq.n	8000e3a <__aeabi_dadd+0x33e>
 8000de2:	1b97      	subs	r7, r2, r6
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x2ee>
 8000de8:	e0b8      	b.n	8000f5c <__aeabi_dadd+0x460>
 8000dea:	4c1f      	ldr	r4, [pc, #124]	; (8000e68 <__aeabi_dadd+0x36c>)
 8000dec:	42a2      	cmp	r2, r4
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dadd+0x2f6>
 8000df0:	e11c      	b.n	800102c <__aeabi_dadd+0x530>
 8000df2:	2480      	movs	r4, #128	; 0x80
 8000df4:	0424      	lsls	r4, r4, #16
 8000df6:	4321      	orrs	r1, r4
 8000df8:	2f38      	cmp	r7, #56	; 0x38
 8000dfa:	dd00      	ble.n	8000dfe <__aeabi_dadd+0x302>
 8000dfc:	e11e      	b.n	800103c <__aeabi_dadd+0x540>
 8000dfe:	2f1f      	cmp	r7, #31
 8000e00:	dd00      	ble.n	8000e04 <__aeabi_dadd+0x308>
 8000e02:	e19e      	b.n	8001142 <__aeabi_dadd+0x646>
 8000e04:	2620      	movs	r6, #32
 8000e06:	000c      	movs	r4, r1
 8000e08:	1bf6      	subs	r6, r6, r7
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	40b4      	lsls	r4, r6
 8000e10:	40f8      	lsrs	r0, r7
 8000e12:	1e5e      	subs	r6, r3, #1
 8000e14:	41b3      	sbcs	r3, r6
 8000e16:	40f9      	lsrs	r1, r7
 8000e18:	4304      	orrs	r4, r0
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	4489      	add	r9, r1
 8000e1e:	4444      	add	r4, r8
 8000e20:	4544      	cmp	r4, r8
 8000e22:	419b      	sbcs	r3, r3
 8000e24:	425b      	negs	r3, r3
 8000e26:	444b      	add	r3, r9
 8000e28:	469a      	mov	sl, r3
 8000e2a:	0016      	movs	r6, r2
 8000e2c:	e7a8      	b.n	8000d80 <__aeabi_dadd+0x284>
 8000e2e:	4642      	mov	r2, r8
 8000e30:	464c      	mov	r4, r9
 8000e32:	4314      	orrs	r4, r2
 8000e34:	1e62      	subs	r2, r4, #1
 8000e36:	4194      	sbcs	r4, r2
 8000e38:	e6a6      	b.n	8000b88 <__aeabi_dadd+0x8c>
 8000e3a:	4c0d      	ldr	r4, [pc, #52]	; (8000e70 <__aeabi_dadd+0x374>)
 8000e3c:	1c72      	adds	r2, r6, #1
 8000e3e:	4222      	tst	r2, r4
 8000e40:	d000      	beq.n	8000e44 <__aeabi_dadd+0x348>
 8000e42:	e0a8      	b.n	8000f96 <__aeabi_dadd+0x49a>
 8000e44:	000a      	movs	r2, r1
 8000e46:	431a      	orrs	r2, r3
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x352>
 8000e4c:	e10a      	b.n	8001064 <__aeabi_dadd+0x568>
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dadd+0x358>
 8000e52:	e15e      	b.n	8001112 <__aeabi_dadd+0x616>
 8000e54:	464a      	mov	r2, r9
 8000e56:	4302      	orrs	r2, r0
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dadd+0x360>
 8000e5a:	e161      	b.n	8001120 <__aeabi_dadd+0x624>
 8000e5c:	074a      	lsls	r2, r1, #29
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	e77c      	b.n	8000d60 <__aeabi_dadd+0x264>
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	000007ff 	.word	0x000007ff
 8000e6c:	ff7fffff 	.word	0xff7fffff
 8000e70:	000007fe 	.word	0x000007fe
 8000e74:	4ccf      	ldr	r4, [pc, #828]	; (80011b4 <__aeabi_dadd+0x6b8>)
 8000e76:	42a2      	cmp	r2, r4
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x380>
 8000e7a:	e0ce      	b.n	800101a <__aeabi_dadd+0x51e>
 8000e7c:	2480      	movs	r4, #128	; 0x80
 8000e7e:	0424      	lsls	r4, r4, #16
 8000e80:	4321      	orrs	r1, r4
 8000e82:	2f38      	cmp	r7, #56	; 0x38
 8000e84:	dc5b      	bgt.n	8000f3e <__aeabi_dadd+0x442>
 8000e86:	2f1f      	cmp	r7, #31
 8000e88:	dd00      	ble.n	8000e8c <__aeabi_dadd+0x390>
 8000e8a:	e0dc      	b.n	8001046 <__aeabi_dadd+0x54a>
 8000e8c:	2520      	movs	r5, #32
 8000e8e:	000c      	movs	r4, r1
 8000e90:	1bed      	subs	r5, r5, r7
 8000e92:	001e      	movs	r6, r3
 8000e94:	40ab      	lsls	r3, r5
 8000e96:	40ac      	lsls	r4, r5
 8000e98:	40fe      	lsrs	r6, r7
 8000e9a:	1e5d      	subs	r5, r3, #1
 8000e9c:	41ab      	sbcs	r3, r5
 8000e9e:	4334      	orrs	r4, r6
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	464b      	mov	r3, r9
 8000ea6:	1a5b      	subs	r3, r3, r1
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	e04c      	b.n	8000f46 <__aeabi_dadd+0x44a>
 8000eac:	464a      	mov	r2, r9
 8000eae:	1a1c      	subs	r4, r3, r0
 8000eb0:	1a88      	subs	r0, r1, r2
 8000eb2:	42a3      	cmp	r3, r4
 8000eb4:	4192      	sbcs	r2, r2
 8000eb6:	4252      	negs	r2, r2
 8000eb8:	4692      	mov	sl, r2
 8000eba:	0002      	movs	r2, r0
 8000ebc:	4650      	mov	r0, sl
 8000ebe:	1a12      	subs	r2, r2, r0
 8000ec0:	4692      	mov	sl, r2
 8000ec2:	0212      	lsls	r2, r2, #8
 8000ec4:	d478      	bmi.n	8000fb8 <__aeabi_dadd+0x4bc>
 8000ec6:	4653      	mov	r3, sl
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	d000      	beq.n	8000ece <__aeabi_dadd+0x3d2>
 8000ecc:	e66a      	b.n	8000ba4 <__aeabi_dadd+0xa8>
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	e745      	b.n	8000d60 <__aeabi_dadd+0x264>
 8000ed4:	074a      	lsls	r2, r1, #29
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	e73d      	b.n	8000d5a <__aeabi_dadd+0x25e>
 8000ede:	181c      	adds	r4, r3, r0
 8000ee0:	429c      	cmp	r4, r3
 8000ee2:	419b      	sbcs	r3, r3
 8000ee4:	4449      	add	r1, r9
 8000ee6:	468a      	mov	sl, r1
 8000ee8:	425b      	negs	r3, r3
 8000eea:	449a      	add	sl, r3
 8000eec:	4653      	mov	r3, sl
 8000eee:	2601      	movs	r6, #1
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	d400      	bmi.n	8000ef6 <__aeabi_dadd+0x3fa>
 8000ef4:	e727      	b.n	8000d46 <__aeabi_dadd+0x24a>
 8000ef6:	2602      	movs	r6, #2
 8000ef8:	4652      	mov	r2, sl
 8000efa:	4baf      	ldr	r3, [pc, #700]	; (80011b8 <__aeabi_dadd+0x6bc>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	401a      	ands	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	4021      	ands	r1, r4
 8000f04:	0862      	lsrs	r2, r4, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	07dc      	lsls	r4, r3, #31
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	469a      	mov	sl, r3
 8000f0e:	4314      	orrs	r4, r2
 8000f10:	e670      	b.n	8000bf4 <__aeabi_dadd+0xf8>
 8000f12:	003a      	movs	r2, r7
 8000f14:	464c      	mov	r4, r9
 8000f16:	3a20      	subs	r2, #32
 8000f18:	40d4      	lsrs	r4, r2
 8000f1a:	46a4      	mov	ip, r4
 8000f1c:	2f20      	cmp	r7, #32
 8000f1e:	d007      	beq.n	8000f30 <__aeabi_dadd+0x434>
 8000f20:	2240      	movs	r2, #64	; 0x40
 8000f22:	4648      	mov	r0, r9
 8000f24:	1bd2      	subs	r2, r2, r7
 8000f26:	4090      	lsls	r0, r2
 8000f28:	0002      	movs	r2, r0
 8000f2a:	4640      	mov	r0, r8
 8000f2c:	4310      	orrs	r0, r2
 8000f2e:	4680      	mov	r8, r0
 8000f30:	4640      	mov	r0, r8
 8000f32:	1e42      	subs	r2, r0, #1
 8000f34:	4190      	sbcs	r0, r2
 8000f36:	4662      	mov	r2, ip
 8000f38:	0004      	movs	r4, r0
 8000f3a:	4314      	orrs	r4, r2
 8000f3c:	e624      	b.n	8000b88 <__aeabi_dadd+0x8c>
 8000f3e:	4319      	orrs	r1, r3
 8000f40:	000c      	movs	r4, r1
 8000f42:	1e63      	subs	r3, r4, #1
 8000f44:	419c      	sbcs	r4, r3
 8000f46:	4643      	mov	r3, r8
 8000f48:	1b1c      	subs	r4, r3, r4
 8000f4a:	45a0      	cmp	r8, r4
 8000f4c:	419b      	sbcs	r3, r3
 8000f4e:	4649      	mov	r1, r9
 8000f50:	425b      	negs	r3, r3
 8000f52:	1acb      	subs	r3, r1, r3
 8000f54:	469a      	mov	sl, r3
 8000f56:	4665      	mov	r5, ip
 8000f58:	0016      	movs	r6, r2
 8000f5a:	e61b      	b.n	8000b94 <__aeabi_dadd+0x98>
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	431c      	orrs	r4, r3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x468>
 8000f62:	e0c7      	b.n	80010f4 <__aeabi_dadd+0x5f8>
 8000f64:	1e7c      	subs	r4, r7, #1
 8000f66:	2f01      	cmp	r7, #1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_dadd+0x470>
 8000f6a:	e0f9      	b.n	8001160 <__aeabi_dadd+0x664>
 8000f6c:	4e91      	ldr	r6, [pc, #580]	; (80011b4 <__aeabi_dadd+0x6b8>)
 8000f6e:	42b7      	cmp	r7, r6
 8000f70:	d05c      	beq.n	800102c <__aeabi_dadd+0x530>
 8000f72:	0027      	movs	r7, r4
 8000f74:	e740      	b.n	8000df8 <__aeabi_dadd+0x2fc>
 8000f76:	2220      	movs	r2, #32
 8000f78:	464c      	mov	r4, r9
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	1bd2      	subs	r2, r2, r7
 8000f7e:	4094      	lsls	r4, r2
 8000f80:	40f8      	lsrs	r0, r7
 8000f82:	4304      	orrs	r4, r0
 8000f84:	4640      	mov	r0, r8
 8000f86:	4090      	lsls	r0, r2
 8000f88:	1e42      	subs	r2, r0, #1
 8000f8a:	4190      	sbcs	r0, r2
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	40fa      	lsrs	r2, r7
 8000f90:	4304      	orrs	r4, r0
 8000f92:	1889      	adds	r1, r1, r2
 8000f94:	e6ee      	b.n	8000d74 <__aeabi_dadd+0x278>
 8000f96:	4c87      	ldr	r4, [pc, #540]	; (80011b4 <__aeabi_dadd+0x6b8>)
 8000f98:	42a2      	cmp	r2, r4
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x4a2>
 8000f9c:	e6f9      	b.n	8000d92 <__aeabi_dadd+0x296>
 8000f9e:	1818      	adds	r0, r3, r0
 8000fa0:	4298      	cmp	r0, r3
 8000fa2:	419b      	sbcs	r3, r3
 8000fa4:	4449      	add	r1, r9
 8000fa6:	425b      	negs	r3, r3
 8000fa8:	18cb      	adds	r3, r1, r3
 8000faa:	07dc      	lsls	r4, r3, #31
 8000fac:	0840      	lsrs	r0, r0, #1
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	469a      	mov	sl, r3
 8000fb2:	0016      	movs	r6, r2
 8000fb4:	4304      	orrs	r4, r0
 8000fb6:	e6c6      	b.n	8000d46 <__aeabi_dadd+0x24a>
 8000fb8:	4642      	mov	r2, r8
 8000fba:	1ad4      	subs	r4, r2, r3
 8000fbc:	45a0      	cmp	r8, r4
 8000fbe:	4180      	sbcs	r0, r0
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	4240      	negs	r0, r0
 8000fc4:	1a59      	subs	r1, r3, r1
 8000fc6:	1a0b      	subs	r3, r1, r0
 8000fc8:	469a      	mov	sl, r3
 8000fca:	4665      	mov	r5, ip
 8000fcc:	e5ea      	b.n	8000ba4 <__aeabi_dadd+0xa8>
 8000fce:	464b      	mov	r3, r9
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	08c0      	lsrs	r0, r0, #3
 8000fd4:	075b      	lsls	r3, r3, #29
 8000fd6:	4665      	mov	r5, ip
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	08d1      	lsrs	r1, r2, #3
 8000fdc:	e6bd      	b.n	8000d5a <__aeabi_dadd+0x25e>
 8000fde:	2a00      	cmp	r2, #0
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_dadd+0x4e8>
 8000fe2:	e08e      	b.n	8001102 <__aeabi_dadd+0x606>
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	4303      	orrs	r3, r0
 8000fe8:	d117      	bne.n	800101a <__aeabi_dadd+0x51e>
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	2500      	movs	r5, #0
 8000fee:	0309      	lsls	r1, r1, #12
 8000ff0:	e6da      	b.n	8000da8 <__aeabi_dadd+0x2ac>
 8000ff2:	074a      	lsls	r2, r1, #29
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	08c9      	lsrs	r1, r1, #3
 8000ffa:	e6d1      	b.n	8000da0 <__aeabi_dadd+0x2a4>
 8000ffc:	1a1c      	subs	r4, r3, r0
 8000ffe:	464a      	mov	r2, r9
 8001000:	42a3      	cmp	r3, r4
 8001002:	419b      	sbcs	r3, r3
 8001004:	1a89      	subs	r1, r1, r2
 8001006:	425b      	negs	r3, r3
 8001008:	1acb      	subs	r3, r1, r3
 800100a:	469a      	mov	sl, r3
 800100c:	2601      	movs	r6, #1
 800100e:	e5c1      	b.n	8000b94 <__aeabi_dadd+0x98>
 8001010:	074a      	lsls	r2, r1, #29
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	4313      	orrs	r3, r2
 8001016:	08c9      	lsrs	r1, r1, #3
 8001018:	e69f      	b.n	8000d5a <__aeabi_dadd+0x25e>
 800101a:	4643      	mov	r3, r8
 800101c:	08d8      	lsrs	r0, r3, #3
 800101e:	464b      	mov	r3, r9
 8001020:	464a      	mov	r2, r9
 8001022:	075b      	lsls	r3, r3, #29
 8001024:	4665      	mov	r5, ip
 8001026:	4303      	orrs	r3, r0
 8001028:	08d1      	lsrs	r1, r2, #3
 800102a:	e6b9      	b.n	8000da0 <__aeabi_dadd+0x2a4>
 800102c:	4643      	mov	r3, r8
 800102e:	08d8      	lsrs	r0, r3, #3
 8001030:	464b      	mov	r3, r9
 8001032:	464a      	mov	r2, r9
 8001034:	075b      	lsls	r3, r3, #29
 8001036:	4303      	orrs	r3, r0
 8001038:	08d1      	lsrs	r1, r2, #3
 800103a:	e6b1      	b.n	8000da0 <__aeabi_dadd+0x2a4>
 800103c:	4319      	orrs	r1, r3
 800103e:	000c      	movs	r4, r1
 8001040:	1e63      	subs	r3, r4, #1
 8001042:	419c      	sbcs	r4, r3
 8001044:	e6eb      	b.n	8000e1e <__aeabi_dadd+0x322>
 8001046:	003c      	movs	r4, r7
 8001048:	000d      	movs	r5, r1
 800104a:	3c20      	subs	r4, #32
 800104c:	40e5      	lsrs	r5, r4
 800104e:	2f20      	cmp	r7, #32
 8001050:	d003      	beq.n	800105a <__aeabi_dadd+0x55e>
 8001052:	2440      	movs	r4, #64	; 0x40
 8001054:	1be4      	subs	r4, r4, r7
 8001056:	40a1      	lsls	r1, r4
 8001058:	430b      	orrs	r3, r1
 800105a:	001c      	movs	r4, r3
 800105c:	1e63      	subs	r3, r4, #1
 800105e:	419c      	sbcs	r4, r3
 8001060:	432c      	orrs	r4, r5
 8001062:	e770      	b.n	8000f46 <__aeabi_dadd+0x44a>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d0e1      	beq.n	800102c <__aeabi_dadd+0x530>
 8001068:	464a      	mov	r2, r9
 800106a:	4302      	orrs	r2, r0
 800106c:	d0c1      	beq.n	8000ff2 <__aeabi_dadd+0x4f6>
 800106e:	074a      	lsls	r2, r1, #29
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	4313      	orrs	r3, r2
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	08c9      	lsrs	r1, r1, #3
 8001078:	0312      	lsls	r2, r2, #12
 800107a:	4211      	tst	r1, r2
 800107c:	d008      	beq.n	8001090 <__aeabi_dadd+0x594>
 800107e:	4648      	mov	r0, r9
 8001080:	08c4      	lsrs	r4, r0, #3
 8001082:	4214      	tst	r4, r2
 8001084:	d104      	bne.n	8001090 <__aeabi_dadd+0x594>
 8001086:	4643      	mov	r3, r8
 8001088:	0021      	movs	r1, r4
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	0742      	lsls	r2, r0, #29
 800108e:	4313      	orrs	r3, r2
 8001090:	0f5a      	lsrs	r2, r3, #29
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	0752      	lsls	r2, r2, #29
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	4313      	orrs	r3, r2
 800109a:	e681      	b.n	8000da0 <__aeabi_dadd+0x2a4>
 800109c:	464b      	mov	r3, r9
 800109e:	4303      	orrs	r3, r0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x5a8>
 80010a2:	e714      	b.n	8000ece <__aeabi_dadd+0x3d2>
 80010a4:	464b      	mov	r3, r9
 80010a6:	464a      	mov	r2, r9
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	075b      	lsls	r3, r3, #29
 80010ac:	4665      	mov	r5, ip
 80010ae:	4303      	orrs	r3, r0
 80010b0:	08d1      	lsrs	r1, r2, #3
 80010b2:	e655      	b.n	8000d60 <__aeabi_dadd+0x264>
 80010b4:	1ac4      	subs	r4, r0, r3
 80010b6:	45a0      	cmp	r8, r4
 80010b8:	4180      	sbcs	r0, r0
 80010ba:	464b      	mov	r3, r9
 80010bc:	4240      	negs	r0, r0
 80010be:	1a59      	subs	r1, r3, r1
 80010c0:	1a0b      	subs	r3, r1, r0
 80010c2:	469a      	mov	sl, r3
 80010c4:	4665      	mov	r5, ip
 80010c6:	2601      	movs	r6, #1
 80010c8:	e564      	b.n	8000b94 <__aeabi_dadd+0x98>
 80010ca:	1a1c      	subs	r4, r3, r0
 80010cc:	464a      	mov	r2, r9
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	4180      	sbcs	r0, r0
 80010d2:	1a8a      	subs	r2, r1, r2
 80010d4:	4240      	negs	r0, r0
 80010d6:	1a12      	subs	r2, r2, r0
 80010d8:	4692      	mov	sl, r2
 80010da:	0212      	lsls	r2, r2, #8
 80010dc:	d549      	bpl.n	8001172 <__aeabi_dadd+0x676>
 80010de:	4642      	mov	r2, r8
 80010e0:	1ad4      	subs	r4, r2, r3
 80010e2:	45a0      	cmp	r8, r4
 80010e4:	4180      	sbcs	r0, r0
 80010e6:	464b      	mov	r3, r9
 80010e8:	4240      	negs	r0, r0
 80010ea:	1a59      	subs	r1, r3, r1
 80010ec:	1a0b      	subs	r3, r1, r0
 80010ee:	469a      	mov	sl, r3
 80010f0:	4665      	mov	r5, ip
 80010f2:	e57f      	b.n	8000bf4 <__aeabi_dadd+0xf8>
 80010f4:	464b      	mov	r3, r9
 80010f6:	464a      	mov	r2, r9
 80010f8:	08c0      	lsrs	r0, r0, #3
 80010fa:	075b      	lsls	r3, r3, #29
 80010fc:	4303      	orrs	r3, r0
 80010fe:	08d1      	lsrs	r1, r2, #3
 8001100:	e62b      	b.n	8000d5a <__aeabi_dadd+0x25e>
 8001102:	464a      	mov	r2, r9
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	4302      	orrs	r2, r0
 8001108:	d138      	bne.n	800117c <__aeabi_dadd+0x680>
 800110a:	074a      	lsls	r2, r1, #29
 800110c:	4313      	orrs	r3, r2
 800110e:	08c9      	lsrs	r1, r1, #3
 8001110:	e646      	b.n	8000da0 <__aeabi_dadd+0x2a4>
 8001112:	464b      	mov	r3, r9
 8001114:	464a      	mov	r2, r9
 8001116:	08c0      	lsrs	r0, r0, #3
 8001118:	075b      	lsls	r3, r3, #29
 800111a:	4303      	orrs	r3, r0
 800111c:	08d1      	lsrs	r1, r2, #3
 800111e:	e61f      	b.n	8000d60 <__aeabi_dadd+0x264>
 8001120:	181c      	adds	r4, r3, r0
 8001122:	429c      	cmp	r4, r3
 8001124:	419b      	sbcs	r3, r3
 8001126:	4449      	add	r1, r9
 8001128:	468a      	mov	sl, r1
 800112a:	425b      	negs	r3, r3
 800112c:	449a      	add	sl, r3
 800112e:	4653      	mov	r3, sl
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	d400      	bmi.n	8001136 <__aeabi_dadd+0x63a>
 8001134:	e607      	b.n	8000d46 <__aeabi_dadd+0x24a>
 8001136:	4652      	mov	r2, sl
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <__aeabi_dadd+0x6bc>)
 800113a:	2601      	movs	r6, #1
 800113c:	401a      	ands	r2, r3
 800113e:	4692      	mov	sl, r2
 8001140:	e601      	b.n	8000d46 <__aeabi_dadd+0x24a>
 8001142:	003c      	movs	r4, r7
 8001144:	000e      	movs	r6, r1
 8001146:	3c20      	subs	r4, #32
 8001148:	40e6      	lsrs	r6, r4
 800114a:	2f20      	cmp	r7, #32
 800114c:	d003      	beq.n	8001156 <__aeabi_dadd+0x65a>
 800114e:	2440      	movs	r4, #64	; 0x40
 8001150:	1be4      	subs	r4, r4, r7
 8001152:	40a1      	lsls	r1, r4
 8001154:	430b      	orrs	r3, r1
 8001156:	001c      	movs	r4, r3
 8001158:	1e63      	subs	r3, r4, #1
 800115a:	419c      	sbcs	r4, r3
 800115c:	4334      	orrs	r4, r6
 800115e:	e65e      	b.n	8000e1e <__aeabi_dadd+0x322>
 8001160:	4443      	add	r3, r8
 8001162:	4283      	cmp	r3, r0
 8001164:	4180      	sbcs	r0, r0
 8001166:	4449      	add	r1, r9
 8001168:	468a      	mov	sl, r1
 800116a:	4240      	negs	r0, r0
 800116c:	001c      	movs	r4, r3
 800116e:	4482      	add	sl, r0
 8001170:	e6bc      	b.n	8000eec <__aeabi_dadd+0x3f0>
 8001172:	4653      	mov	r3, sl
 8001174:	4323      	orrs	r3, r4
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x67e>
 8001178:	e6a9      	b.n	8000ece <__aeabi_dadd+0x3d2>
 800117a:	e5e4      	b.n	8000d46 <__aeabi_dadd+0x24a>
 800117c:	074a      	lsls	r2, r1, #29
 800117e:	4313      	orrs	r3, r2
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	08c9      	lsrs	r1, r1, #3
 8001184:	0312      	lsls	r2, r2, #12
 8001186:	4211      	tst	r1, r2
 8001188:	d009      	beq.n	800119e <__aeabi_dadd+0x6a2>
 800118a:	4648      	mov	r0, r9
 800118c:	08c4      	lsrs	r4, r0, #3
 800118e:	4214      	tst	r4, r2
 8001190:	d105      	bne.n	800119e <__aeabi_dadd+0x6a2>
 8001192:	4643      	mov	r3, r8
 8001194:	4665      	mov	r5, ip
 8001196:	0021      	movs	r1, r4
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	0742      	lsls	r2, r0, #29
 800119c:	4313      	orrs	r3, r2
 800119e:	0f5a      	lsrs	r2, r3, #29
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	08db      	lsrs	r3, r3, #3
 80011a4:	0752      	lsls	r2, r2, #29
 80011a6:	4313      	orrs	r3, r2
 80011a8:	e5fa      	b.n	8000da0 <__aeabi_dadd+0x2a4>
 80011aa:	2300      	movs	r3, #0
 80011ac:	4a01      	ldr	r2, [pc, #4]	; (80011b4 <__aeabi_dadd+0x6b8>)
 80011ae:	001c      	movs	r4, r3
 80011b0:	e540      	b.n	8000c34 <__aeabi_dadd+0x138>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	000007ff 	.word	0x000007ff
 80011b8:	ff7fffff 	.word	0xff7fffff

080011bc <__aeabi_ddiv>:
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	4657      	mov	r7, sl
 80011c0:	464e      	mov	r6, r9
 80011c2:	4645      	mov	r5, r8
 80011c4:	46de      	mov	lr, fp
 80011c6:	b5e0      	push	{r5, r6, r7, lr}
 80011c8:	030c      	lsls	r4, r1, #12
 80011ca:	001f      	movs	r7, r3
 80011cc:	004b      	lsls	r3, r1, #1
 80011ce:	4681      	mov	r9, r0
 80011d0:	4692      	mov	sl, r2
 80011d2:	0005      	movs	r5, r0
 80011d4:	b085      	sub	sp, #20
 80011d6:	0b24      	lsrs	r4, r4, #12
 80011d8:	0d5b      	lsrs	r3, r3, #21
 80011da:	0fce      	lsrs	r6, r1, #31
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x26>
 80011e0:	e152      	b.n	8001488 <__aeabi_ddiv+0x2cc>
 80011e2:	4ad2      	ldr	r2, [pc, #840]	; (800152c <__aeabi_ddiv+0x370>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d100      	bne.n	80011ea <__aeabi_ddiv+0x2e>
 80011e8:	e16e      	b.n	80014c8 <__aeabi_ddiv+0x30c>
 80011ea:	0f42      	lsrs	r2, r0, #29
 80011ec:	00e4      	lsls	r4, r4, #3
 80011ee:	4314      	orrs	r4, r2
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0412      	lsls	r2, r2, #16
 80011f4:	4322      	orrs	r2, r4
 80011f6:	4690      	mov	r8, r2
 80011f8:	4acd      	ldr	r2, [pc, #820]	; (8001530 <__aeabi_ddiv+0x374>)
 80011fa:	00c5      	lsls	r5, r0, #3
 80011fc:	4693      	mov	fp, r2
 80011fe:	449b      	add	fp, r3
 8001200:	2300      	movs	r3, #0
 8001202:	4699      	mov	r9, r3
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	033c      	lsls	r4, r7, #12
 8001208:	007b      	lsls	r3, r7, #1
 800120a:	4650      	mov	r0, sl
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	0d5b      	lsrs	r3, r3, #21
 8001210:	0fff      	lsrs	r7, r7, #31
 8001212:	2b00      	cmp	r3, #0
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x5c>
 8001216:	e11a      	b.n	800144e <__aeabi_ddiv+0x292>
 8001218:	4ac4      	ldr	r2, [pc, #784]	; (800152c <__aeabi_ddiv+0x370>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x64>
 800121e:	e15e      	b.n	80014de <__aeabi_ddiv+0x322>
 8001220:	0f42      	lsrs	r2, r0, #29
 8001222:	00e4      	lsls	r4, r4, #3
 8001224:	4322      	orrs	r2, r4
 8001226:	2480      	movs	r4, #128	; 0x80
 8001228:	0424      	lsls	r4, r4, #16
 800122a:	4314      	orrs	r4, r2
 800122c:	4ac0      	ldr	r2, [pc, #768]	; (8001530 <__aeabi_ddiv+0x374>)
 800122e:	00c1      	lsls	r1, r0, #3
 8001230:	4694      	mov	ip, r2
 8001232:	465a      	mov	r2, fp
 8001234:	4463      	add	r3, ip
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	469b      	mov	fp, r3
 800123a:	2000      	movs	r0, #0
 800123c:	0033      	movs	r3, r6
 800123e:	407b      	eors	r3, r7
 8001240:	469a      	mov	sl, r3
 8001242:	464b      	mov	r3, r9
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d827      	bhi.n	8001298 <__aeabi_ddiv+0xdc>
 8001248:	4aba      	ldr	r2, [pc, #744]	; (8001534 <__aeabi_ddiv+0x378>)
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	58d3      	ldr	r3, [r2, r3]
 800124e:	469f      	mov	pc, r3
 8001250:	46b2      	mov	sl, r6
 8001252:	9b00      	ldr	r3, [sp, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d016      	beq.n	8001286 <__aeabi_ddiv+0xca>
 8001258:	2b03      	cmp	r3, #3
 800125a:	d100      	bne.n	800125e <__aeabi_ddiv+0xa2>
 800125c:	e287      	b.n	800176e <__aeabi_ddiv+0x5b2>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d000      	beq.n	8001264 <__aeabi_ddiv+0xa8>
 8001262:	e0d5      	b.n	8001410 <__aeabi_ddiv+0x254>
 8001264:	2300      	movs	r3, #0
 8001266:	2200      	movs	r2, #0
 8001268:	2500      	movs	r5, #0
 800126a:	051b      	lsls	r3, r3, #20
 800126c:	4313      	orrs	r3, r2
 800126e:	4652      	mov	r2, sl
 8001270:	07d2      	lsls	r2, r2, #31
 8001272:	4313      	orrs	r3, r2
 8001274:	0028      	movs	r0, r5
 8001276:	0019      	movs	r1, r3
 8001278:	b005      	add	sp, #20
 800127a:	bcf0      	pop	{r4, r5, r6, r7}
 800127c:	46bb      	mov	fp, r7
 800127e:	46b2      	mov	sl, r6
 8001280:	46a9      	mov	r9, r5
 8001282:	46a0      	mov	r8, r4
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	2200      	movs	r2, #0
 8001288:	2500      	movs	r5, #0
 800128a:	4ba8      	ldr	r3, [pc, #672]	; (800152c <__aeabi_ddiv+0x370>)
 800128c:	e7ed      	b.n	800126a <__aeabi_ddiv+0xae>
 800128e:	46ba      	mov	sl, r7
 8001290:	46a0      	mov	r8, r4
 8001292:	000d      	movs	r5, r1
 8001294:	9000      	str	r0, [sp, #0]
 8001296:	e7dc      	b.n	8001252 <__aeabi_ddiv+0x96>
 8001298:	4544      	cmp	r4, r8
 800129a:	d200      	bcs.n	800129e <__aeabi_ddiv+0xe2>
 800129c:	e1c4      	b.n	8001628 <__aeabi_ddiv+0x46c>
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0xe6>
 80012a0:	e1bf      	b.n	8001622 <__aeabi_ddiv+0x466>
 80012a2:	2301      	movs	r3, #1
 80012a4:	425b      	negs	r3, r3
 80012a6:	469c      	mov	ip, r3
 80012a8:	002e      	movs	r6, r5
 80012aa:	4640      	mov	r0, r8
 80012ac:	2500      	movs	r5, #0
 80012ae:	44e3      	add	fp, ip
 80012b0:	0223      	lsls	r3, r4, #8
 80012b2:	0e0c      	lsrs	r4, r1, #24
 80012b4:	431c      	orrs	r4, r3
 80012b6:	0c1b      	lsrs	r3, r3, #16
 80012b8:	4699      	mov	r9, r3
 80012ba:	0423      	lsls	r3, r4, #16
 80012bc:	020a      	lsls	r2, r1, #8
 80012be:	0c1f      	lsrs	r7, r3, #16
 80012c0:	4649      	mov	r1, r9
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	9701      	str	r7, [sp, #4]
 80012c6:	f7fe ffaf 	bl	8000228 <__aeabi_uidivmod>
 80012ca:	0002      	movs	r2, r0
 80012cc:	437a      	muls	r2, r7
 80012ce:	040b      	lsls	r3, r1, #16
 80012d0:	0c31      	lsrs	r1, r6, #16
 80012d2:	4680      	mov	r8, r0
 80012d4:	4319      	orrs	r1, r3
 80012d6:	428a      	cmp	r2, r1
 80012d8:	d907      	bls.n	80012ea <__aeabi_ddiv+0x12e>
 80012da:	2301      	movs	r3, #1
 80012dc:	425b      	negs	r3, r3
 80012de:	469c      	mov	ip, r3
 80012e0:	1909      	adds	r1, r1, r4
 80012e2:	44e0      	add	r8, ip
 80012e4:	428c      	cmp	r4, r1
 80012e6:	d800      	bhi.n	80012ea <__aeabi_ddiv+0x12e>
 80012e8:	e201      	b.n	80016ee <__aeabi_ddiv+0x532>
 80012ea:	1a88      	subs	r0, r1, r2
 80012ec:	4649      	mov	r1, r9
 80012ee:	f7fe ff9b 	bl	8000228 <__aeabi_uidivmod>
 80012f2:	9a01      	ldr	r2, [sp, #4]
 80012f4:	0436      	lsls	r6, r6, #16
 80012f6:	4342      	muls	r2, r0
 80012f8:	0409      	lsls	r1, r1, #16
 80012fa:	0c36      	lsrs	r6, r6, #16
 80012fc:	0003      	movs	r3, r0
 80012fe:	430e      	orrs	r6, r1
 8001300:	42b2      	cmp	r2, r6
 8001302:	d904      	bls.n	800130e <__aeabi_ddiv+0x152>
 8001304:	1936      	adds	r6, r6, r4
 8001306:	3b01      	subs	r3, #1
 8001308:	42b4      	cmp	r4, r6
 800130a:	d800      	bhi.n	800130e <__aeabi_ddiv+0x152>
 800130c:	e1e9      	b.n	80016e2 <__aeabi_ddiv+0x526>
 800130e:	1ab0      	subs	r0, r6, r2
 8001310:	4642      	mov	r2, r8
 8001312:	9e00      	ldr	r6, [sp, #0]
 8001314:	0412      	lsls	r2, r2, #16
 8001316:	431a      	orrs	r2, r3
 8001318:	0c33      	lsrs	r3, r6, #16
 800131a:	001f      	movs	r7, r3
 800131c:	0c11      	lsrs	r1, r2, #16
 800131e:	4690      	mov	r8, r2
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	0413      	lsls	r3, r2, #16
 8001324:	0432      	lsls	r2, r6, #16
 8001326:	0c16      	lsrs	r6, r2, #16
 8001328:	0032      	movs	r2, r6
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	435a      	muls	r2, r3
 800132e:	9603      	str	r6, [sp, #12]
 8001330:	437b      	muls	r3, r7
 8001332:	434e      	muls	r6, r1
 8001334:	4379      	muls	r1, r7
 8001336:	0c17      	lsrs	r7, r2, #16
 8001338:	46bc      	mov	ip, r7
 800133a:	199b      	adds	r3, r3, r6
 800133c:	4463      	add	r3, ip
 800133e:	429e      	cmp	r6, r3
 8001340:	d903      	bls.n	800134a <__aeabi_ddiv+0x18e>
 8001342:	2680      	movs	r6, #128	; 0x80
 8001344:	0276      	lsls	r6, r6, #9
 8001346:	46b4      	mov	ip, r6
 8001348:	4461      	add	r1, ip
 800134a:	0c1e      	lsrs	r6, r3, #16
 800134c:	1871      	adds	r1, r6, r1
 800134e:	0416      	lsls	r6, r2, #16
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	0c36      	lsrs	r6, r6, #16
 8001354:	199e      	adds	r6, r3, r6
 8001356:	4288      	cmp	r0, r1
 8001358:	d302      	bcc.n	8001360 <__aeabi_ddiv+0x1a4>
 800135a:	d112      	bne.n	8001382 <__aeabi_ddiv+0x1c6>
 800135c:	42b5      	cmp	r5, r6
 800135e:	d210      	bcs.n	8001382 <__aeabi_ddiv+0x1c6>
 8001360:	4643      	mov	r3, r8
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	9b00      	ldr	r3, [sp, #0]
 8001366:	469c      	mov	ip, r3
 8001368:	4465      	add	r5, ip
 800136a:	001f      	movs	r7, r3
 800136c:	429d      	cmp	r5, r3
 800136e:	419b      	sbcs	r3, r3
 8001370:	425b      	negs	r3, r3
 8001372:	191b      	adds	r3, r3, r4
 8001374:	18c0      	adds	r0, r0, r3
 8001376:	4284      	cmp	r4, r0
 8001378:	d200      	bcs.n	800137c <__aeabi_ddiv+0x1c0>
 800137a:	e19e      	b.n	80016ba <__aeabi_ddiv+0x4fe>
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x1c4>
 800137e:	e199      	b.n	80016b4 <__aeabi_ddiv+0x4f8>
 8001380:	4690      	mov	r8, r2
 8001382:	1bae      	subs	r6, r5, r6
 8001384:	42b5      	cmp	r5, r6
 8001386:	41ad      	sbcs	r5, r5
 8001388:	1a40      	subs	r0, r0, r1
 800138a:	426d      	negs	r5, r5
 800138c:	1b40      	subs	r0, r0, r5
 800138e:	4284      	cmp	r4, r0
 8001390:	d100      	bne.n	8001394 <__aeabi_ddiv+0x1d8>
 8001392:	e1d2      	b.n	800173a <__aeabi_ddiv+0x57e>
 8001394:	4649      	mov	r1, r9
 8001396:	f7fe ff47 	bl	8000228 <__aeabi_uidivmod>
 800139a:	9a01      	ldr	r2, [sp, #4]
 800139c:	040b      	lsls	r3, r1, #16
 800139e:	4342      	muls	r2, r0
 80013a0:	0c31      	lsrs	r1, r6, #16
 80013a2:	0005      	movs	r5, r0
 80013a4:	4319      	orrs	r1, r3
 80013a6:	428a      	cmp	r2, r1
 80013a8:	d900      	bls.n	80013ac <__aeabi_ddiv+0x1f0>
 80013aa:	e16c      	b.n	8001686 <__aeabi_ddiv+0x4ca>
 80013ac:	1a88      	subs	r0, r1, r2
 80013ae:	4649      	mov	r1, r9
 80013b0:	f7fe ff3a 	bl	8000228 <__aeabi_uidivmod>
 80013b4:	9a01      	ldr	r2, [sp, #4]
 80013b6:	0436      	lsls	r6, r6, #16
 80013b8:	4342      	muls	r2, r0
 80013ba:	0409      	lsls	r1, r1, #16
 80013bc:	0c36      	lsrs	r6, r6, #16
 80013be:	0003      	movs	r3, r0
 80013c0:	430e      	orrs	r6, r1
 80013c2:	42b2      	cmp	r2, r6
 80013c4:	d900      	bls.n	80013c8 <__aeabi_ddiv+0x20c>
 80013c6:	e153      	b.n	8001670 <__aeabi_ddiv+0x4b4>
 80013c8:	9803      	ldr	r0, [sp, #12]
 80013ca:	1ab6      	subs	r6, r6, r2
 80013cc:	0002      	movs	r2, r0
 80013ce:	042d      	lsls	r5, r5, #16
 80013d0:	431d      	orrs	r5, r3
 80013d2:	9f02      	ldr	r7, [sp, #8]
 80013d4:	042b      	lsls	r3, r5, #16
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	435a      	muls	r2, r3
 80013da:	437b      	muls	r3, r7
 80013dc:	469c      	mov	ip, r3
 80013de:	0c29      	lsrs	r1, r5, #16
 80013e0:	4348      	muls	r0, r1
 80013e2:	0c13      	lsrs	r3, r2, #16
 80013e4:	4484      	add	ip, r0
 80013e6:	4463      	add	r3, ip
 80013e8:	4379      	muls	r1, r7
 80013ea:	4298      	cmp	r0, r3
 80013ec:	d903      	bls.n	80013f6 <__aeabi_ddiv+0x23a>
 80013ee:	2080      	movs	r0, #128	; 0x80
 80013f0:	0240      	lsls	r0, r0, #9
 80013f2:	4684      	mov	ip, r0
 80013f4:	4461      	add	r1, ip
 80013f6:	0c18      	lsrs	r0, r3, #16
 80013f8:	0412      	lsls	r2, r2, #16
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	0c12      	lsrs	r2, r2, #16
 80013fe:	1840      	adds	r0, r0, r1
 8001400:	189b      	adds	r3, r3, r2
 8001402:	4286      	cmp	r6, r0
 8001404:	d200      	bcs.n	8001408 <__aeabi_ddiv+0x24c>
 8001406:	e100      	b.n	800160a <__aeabi_ddiv+0x44e>
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x250>
 800140a:	e0fb      	b.n	8001604 <__aeabi_ddiv+0x448>
 800140c:	2301      	movs	r3, #1
 800140e:	431d      	orrs	r5, r3
 8001410:	4b49      	ldr	r3, [pc, #292]	; (8001538 <__aeabi_ddiv+0x37c>)
 8001412:	445b      	add	r3, fp
 8001414:	2b00      	cmp	r3, #0
 8001416:	dc00      	bgt.n	800141a <__aeabi_ddiv+0x25e>
 8001418:	e0aa      	b.n	8001570 <__aeabi_ddiv+0x3b4>
 800141a:	076a      	lsls	r2, r5, #29
 800141c:	d000      	beq.n	8001420 <__aeabi_ddiv+0x264>
 800141e:	e13d      	b.n	800169c <__aeabi_ddiv+0x4e0>
 8001420:	08e9      	lsrs	r1, r5, #3
 8001422:	4642      	mov	r2, r8
 8001424:	01d2      	lsls	r2, r2, #7
 8001426:	d506      	bpl.n	8001436 <__aeabi_ddiv+0x27a>
 8001428:	4642      	mov	r2, r8
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <__aeabi_ddiv+0x380>)
 800142c:	401a      	ands	r2, r3
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	4690      	mov	r8, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	445b      	add	r3, fp
 8001436:	4a42      	ldr	r2, [pc, #264]	; (8001540 <__aeabi_ddiv+0x384>)
 8001438:	4293      	cmp	r3, r2
 800143a:	dd00      	ble.n	800143e <__aeabi_ddiv+0x282>
 800143c:	e723      	b.n	8001286 <__aeabi_ddiv+0xca>
 800143e:	4642      	mov	r2, r8
 8001440:	055b      	lsls	r3, r3, #21
 8001442:	0755      	lsls	r5, r2, #29
 8001444:	0252      	lsls	r2, r2, #9
 8001446:	430d      	orrs	r5, r1
 8001448:	0b12      	lsrs	r2, r2, #12
 800144a:	0d5b      	lsrs	r3, r3, #21
 800144c:	e70d      	b.n	800126a <__aeabi_ddiv+0xae>
 800144e:	4651      	mov	r1, sl
 8001450:	4321      	orrs	r1, r4
 8001452:	d100      	bne.n	8001456 <__aeabi_ddiv+0x29a>
 8001454:	e07c      	b.n	8001550 <__aeabi_ddiv+0x394>
 8001456:	2c00      	cmp	r4, #0
 8001458:	d100      	bne.n	800145c <__aeabi_ddiv+0x2a0>
 800145a:	e0fb      	b.n	8001654 <__aeabi_ddiv+0x498>
 800145c:	0020      	movs	r0, r4
 800145e:	f001 f995 	bl	800278c <__clzsi2>
 8001462:	0002      	movs	r2, r0
 8001464:	3a0b      	subs	r2, #11
 8001466:	231d      	movs	r3, #29
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	4652      	mov	r2, sl
 800146c:	0001      	movs	r1, r0
 800146e:	40da      	lsrs	r2, r3
 8001470:	4653      	mov	r3, sl
 8001472:	3908      	subs	r1, #8
 8001474:	408b      	lsls	r3, r1
 8001476:	408c      	lsls	r4, r1
 8001478:	0019      	movs	r1, r3
 800147a:	4314      	orrs	r4, r2
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <__aeabi_ddiv+0x388>)
 800147e:	4458      	add	r0, fp
 8001480:	469b      	mov	fp, r3
 8001482:	4483      	add	fp, r0
 8001484:	2000      	movs	r0, #0
 8001486:	e6d9      	b.n	800123c <__aeabi_ddiv+0x80>
 8001488:	0003      	movs	r3, r0
 800148a:	4323      	orrs	r3, r4
 800148c:	4698      	mov	r8, r3
 800148e:	d044      	beq.n	800151a <__aeabi_ddiv+0x35e>
 8001490:	2c00      	cmp	r4, #0
 8001492:	d100      	bne.n	8001496 <__aeabi_ddiv+0x2da>
 8001494:	e0cf      	b.n	8001636 <__aeabi_ddiv+0x47a>
 8001496:	0020      	movs	r0, r4
 8001498:	f001 f978 	bl	800278c <__clzsi2>
 800149c:	0001      	movs	r1, r0
 800149e:	0002      	movs	r2, r0
 80014a0:	390b      	subs	r1, #11
 80014a2:	231d      	movs	r3, #29
 80014a4:	1a5b      	subs	r3, r3, r1
 80014a6:	4649      	mov	r1, r9
 80014a8:	0010      	movs	r0, r2
 80014aa:	40d9      	lsrs	r1, r3
 80014ac:	3808      	subs	r0, #8
 80014ae:	4084      	lsls	r4, r0
 80014b0:	000b      	movs	r3, r1
 80014b2:	464d      	mov	r5, r9
 80014b4:	4323      	orrs	r3, r4
 80014b6:	4698      	mov	r8, r3
 80014b8:	4085      	lsls	r5, r0
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <__aeabi_ddiv+0x38c>)
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	469b      	mov	fp, r3
 80014c0:	2300      	movs	r3, #0
 80014c2:	4699      	mov	r9, r3
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	e69e      	b.n	8001206 <__aeabi_ddiv+0x4a>
 80014c8:	0002      	movs	r2, r0
 80014ca:	4322      	orrs	r2, r4
 80014cc:	4690      	mov	r8, r2
 80014ce:	d11d      	bne.n	800150c <__aeabi_ddiv+0x350>
 80014d0:	2208      	movs	r2, #8
 80014d2:	469b      	mov	fp, r3
 80014d4:	2302      	movs	r3, #2
 80014d6:	2500      	movs	r5, #0
 80014d8:	4691      	mov	r9, r2
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	e693      	b.n	8001206 <__aeabi_ddiv+0x4a>
 80014de:	4651      	mov	r1, sl
 80014e0:	4321      	orrs	r1, r4
 80014e2:	d109      	bne.n	80014f8 <__aeabi_ddiv+0x33c>
 80014e4:	2302      	movs	r3, #2
 80014e6:	464a      	mov	r2, r9
 80014e8:	431a      	orrs	r2, r3
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <__aeabi_ddiv+0x390>)
 80014ec:	4691      	mov	r9, r2
 80014ee:	469c      	mov	ip, r3
 80014f0:	2400      	movs	r4, #0
 80014f2:	2002      	movs	r0, #2
 80014f4:	44e3      	add	fp, ip
 80014f6:	e6a1      	b.n	800123c <__aeabi_ddiv+0x80>
 80014f8:	2303      	movs	r3, #3
 80014fa:	464a      	mov	r2, r9
 80014fc:	431a      	orrs	r2, r3
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <__aeabi_ddiv+0x390>)
 8001500:	4691      	mov	r9, r2
 8001502:	469c      	mov	ip, r3
 8001504:	4651      	mov	r1, sl
 8001506:	2003      	movs	r0, #3
 8001508:	44e3      	add	fp, ip
 800150a:	e697      	b.n	800123c <__aeabi_ddiv+0x80>
 800150c:	220c      	movs	r2, #12
 800150e:	469b      	mov	fp, r3
 8001510:	2303      	movs	r3, #3
 8001512:	46a0      	mov	r8, r4
 8001514:	4691      	mov	r9, r2
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	e675      	b.n	8001206 <__aeabi_ddiv+0x4a>
 800151a:	2304      	movs	r3, #4
 800151c:	4699      	mov	r9, r3
 800151e:	2300      	movs	r3, #0
 8001520:	469b      	mov	fp, r3
 8001522:	3301      	adds	r3, #1
 8001524:	2500      	movs	r5, #0
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	e66d      	b.n	8001206 <__aeabi_ddiv+0x4a>
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	000007ff 	.word	0x000007ff
 8001530:	fffffc01 	.word	0xfffffc01
 8001534:	08008b4c 	.word	0x08008b4c
 8001538:	000003ff 	.word	0x000003ff
 800153c:	feffffff 	.word	0xfeffffff
 8001540:	000007fe 	.word	0x000007fe
 8001544:	000003f3 	.word	0x000003f3
 8001548:	fffffc0d 	.word	0xfffffc0d
 800154c:	fffff801 	.word	0xfffff801
 8001550:	464a      	mov	r2, r9
 8001552:	2301      	movs	r3, #1
 8001554:	431a      	orrs	r2, r3
 8001556:	4691      	mov	r9, r2
 8001558:	2400      	movs	r4, #0
 800155a:	2001      	movs	r0, #1
 800155c:	e66e      	b.n	800123c <__aeabi_ddiv+0x80>
 800155e:	2300      	movs	r3, #0
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	469a      	mov	sl, r3
 8001564:	2500      	movs	r5, #0
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <__aeabi_ddiv+0x5cc>)
 8001568:	0312      	lsls	r2, r2, #12
 800156a:	e67e      	b.n	800126a <__aeabi_ddiv+0xae>
 800156c:	2501      	movs	r5, #1
 800156e:	426d      	negs	r5, r5
 8001570:	2201      	movs	r2, #1
 8001572:	1ad2      	subs	r2, r2, r3
 8001574:	2a38      	cmp	r2, #56	; 0x38
 8001576:	dd00      	ble.n	800157a <__aeabi_ddiv+0x3be>
 8001578:	e674      	b.n	8001264 <__aeabi_ddiv+0xa8>
 800157a:	2a1f      	cmp	r2, #31
 800157c:	dc00      	bgt.n	8001580 <__aeabi_ddiv+0x3c4>
 800157e:	e0bd      	b.n	80016fc <__aeabi_ddiv+0x540>
 8001580:	211f      	movs	r1, #31
 8001582:	4249      	negs	r1, r1
 8001584:	1acb      	subs	r3, r1, r3
 8001586:	4641      	mov	r1, r8
 8001588:	40d9      	lsrs	r1, r3
 800158a:	000b      	movs	r3, r1
 800158c:	2a20      	cmp	r2, #32
 800158e:	d004      	beq.n	800159a <__aeabi_ddiv+0x3de>
 8001590:	4641      	mov	r1, r8
 8001592:	4a7e      	ldr	r2, [pc, #504]	; (800178c <__aeabi_ddiv+0x5d0>)
 8001594:	445a      	add	r2, fp
 8001596:	4091      	lsls	r1, r2
 8001598:	430d      	orrs	r5, r1
 800159a:	0029      	movs	r1, r5
 800159c:	1e4a      	subs	r2, r1, #1
 800159e:	4191      	sbcs	r1, r2
 80015a0:	4319      	orrs	r1, r3
 80015a2:	2307      	movs	r3, #7
 80015a4:	001d      	movs	r5, r3
 80015a6:	2200      	movs	r2, #0
 80015a8:	400d      	ands	r5, r1
 80015aa:	420b      	tst	r3, r1
 80015ac:	d100      	bne.n	80015b0 <__aeabi_ddiv+0x3f4>
 80015ae:	e0d0      	b.n	8001752 <__aeabi_ddiv+0x596>
 80015b0:	220f      	movs	r2, #15
 80015b2:	2300      	movs	r3, #0
 80015b4:	400a      	ands	r2, r1
 80015b6:	2a04      	cmp	r2, #4
 80015b8:	d100      	bne.n	80015bc <__aeabi_ddiv+0x400>
 80015ba:	e0c7      	b.n	800174c <__aeabi_ddiv+0x590>
 80015bc:	1d0a      	adds	r2, r1, #4
 80015be:	428a      	cmp	r2, r1
 80015c0:	4189      	sbcs	r1, r1
 80015c2:	4249      	negs	r1, r1
 80015c4:	185b      	adds	r3, r3, r1
 80015c6:	0011      	movs	r1, r2
 80015c8:	021a      	lsls	r2, r3, #8
 80015ca:	d400      	bmi.n	80015ce <__aeabi_ddiv+0x412>
 80015cc:	e0be      	b.n	800174c <__aeabi_ddiv+0x590>
 80015ce:	2301      	movs	r3, #1
 80015d0:	2200      	movs	r2, #0
 80015d2:	2500      	movs	r5, #0
 80015d4:	e649      	b.n	800126a <__aeabi_ddiv+0xae>
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	4643      	mov	r3, r8
 80015da:	0312      	lsls	r2, r2, #12
 80015dc:	4213      	tst	r3, r2
 80015de:	d008      	beq.n	80015f2 <__aeabi_ddiv+0x436>
 80015e0:	4214      	tst	r4, r2
 80015e2:	d106      	bne.n	80015f2 <__aeabi_ddiv+0x436>
 80015e4:	4322      	orrs	r2, r4
 80015e6:	0312      	lsls	r2, r2, #12
 80015e8:	46ba      	mov	sl, r7
 80015ea:	000d      	movs	r5, r1
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <__aeabi_ddiv+0x5cc>)
 80015ee:	0b12      	lsrs	r2, r2, #12
 80015f0:	e63b      	b.n	800126a <__aeabi_ddiv+0xae>
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	4643      	mov	r3, r8
 80015f6:	0312      	lsls	r2, r2, #12
 80015f8:	431a      	orrs	r2, r3
 80015fa:	0312      	lsls	r2, r2, #12
 80015fc:	46b2      	mov	sl, r6
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <__aeabi_ddiv+0x5cc>)
 8001600:	0b12      	lsrs	r2, r2, #12
 8001602:	e632      	b.n	800126a <__aeabi_ddiv+0xae>
 8001604:	2b00      	cmp	r3, #0
 8001606:	d100      	bne.n	800160a <__aeabi_ddiv+0x44e>
 8001608:	e702      	b.n	8001410 <__aeabi_ddiv+0x254>
 800160a:	19a6      	adds	r6, r4, r6
 800160c:	1e6a      	subs	r2, r5, #1
 800160e:	42a6      	cmp	r6, r4
 8001610:	d200      	bcs.n	8001614 <__aeabi_ddiv+0x458>
 8001612:	e089      	b.n	8001728 <__aeabi_ddiv+0x56c>
 8001614:	4286      	cmp	r6, r0
 8001616:	d200      	bcs.n	800161a <__aeabi_ddiv+0x45e>
 8001618:	e09f      	b.n	800175a <__aeabi_ddiv+0x59e>
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x462>
 800161c:	e0af      	b.n	800177e <__aeabi_ddiv+0x5c2>
 800161e:	0015      	movs	r5, r2
 8001620:	e6f4      	b.n	800140c <__aeabi_ddiv+0x250>
 8001622:	42a9      	cmp	r1, r5
 8001624:	d900      	bls.n	8001628 <__aeabi_ddiv+0x46c>
 8001626:	e63c      	b.n	80012a2 <__aeabi_ddiv+0xe6>
 8001628:	4643      	mov	r3, r8
 800162a:	07de      	lsls	r6, r3, #31
 800162c:	0858      	lsrs	r0, r3, #1
 800162e:	086b      	lsrs	r3, r5, #1
 8001630:	431e      	orrs	r6, r3
 8001632:	07ed      	lsls	r5, r5, #31
 8001634:	e63c      	b.n	80012b0 <__aeabi_ddiv+0xf4>
 8001636:	f001 f8a9 	bl	800278c <__clzsi2>
 800163a:	0001      	movs	r1, r0
 800163c:	0002      	movs	r2, r0
 800163e:	3115      	adds	r1, #21
 8001640:	3220      	adds	r2, #32
 8001642:	291c      	cmp	r1, #28
 8001644:	dc00      	bgt.n	8001648 <__aeabi_ddiv+0x48c>
 8001646:	e72c      	b.n	80014a2 <__aeabi_ddiv+0x2e6>
 8001648:	464b      	mov	r3, r9
 800164a:	3808      	subs	r0, #8
 800164c:	4083      	lsls	r3, r0
 800164e:	2500      	movs	r5, #0
 8001650:	4698      	mov	r8, r3
 8001652:	e732      	b.n	80014ba <__aeabi_ddiv+0x2fe>
 8001654:	f001 f89a 	bl	800278c <__clzsi2>
 8001658:	0003      	movs	r3, r0
 800165a:	001a      	movs	r2, r3
 800165c:	3215      	adds	r2, #21
 800165e:	3020      	adds	r0, #32
 8001660:	2a1c      	cmp	r2, #28
 8001662:	dc00      	bgt.n	8001666 <__aeabi_ddiv+0x4aa>
 8001664:	e6ff      	b.n	8001466 <__aeabi_ddiv+0x2aa>
 8001666:	4654      	mov	r4, sl
 8001668:	3b08      	subs	r3, #8
 800166a:	2100      	movs	r1, #0
 800166c:	409c      	lsls	r4, r3
 800166e:	e705      	b.n	800147c <__aeabi_ddiv+0x2c0>
 8001670:	1936      	adds	r6, r6, r4
 8001672:	3b01      	subs	r3, #1
 8001674:	42b4      	cmp	r4, r6
 8001676:	d900      	bls.n	800167a <__aeabi_ddiv+0x4be>
 8001678:	e6a6      	b.n	80013c8 <__aeabi_ddiv+0x20c>
 800167a:	42b2      	cmp	r2, r6
 800167c:	d800      	bhi.n	8001680 <__aeabi_ddiv+0x4c4>
 800167e:	e6a3      	b.n	80013c8 <__aeabi_ddiv+0x20c>
 8001680:	1e83      	subs	r3, r0, #2
 8001682:	1936      	adds	r6, r6, r4
 8001684:	e6a0      	b.n	80013c8 <__aeabi_ddiv+0x20c>
 8001686:	1909      	adds	r1, r1, r4
 8001688:	3d01      	subs	r5, #1
 800168a:	428c      	cmp	r4, r1
 800168c:	d900      	bls.n	8001690 <__aeabi_ddiv+0x4d4>
 800168e:	e68d      	b.n	80013ac <__aeabi_ddiv+0x1f0>
 8001690:	428a      	cmp	r2, r1
 8001692:	d800      	bhi.n	8001696 <__aeabi_ddiv+0x4da>
 8001694:	e68a      	b.n	80013ac <__aeabi_ddiv+0x1f0>
 8001696:	1e85      	subs	r5, r0, #2
 8001698:	1909      	adds	r1, r1, r4
 800169a:	e687      	b.n	80013ac <__aeabi_ddiv+0x1f0>
 800169c:	220f      	movs	r2, #15
 800169e:	402a      	ands	r2, r5
 80016a0:	2a04      	cmp	r2, #4
 80016a2:	d100      	bne.n	80016a6 <__aeabi_ddiv+0x4ea>
 80016a4:	e6bc      	b.n	8001420 <__aeabi_ddiv+0x264>
 80016a6:	1d29      	adds	r1, r5, #4
 80016a8:	42a9      	cmp	r1, r5
 80016aa:	41ad      	sbcs	r5, r5
 80016ac:	426d      	negs	r5, r5
 80016ae:	08c9      	lsrs	r1, r1, #3
 80016b0:	44a8      	add	r8, r5
 80016b2:	e6b6      	b.n	8001422 <__aeabi_ddiv+0x266>
 80016b4:	42af      	cmp	r7, r5
 80016b6:	d900      	bls.n	80016ba <__aeabi_ddiv+0x4fe>
 80016b8:	e662      	b.n	8001380 <__aeabi_ddiv+0x1c4>
 80016ba:	4281      	cmp	r1, r0
 80016bc:	d804      	bhi.n	80016c8 <__aeabi_ddiv+0x50c>
 80016be:	d000      	beq.n	80016c2 <__aeabi_ddiv+0x506>
 80016c0:	e65e      	b.n	8001380 <__aeabi_ddiv+0x1c4>
 80016c2:	42ae      	cmp	r6, r5
 80016c4:	d800      	bhi.n	80016c8 <__aeabi_ddiv+0x50c>
 80016c6:	e65b      	b.n	8001380 <__aeabi_ddiv+0x1c4>
 80016c8:	2302      	movs	r3, #2
 80016ca:	425b      	negs	r3, r3
 80016cc:	469c      	mov	ip, r3
 80016ce:	9b00      	ldr	r3, [sp, #0]
 80016d0:	44e0      	add	r8, ip
 80016d2:	469c      	mov	ip, r3
 80016d4:	4465      	add	r5, ip
 80016d6:	429d      	cmp	r5, r3
 80016d8:	419b      	sbcs	r3, r3
 80016da:	425b      	negs	r3, r3
 80016dc:	191b      	adds	r3, r3, r4
 80016de:	18c0      	adds	r0, r0, r3
 80016e0:	e64f      	b.n	8001382 <__aeabi_ddiv+0x1c6>
 80016e2:	42b2      	cmp	r2, r6
 80016e4:	d800      	bhi.n	80016e8 <__aeabi_ddiv+0x52c>
 80016e6:	e612      	b.n	800130e <__aeabi_ddiv+0x152>
 80016e8:	1e83      	subs	r3, r0, #2
 80016ea:	1936      	adds	r6, r6, r4
 80016ec:	e60f      	b.n	800130e <__aeabi_ddiv+0x152>
 80016ee:	428a      	cmp	r2, r1
 80016f0:	d800      	bhi.n	80016f4 <__aeabi_ddiv+0x538>
 80016f2:	e5fa      	b.n	80012ea <__aeabi_ddiv+0x12e>
 80016f4:	1e83      	subs	r3, r0, #2
 80016f6:	4698      	mov	r8, r3
 80016f8:	1909      	adds	r1, r1, r4
 80016fa:	e5f6      	b.n	80012ea <__aeabi_ddiv+0x12e>
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <__aeabi_ddiv+0x5d4>)
 80016fe:	0028      	movs	r0, r5
 8001700:	445b      	add	r3, fp
 8001702:	4641      	mov	r1, r8
 8001704:	409d      	lsls	r5, r3
 8001706:	4099      	lsls	r1, r3
 8001708:	40d0      	lsrs	r0, r2
 800170a:	1e6b      	subs	r3, r5, #1
 800170c:	419d      	sbcs	r5, r3
 800170e:	4643      	mov	r3, r8
 8001710:	4301      	orrs	r1, r0
 8001712:	4329      	orrs	r1, r5
 8001714:	40d3      	lsrs	r3, r2
 8001716:	074a      	lsls	r2, r1, #29
 8001718:	d100      	bne.n	800171c <__aeabi_ddiv+0x560>
 800171a:	e755      	b.n	80015c8 <__aeabi_ddiv+0x40c>
 800171c:	220f      	movs	r2, #15
 800171e:	400a      	ands	r2, r1
 8001720:	2a04      	cmp	r2, #4
 8001722:	d000      	beq.n	8001726 <__aeabi_ddiv+0x56a>
 8001724:	e74a      	b.n	80015bc <__aeabi_ddiv+0x400>
 8001726:	e74f      	b.n	80015c8 <__aeabi_ddiv+0x40c>
 8001728:	0015      	movs	r5, r2
 800172a:	4286      	cmp	r6, r0
 800172c:	d000      	beq.n	8001730 <__aeabi_ddiv+0x574>
 800172e:	e66d      	b.n	800140c <__aeabi_ddiv+0x250>
 8001730:	9a00      	ldr	r2, [sp, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d000      	beq.n	8001738 <__aeabi_ddiv+0x57c>
 8001736:	e669      	b.n	800140c <__aeabi_ddiv+0x250>
 8001738:	e66a      	b.n	8001410 <__aeabi_ddiv+0x254>
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <__aeabi_ddiv+0x5d8>)
 800173c:	445b      	add	r3, fp
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_ddiv+0x588>
 8001742:	e713      	b.n	800156c <__aeabi_ddiv+0x3b0>
 8001744:	2501      	movs	r5, #1
 8001746:	2100      	movs	r1, #0
 8001748:	44a8      	add	r8, r5
 800174a:	e66a      	b.n	8001422 <__aeabi_ddiv+0x266>
 800174c:	075d      	lsls	r5, r3, #29
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	0b1a      	lsrs	r2, r3, #12
 8001752:	08c9      	lsrs	r1, r1, #3
 8001754:	2300      	movs	r3, #0
 8001756:	430d      	orrs	r5, r1
 8001758:	e587      	b.n	800126a <__aeabi_ddiv+0xae>
 800175a:	9900      	ldr	r1, [sp, #0]
 800175c:	3d02      	subs	r5, #2
 800175e:	004a      	lsls	r2, r1, #1
 8001760:	428a      	cmp	r2, r1
 8001762:	41bf      	sbcs	r7, r7
 8001764:	427f      	negs	r7, r7
 8001766:	193f      	adds	r7, r7, r4
 8001768:	19f6      	adds	r6, r6, r7
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	e7dd      	b.n	800172a <__aeabi_ddiv+0x56e>
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	4643      	mov	r3, r8
 8001772:	0312      	lsls	r2, r2, #12
 8001774:	431a      	orrs	r2, r3
 8001776:	0312      	lsls	r2, r2, #12
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <__aeabi_ddiv+0x5cc>)
 800177a:	0b12      	lsrs	r2, r2, #12
 800177c:	e575      	b.n	800126a <__aeabi_ddiv+0xae>
 800177e:	9900      	ldr	r1, [sp, #0]
 8001780:	4299      	cmp	r1, r3
 8001782:	d3ea      	bcc.n	800175a <__aeabi_ddiv+0x59e>
 8001784:	0015      	movs	r5, r2
 8001786:	e7d3      	b.n	8001730 <__aeabi_ddiv+0x574>
 8001788:	000007ff 	.word	0x000007ff
 800178c:	0000043e 	.word	0x0000043e
 8001790:	0000041e 	.word	0x0000041e
 8001794:	000003ff 	.word	0x000003ff

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464e      	mov	r6, r9
 800179c:	4645      	mov	r5, r8
 800179e:	46de      	mov	lr, fp
 80017a0:	4657      	mov	r7, sl
 80017a2:	4690      	mov	r8, r2
 80017a4:	b5e0      	push	{r5, r6, r7, lr}
 80017a6:	0017      	movs	r7, r2
 80017a8:	031a      	lsls	r2, r3, #12
 80017aa:	0b12      	lsrs	r2, r2, #12
 80017ac:	0005      	movs	r5, r0
 80017ae:	4684      	mov	ip, r0
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <__eqdf2+0x80>)
 80017b2:	030e      	lsls	r6, r1, #12
 80017b4:	004c      	lsls	r4, r1, #1
 80017b6:	4691      	mov	r9, r2
 80017b8:	005a      	lsls	r2, r3, #1
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	469b      	mov	fp, r3
 80017be:	0b36      	lsrs	r6, r6, #12
 80017c0:	0d64      	lsrs	r4, r4, #21
 80017c2:	0fc9      	lsrs	r1, r1, #31
 80017c4:	0d52      	lsrs	r2, r2, #21
 80017c6:	4284      	cmp	r4, r0
 80017c8:	d019      	beq.n	80017fe <__eqdf2+0x66>
 80017ca:	4282      	cmp	r2, r0
 80017cc:	d010      	beq.n	80017f0 <__eqdf2+0x58>
 80017ce:	2001      	movs	r0, #1
 80017d0:	4294      	cmp	r4, r2
 80017d2:	d10e      	bne.n	80017f2 <__eqdf2+0x5a>
 80017d4:	454e      	cmp	r6, r9
 80017d6:	d10c      	bne.n	80017f2 <__eqdf2+0x5a>
 80017d8:	2001      	movs	r0, #1
 80017da:	45c4      	cmp	ip, r8
 80017dc:	d109      	bne.n	80017f2 <__eqdf2+0x5a>
 80017de:	4559      	cmp	r1, fp
 80017e0:	d017      	beq.n	8001812 <__eqdf2+0x7a>
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d105      	bne.n	80017f2 <__eqdf2+0x5a>
 80017e6:	0030      	movs	r0, r6
 80017e8:	4328      	orrs	r0, r5
 80017ea:	1e43      	subs	r3, r0, #1
 80017ec:	4198      	sbcs	r0, r3
 80017ee:	e000      	b.n	80017f2 <__eqdf2+0x5a>
 80017f0:	2001      	movs	r0, #1
 80017f2:	bcf0      	pop	{r4, r5, r6, r7}
 80017f4:	46bb      	mov	fp, r7
 80017f6:	46b2      	mov	sl, r6
 80017f8:	46a9      	mov	r9, r5
 80017fa:	46a0      	mov	r8, r4
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fe:	0033      	movs	r3, r6
 8001800:	2001      	movs	r0, #1
 8001802:	432b      	orrs	r3, r5
 8001804:	d1f5      	bne.n	80017f2 <__eqdf2+0x5a>
 8001806:	42a2      	cmp	r2, r4
 8001808:	d1f3      	bne.n	80017f2 <__eqdf2+0x5a>
 800180a:	464b      	mov	r3, r9
 800180c:	433b      	orrs	r3, r7
 800180e:	d1f0      	bne.n	80017f2 <__eqdf2+0x5a>
 8001810:	e7e2      	b.n	80017d8 <__eqdf2+0x40>
 8001812:	2000      	movs	r0, #0
 8001814:	e7ed      	b.n	80017f2 <__eqdf2+0x5a>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	000007ff 	.word	0x000007ff

0800181c <__gedf2>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	4647      	mov	r7, r8
 8001820:	46ce      	mov	lr, r9
 8001822:	0004      	movs	r4, r0
 8001824:	0018      	movs	r0, r3
 8001826:	0016      	movs	r6, r2
 8001828:	031b      	lsls	r3, r3, #12
 800182a:	0b1b      	lsrs	r3, r3, #12
 800182c:	4d2d      	ldr	r5, [pc, #180]	; (80018e4 <__gedf2+0xc8>)
 800182e:	004a      	lsls	r2, r1, #1
 8001830:	4699      	mov	r9, r3
 8001832:	b580      	push	{r7, lr}
 8001834:	0043      	lsls	r3, r0, #1
 8001836:	030f      	lsls	r7, r1, #12
 8001838:	46a4      	mov	ip, r4
 800183a:	46b0      	mov	r8, r6
 800183c:	0b3f      	lsrs	r7, r7, #12
 800183e:	0d52      	lsrs	r2, r2, #21
 8001840:	0fc9      	lsrs	r1, r1, #31
 8001842:	0d5b      	lsrs	r3, r3, #21
 8001844:	0fc0      	lsrs	r0, r0, #31
 8001846:	42aa      	cmp	r2, r5
 8001848:	d021      	beq.n	800188e <__gedf2+0x72>
 800184a:	42ab      	cmp	r3, r5
 800184c:	d013      	beq.n	8001876 <__gedf2+0x5a>
 800184e:	2a00      	cmp	r2, #0
 8001850:	d122      	bne.n	8001898 <__gedf2+0x7c>
 8001852:	433c      	orrs	r4, r7
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <__gedf2+0x42>
 8001858:	464d      	mov	r5, r9
 800185a:	432e      	orrs	r6, r5
 800185c:	d022      	beq.n	80018a4 <__gedf2+0x88>
 800185e:	2c00      	cmp	r4, #0
 8001860:	d010      	beq.n	8001884 <__gedf2+0x68>
 8001862:	4281      	cmp	r1, r0
 8001864:	d022      	beq.n	80018ac <__gedf2+0x90>
 8001866:	2002      	movs	r0, #2
 8001868:	3901      	subs	r1, #1
 800186a:	4008      	ands	r0, r1
 800186c:	3801      	subs	r0, #1
 800186e:	bcc0      	pop	{r6, r7}
 8001870:	46b9      	mov	r9, r7
 8001872:	46b0      	mov	r8, r6
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	464d      	mov	r5, r9
 8001878:	432e      	orrs	r6, r5
 800187a:	d129      	bne.n	80018d0 <__gedf2+0xb4>
 800187c:	2a00      	cmp	r2, #0
 800187e:	d1f0      	bne.n	8001862 <__gedf2+0x46>
 8001880:	433c      	orrs	r4, r7
 8001882:	d1ee      	bne.n	8001862 <__gedf2+0x46>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1f2      	bne.n	800186e <__gedf2+0x52>
 8001888:	2001      	movs	r0, #1
 800188a:	4240      	negs	r0, r0
 800188c:	e7ef      	b.n	800186e <__gedf2+0x52>
 800188e:	003d      	movs	r5, r7
 8001890:	4325      	orrs	r5, r4
 8001892:	d11d      	bne.n	80018d0 <__gedf2+0xb4>
 8001894:	4293      	cmp	r3, r2
 8001896:	d0ee      	beq.n	8001876 <__gedf2+0x5a>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e2      	bne.n	8001862 <__gedf2+0x46>
 800189c:	464c      	mov	r4, r9
 800189e:	4326      	orrs	r6, r4
 80018a0:	d1df      	bne.n	8001862 <__gedf2+0x46>
 80018a2:	e7e0      	b.n	8001866 <__gedf2+0x4a>
 80018a4:	2000      	movs	r0, #0
 80018a6:	2c00      	cmp	r4, #0
 80018a8:	d0e1      	beq.n	800186e <__gedf2+0x52>
 80018aa:	e7dc      	b.n	8001866 <__gedf2+0x4a>
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dc0a      	bgt.n	80018c6 <__gedf2+0xaa>
 80018b0:	dbe8      	blt.n	8001884 <__gedf2+0x68>
 80018b2:	454f      	cmp	r7, r9
 80018b4:	d8d7      	bhi.n	8001866 <__gedf2+0x4a>
 80018b6:	d00e      	beq.n	80018d6 <__gedf2+0xba>
 80018b8:	2000      	movs	r0, #0
 80018ba:	454f      	cmp	r7, r9
 80018bc:	d2d7      	bcs.n	800186e <__gedf2+0x52>
 80018be:	2900      	cmp	r1, #0
 80018c0:	d0e2      	beq.n	8001888 <__gedf2+0x6c>
 80018c2:	0008      	movs	r0, r1
 80018c4:	e7d3      	b.n	800186e <__gedf2+0x52>
 80018c6:	4243      	negs	r3, r0
 80018c8:	4158      	adcs	r0, r3
 80018ca:	0040      	lsls	r0, r0, #1
 80018cc:	3801      	subs	r0, #1
 80018ce:	e7ce      	b.n	800186e <__gedf2+0x52>
 80018d0:	2002      	movs	r0, #2
 80018d2:	4240      	negs	r0, r0
 80018d4:	e7cb      	b.n	800186e <__gedf2+0x52>
 80018d6:	45c4      	cmp	ip, r8
 80018d8:	d8c5      	bhi.n	8001866 <__gedf2+0x4a>
 80018da:	2000      	movs	r0, #0
 80018dc:	45c4      	cmp	ip, r8
 80018de:	d2c6      	bcs.n	800186e <__gedf2+0x52>
 80018e0:	e7ed      	b.n	80018be <__gedf2+0xa2>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff

080018e8 <__ledf2>:
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	4647      	mov	r7, r8
 80018ec:	46ce      	mov	lr, r9
 80018ee:	0004      	movs	r4, r0
 80018f0:	0018      	movs	r0, r3
 80018f2:	0016      	movs	r6, r2
 80018f4:	031b      	lsls	r3, r3, #12
 80018f6:	0b1b      	lsrs	r3, r3, #12
 80018f8:	4d2c      	ldr	r5, [pc, #176]	; (80019ac <__ledf2+0xc4>)
 80018fa:	004a      	lsls	r2, r1, #1
 80018fc:	4699      	mov	r9, r3
 80018fe:	b580      	push	{r7, lr}
 8001900:	0043      	lsls	r3, r0, #1
 8001902:	030f      	lsls	r7, r1, #12
 8001904:	46a4      	mov	ip, r4
 8001906:	46b0      	mov	r8, r6
 8001908:	0b3f      	lsrs	r7, r7, #12
 800190a:	0d52      	lsrs	r2, r2, #21
 800190c:	0fc9      	lsrs	r1, r1, #31
 800190e:	0d5b      	lsrs	r3, r3, #21
 8001910:	0fc0      	lsrs	r0, r0, #31
 8001912:	42aa      	cmp	r2, r5
 8001914:	d00d      	beq.n	8001932 <__ledf2+0x4a>
 8001916:	42ab      	cmp	r3, r5
 8001918:	d010      	beq.n	800193c <__ledf2+0x54>
 800191a:	2a00      	cmp	r2, #0
 800191c:	d127      	bne.n	800196e <__ledf2+0x86>
 800191e:	433c      	orrs	r4, r7
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <__ledf2+0x60>
 8001924:	464d      	mov	r5, r9
 8001926:	432e      	orrs	r6, r5
 8001928:	d10e      	bne.n	8001948 <__ledf2+0x60>
 800192a:	2000      	movs	r0, #0
 800192c:	2c00      	cmp	r4, #0
 800192e:	d015      	beq.n	800195c <__ledf2+0x74>
 8001930:	e00e      	b.n	8001950 <__ledf2+0x68>
 8001932:	003d      	movs	r5, r7
 8001934:	4325      	orrs	r5, r4
 8001936:	d110      	bne.n	800195a <__ledf2+0x72>
 8001938:	4293      	cmp	r3, r2
 800193a:	d118      	bne.n	800196e <__ledf2+0x86>
 800193c:	464d      	mov	r5, r9
 800193e:	432e      	orrs	r6, r5
 8001940:	d10b      	bne.n	800195a <__ledf2+0x72>
 8001942:	2a00      	cmp	r2, #0
 8001944:	d102      	bne.n	800194c <__ledf2+0x64>
 8001946:	433c      	orrs	r4, r7
 8001948:	2c00      	cmp	r4, #0
 800194a:	d00b      	beq.n	8001964 <__ledf2+0x7c>
 800194c:	4281      	cmp	r1, r0
 800194e:	d014      	beq.n	800197a <__ledf2+0x92>
 8001950:	2002      	movs	r0, #2
 8001952:	3901      	subs	r1, #1
 8001954:	4008      	ands	r0, r1
 8001956:	3801      	subs	r0, #1
 8001958:	e000      	b.n	800195c <__ledf2+0x74>
 800195a:	2002      	movs	r0, #2
 800195c:	bcc0      	pop	{r6, r7}
 800195e:	46b9      	mov	r9, r7
 8001960:	46b0      	mov	r8, r6
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001964:	2800      	cmp	r0, #0
 8001966:	d1f9      	bne.n	800195c <__ledf2+0x74>
 8001968:	2001      	movs	r0, #1
 800196a:	4240      	negs	r0, r0
 800196c:	e7f6      	b.n	800195c <__ledf2+0x74>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ec      	bne.n	800194c <__ledf2+0x64>
 8001972:	464c      	mov	r4, r9
 8001974:	4326      	orrs	r6, r4
 8001976:	d1e9      	bne.n	800194c <__ledf2+0x64>
 8001978:	e7ea      	b.n	8001950 <__ledf2+0x68>
 800197a:	429a      	cmp	r2, r3
 800197c:	dd04      	ble.n	8001988 <__ledf2+0xa0>
 800197e:	4243      	negs	r3, r0
 8001980:	4158      	adcs	r0, r3
 8001982:	0040      	lsls	r0, r0, #1
 8001984:	3801      	subs	r0, #1
 8001986:	e7e9      	b.n	800195c <__ledf2+0x74>
 8001988:	429a      	cmp	r2, r3
 800198a:	dbeb      	blt.n	8001964 <__ledf2+0x7c>
 800198c:	454f      	cmp	r7, r9
 800198e:	d8df      	bhi.n	8001950 <__ledf2+0x68>
 8001990:	d006      	beq.n	80019a0 <__ledf2+0xb8>
 8001992:	2000      	movs	r0, #0
 8001994:	454f      	cmp	r7, r9
 8001996:	d2e1      	bcs.n	800195c <__ledf2+0x74>
 8001998:	2900      	cmp	r1, #0
 800199a:	d0e5      	beq.n	8001968 <__ledf2+0x80>
 800199c:	0008      	movs	r0, r1
 800199e:	e7dd      	b.n	800195c <__ledf2+0x74>
 80019a0:	45c4      	cmp	ip, r8
 80019a2:	d8d5      	bhi.n	8001950 <__ledf2+0x68>
 80019a4:	2000      	movs	r0, #0
 80019a6:	45c4      	cmp	ip, r8
 80019a8:	d2d8      	bcs.n	800195c <__ledf2+0x74>
 80019aa:	e7f5      	b.n	8001998 <__ledf2+0xb0>
 80019ac:	000007ff 	.word	0x000007ff

080019b0 <__aeabi_dmul>:
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	4645      	mov	r5, r8
 80019b4:	46de      	mov	lr, fp
 80019b6:	4657      	mov	r7, sl
 80019b8:	464e      	mov	r6, r9
 80019ba:	b5e0      	push	{r5, r6, r7, lr}
 80019bc:	001f      	movs	r7, r3
 80019be:	030b      	lsls	r3, r1, #12
 80019c0:	0b1b      	lsrs	r3, r3, #12
 80019c2:	469b      	mov	fp, r3
 80019c4:	004d      	lsls	r5, r1, #1
 80019c6:	0fcb      	lsrs	r3, r1, #31
 80019c8:	0004      	movs	r4, r0
 80019ca:	4691      	mov	r9, r2
 80019cc:	4698      	mov	r8, r3
 80019ce:	b087      	sub	sp, #28
 80019d0:	0d6d      	lsrs	r5, r5, #21
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dmul+0x26>
 80019d4:	e1cd      	b.n	8001d72 <__aeabi_dmul+0x3c2>
 80019d6:	4bce      	ldr	r3, [pc, #824]	; (8001d10 <__aeabi_dmul+0x360>)
 80019d8:	429d      	cmp	r5, r3
 80019da:	d100      	bne.n	80019de <__aeabi_dmul+0x2e>
 80019dc:	e1e9      	b.n	8001db2 <__aeabi_dmul+0x402>
 80019de:	465a      	mov	r2, fp
 80019e0:	0f43      	lsrs	r3, r0, #29
 80019e2:	00d2      	lsls	r2, r2, #3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	0412      	lsls	r2, r2, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	00c3      	lsls	r3, r0, #3
 80019ee:	469a      	mov	sl, r3
 80019f0:	4bc8      	ldr	r3, [pc, #800]	; (8001d14 <__aeabi_dmul+0x364>)
 80019f2:	4693      	mov	fp, r2
 80019f4:	469c      	mov	ip, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	2600      	movs	r6, #0
 80019fa:	4465      	add	r5, ip
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	033c      	lsls	r4, r7, #12
 8001a00:	007b      	lsls	r3, r7, #1
 8001a02:	4648      	mov	r0, r9
 8001a04:	0b24      	lsrs	r4, r4, #12
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	0fff      	lsrs	r7, r7, #31
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dmul+0x60>
 8001a0e:	e189      	b.n	8001d24 <__aeabi_dmul+0x374>
 8001a10:	4abf      	ldr	r2, [pc, #764]	; (8001d10 <__aeabi_dmul+0x360>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <__aeabi_dmul+0x9a>
 8001a16:	0f42      	lsrs	r2, r0, #29
 8001a18:	00e4      	lsls	r4, r4, #3
 8001a1a:	4322      	orrs	r2, r4
 8001a1c:	2480      	movs	r4, #128	; 0x80
 8001a1e:	0424      	lsls	r4, r4, #16
 8001a20:	4314      	orrs	r4, r2
 8001a22:	4abc      	ldr	r2, [pc, #752]	; (8001d14 <__aeabi_dmul+0x364>)
 8001a24:	2100      	movs	r1, #0
 8001a26:	4694      	mov	ip, r2
 8001a28:	4642      	mov	r2, r8
 8001a2a:	4463      	add	r3, ip
 8001a2c:	195b      	adds	r3, r3, r5
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	9b01      	ldr	r3, [sp, #4]
 8001a32:	407a      	eors	r2, r7
 8001a34:	3301      	adds	r3, #1
 8001a36:	00c0      	lsls	r0, r0, #3
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2e0a      	cmp	r6, #10
 8001a3e:	dd1c      	ble.n	8001a7a <__aeabi_dmul+0xca>
 8001a40:	003a      	movs	r2, r7
 8001a42:	2e0b      	cmp	r6, #11
 8001a44:	d05e      	beq.n	8001b04 <__aeabi_dmul+0x154>
 8001a46:	4647      	mov	r7, r8
 8001a48:	e056      	b.n	8001af8 <__aeabi_dmul+0x148>
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	4bb0      	ldr	r3, [pc, #704]	; (8001d10 <__aeabi_dmul+0x360>)
 8001a4e:	4321      	orrs	r1, r4
 8001a50:	18eb      	adds	r3, r5, r3
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2900      	cmp	r1, #0
 8001a56:	d12a      	bne.n	8001aae <__aeabi_dmul+0xfe>
 8001a58:	2080      	movs	r0, #128	; 0x80
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	0100      	lsls	r0, r0, #4
 8001a5e:	002b      	movs	r3, r5
 8001a60:	4684      	mov	ip, r0
 8001a62:	4316      	orrs	r6, r2
 8001a64:	4642      	mov	r2, r8
 8001a66:	4463      	add	r3, ip
 8001a68:	407a      	eors	r2, r7
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2e0a      	cmp	r6, #10
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dmul+0xc4>
 8001a72:	e231      	b.n	8001ed8 <__aeabi_dmul+0x528>
 8001a74:	2000      	movs	r0, #0
 8001a76:	2400      	movs	r4, #0
 8001a78:	2102      	movs	r1, #2
 8001a7a:	2e02      	cmp	r6, #2
 8001a7c:	dc26      	bgt.n	8001acc <__aeabi_dmul+0x11c>
 8001a7e:	3e01      	subs	r6, #1
 8001a80:	2e01      	cmp	r6, #1
 8001a82:	d852      	bhi.n	8001b2a <__aeabi_dmul+0x17a>
 8001a84:	2902      	cmp	r1, #2
 8001a86:	d04c      	beq.n	8001b22 <__aeabi_dmul+0x172>
 8001a88:	2901      	cmp	r1, #1
 8001a8a:	d000      	beq.n	8001a8e <__aeabi_dmul+0xde>
 8001a8c:	e118      	b.n	8001cc0 <__aeabi_dmul+0x310>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2400      	movs	r4, #0
 8001a92:	2500      	movs	r5, #0
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07d2      	lsls	r2, r2, #31
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	0028      	movs	r0, r5
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	0109      	lsls	r1, r1, #4
 8001ab4:	002b      	movs	r3, r5
 8001ab6:	468c      	mov	ip, r1
 8001ab8:	4316      	orrs	r6, r2
 8001aba:	4642      	mov	r2, r8
 8001abc:	4463      	add	r3, ip
 8001abe:	407a      	eors	r2, r7
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	2e0a      	cmp	r6, #10
 8001ac6:	dd00      	ble.n	8001aca <__aeabi_dmul+0x11a>
 8001ac8:	e228      	b.n	8001f1c <__aeabi_dmul+0x56c>
 8001aca:	2103      	movs	r1, #3
 8001acc:	2501      	movs	r5, #1
 8001ace:	40b5      	lsls	r5, r6
 8001ad0:	46ac      	mov	ip, r5
 8001ad2:	26a6      	movs	r6, #166	; 0xa6
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	00f6      	lsls	r6, r6, #3
 8001ad8:	4035      	ands	r5, r6
 8001ada:	4233      	tst	r3, r6
 8001adc:	d10b      	bne.n	8001af6 <__aeabi_dmul+0x146>
 8001ade:	2690      	movs	r6, #144	; 0x90
 8001ae0:	00b6      	lsls	r6, r6, #2
 8001ae2:	4233      	tst	r3, r6
 8001ae4:	d118      	bne.n	8001b18 <__aeabi_dmul+0x168>
 8001ae6:	3eb9      	subs	r6, #185	; 0xb9
 8001ae8:	3eff      	subs	r6, #255	; 0xff
 8001aea:	421e      	tst	r6, r3
 8001aec:	d01d      	beq.n	8001b2a <__aeabi_dmul+0x17a>
 8001aee:	46a3      	mov	fp, r4
 8001af0:	4682      	mov	sl, r0
 8001af2:	9100      	str	r1, [sp, #0]
 8001af4:	e000      	b.n	8001af8 <__aeabi_dmul+0x148>
 8001af6:	0017      	movs	r7, r2
 8001af8:	9900      	ldr	r1, [sp, #0]
 8001afa:	003a      	movs	r2, r7
 8001afc:	2902      	cmp	r1, #2
 8001afe:	d010      	beq.n	8001b22 <__aeabi_dmul+0x172>
 8001b00:	465c      	mov	r4, fp
 8001b02:	4650      	mov	r0, sl
 8001b04:	2903      	cmp	r1, #3
 8001b06:	d1bf      	bne.n	8001a88 <__aeabi_dmul+0xd8>
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	031b      	lsls	r3, r3, #12
 8001b0c:	431c      	orrs	r4, r3
 8001b0e:	0324      	lsls	r4, r4, #12
 8001b10:	0005      	movs	r5, r0
 8001b12:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <__aeabi_dmul+0x360>)
 8001b14:	0b24      	lsrs	r4, r4, #12
 8001b16:	e7bd      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001b18:	2480      	movs	r4, #128	; 0x80
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <__aeabi_dmul+0x360>)
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	e7b8      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001b22:	2400      	movs	r4, #0
 8001b24:	2500      	movs	r5, #0
 8001b26:	4b7a      	ldr	r3, [pc, #488]	; (8001d10 <__aeabi_dmul+0x360>)
 8001b28:	e7b4      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001b2a:	4653      	mov	r3, sl
 8001b2c:	041e      	lsls	r6, r3, #16
 8001b2e:	0c36      	lsrs	r6, r6, #16
 8001b30:	0c1f      	lsrs	r7, r3, #16
 8001b32:	0033      	movs	r3, r6
 8001b34:	0c01      	lsrs	r1, r0, #16
 8001b36:	0400      	lsls	r0, r0, #16
 8001b38:	0c00      	lsrs	r0, r0, #16
 8001b3a:	4343      	muls	r3, r0
 8001b3c:	4698      	mov	r8, r3
 8001b3e:	0003      	movs	r3, r0
 8001b40:	437b      	muls	r3, r7
 8001b42:	4699      	mov	r9, r3
 8001b44:	0033      	movs	r3, r6
 8001b46:	434b      	muls	r3, r1
 8001b48:	469c      	mov	ip, r3
 8001b4a:	4643      	mov	r3, r8
 8001b4c:	000d      	movs	r5, r1
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	469a      	mov	sl, r3
 8001b52:	437d      	muls	r5, r7
 8001b54:	44cc      	add	ip, r9
 8001b56:	44d4      	add	ip, sl
 8001b58:	9500      	str	r5, [sp, #0]
 8001b5a:	45e1      	cmp	r9, ip
 8001b5c:	d904      	bls.n	8001b68 <__aeabi_dmul+0x1b8>
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	4699      	mov	r9, r3
 8001b64:	444d      	add	r5, r9
 8001b66:	9500      	str	r5, [sp, #0]
 8001b68:	4663      	mov	r3, ip
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	001d      	movs	r5, r3
 8001b6e:	4663      	mov	r3, ip
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	469c      	mov	ip, r3
 8001b74:	4643      	mov	r3, r8
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	4663      	mov	r3, ip
 8001b7e:	4443      	add	r3, r8
 8001b80:	9303      	str	r3, [sp, #12]
 8001b82:	0c23      	lsrs	r3, r4, #16
 8001b84:	4698      	mov	r8, r3
 8001b86:	0033      	movs	r3, r6
 8001b88:	0424      	lsls	r4, r4, #16
 8001b8a:	0c24      	lsrs	r4, r4, #16
 8001b8c:	4363      	muls	r3, r4
 8001b8e:	469c      	mov	ip, r3
 8001b90:	0023      	movs	r3, r4
 8001b92:	437b      	muls	r3, r7
 8001b94:	4699      	mov	r9, r3
 8001b96:	4643      	mov	r3, r8
 8001b98:	435e      	muls	r6, r3
 8001b9a:	435f      	muls	r7, r3
 8001b9c:	444e      	add	r6, r9
 8001b9e:	4663      	mov	r3, ip
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	0c1e      	lsrs	r6, r3, #16
 8001ba4:	4456      	add	r6, sl
 8001ba6:	45b1      	cmp	r9, r6
 8001ba8:	d903      	bls.n	8001bb2 <__aeabi_dmul+0x202>
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	025b      	lsls	r3, r3, #9
 8001bae:	4699      	mov	r9, r3
 8001bb0:	444f      	add	r7, r9
 8001bb2:	0c33      	lsrs	r3, r6, #16
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	003b      	movs	r3, r7
 8001bb8:	444b      	add	r3, r9
 8001bba:	9305      	str	r3, [sp, #20]
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	46ac      	mov	ip, r5
 8001bc0:	041f      	lsls	r7, r3, #16
 8001bc2:	0c3f      	lsrs	r7, r7, #16
 8001bc4:	0436      	lsls	r6, r6, #16
 8001bc6:	19f6      	adds	r6, r6, r7
 8001bc8:	44b4      	add	ip, r6
 8001bca:	4663      	mov	r3, ip
 8001bcc:	9304      	str	r3, [sp, #16]
 8001bce:	465b      	mov	r3, fp
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	469c      	mov	ip, r3
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	041f      	lsls	r7, r3, #16
 8001bd8:	0c3f      	lsrs	r7, r7, #16
 8001bda:	003b      	movs	r3, r7
 8001bdc:	4343      	muls	r3, r0
 8001bde:	4699      	mov	r9, r3
 8001be0:	4663      	mov	r3, ip
 8001be2:	4343      	muls	r3, r0
 8001be4:	469a      	mov	sl, r3
 8001be6:	464b      	mov	r3, r9
 8001be8:	4660      	mov	r0, ip
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	469b      	mov	fp, r3
 8001bee:	4348      	muls	r0, r1
 8001bf0:	4379      	muls	r1, r7
 8001bf2:	4451      	add	r1, sl
 8001bf4:	4459      	add	r1, fp
 8001bf6:	458a      	cmp	sl, r1
 8001bf8:	d903      	bls.n	8001c02 <__aeabi_dmul+0x252>
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	025b      	lsls	r3, r3, #9
 8001bfe:	469a      	mov	sl, r3
 8001c00:	4450      	add	r0, sl
 8001c02:	0c0b      	lsrs	r3, r1, #16
 8001c04:	469a      	mov	sl, r3
 8001c06:	464b      	mov	r3, r9
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	003b      	movs	r3, r7
 8001c10:	4363      	muls	r3, r4
 8001c12:	0409      	lsls	r1, r1, #16
 8001c14:	4645      	mov	r5, r8
 8001c16:	4449      	add	r1, r9
 8001c18:	4699      	mov	r9, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	435c      	muls	r4, r3
 8001c1e:	436b      	muls	r3, r5
 8001c20:	469c      	mov	ip, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	4698      	mov	r8, r3
 8001c28:	436f      	muls	r7, r5
 8001c2a:	193f      	adds	r7, r7, r4
 8001c2c:	4447      	add	r7, r8
 8001c2e:	4450      	add	r0, sl
 8001c30:	42bc      	cmp	r4, r7
 8001c32:	d903      	bls.n	8001c3c <__aeabi_dmul+0x28c>
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	4698      	mov	r8, r3
 8001c3a:	44c4      	add	ip, r8
 8001c3c:	9b04      	ldr	r3, [sp, #16]
 8001c3e:	9d00      	ldr	r5, [sp, #0]
 8001c40:	4698      	mov	r8, r3
 8001c42:	4445      	add	r5, r8
 8001c44:	42b5      	cmp	r5, r6
 8001c46:	41b6      	sbcs	r6, r6
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	464b      	mov	r3, r9
 8001c4e:	041e      	lsls	r6, r3, #16
 8001c50:	9b05      	ldr	r3, [sp, #20]
 8001c52:	043c      	lsls	r4, r7, #16
 8001c54:	4699      	mov	r9, r3
 8001c56:	0c36      	lsrs	r6, r6, #16
 8001c58:	19a4      	adds	r4, r4, r6
 8001c5a:	444c      	add	r4, r9
 8001c5c:	46a1      	mov	r9, r4
 8001c5e:	4683      	mov	fp, r0
 8001c60:	186e      	adds	r6, r5, r1
 8001c62:	44c1      	add	r9, r8
 8001c64:	428e      	cmp	r6, r1
 8001c66:	4189      	sbcs	r1, r1
 8001c68:	44cb      	add	fp, r9
 8001c6a:	465d      	mov	r5, fp
 8001c6c:	4249      	negs	r1, r1
 8001c6e:	186d      	adds	r5, r5, r1
 8001c70:	429c      	cmp	r4, r3
 8001c72:	41a4      	sbcs	r4, r4
 8001c74:	45c1      	cmp	r9, r8
 8001c76:	419b      	sbcs	r3, r3
 8001c78:	4583      	cmp	fp, r0
 8001c7a:	4180      	sbcs	r0, r0
 8001c7c:	428d      	cmp	r5, r1
 8001c7e:	4189      	sbcs	r1, r1
 8001c80:	425b      	negs	r3, r3
 8001c82:	4264      	negs	r4, r4
 8001c84:	431c      	orrs	r4, r3
 8001c86:	4240      	negs	r0, r0
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	4249      	negs	r1, r1
 8001c8c:	4301      	orrs	r1, r0
 8001c8e:	0270      	lsls	r0, r6, #9
 8001c90:	0c3f      	lsrs	r7, r7, #16
 8001c92:	4318      	orrs	r0, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	1e47      	subs	r7, r0, #1
 8001c98:	41b8      	sbcs	r0, r7
 8001c9a:	1864      	adds	r4, r4, r1
 8001c9c:	4464      	add	r4, ip
 8001c9e:	0df6      	lsrs	r6, r6, #23
 8001ca0:	0261      	lsls	r1, r4, #9
 8001ca2:	4330      	orrs	r0, r6
 8001ca4:	0dec      	lsrs	r4, r5, #23
 8001ca6:	026e      	lsls	r6, r5, #9
 8001ca8:	430c      	orrs	r4, r1
 8001caa:	4330      	orrs	r0, r6
 8001cac:	01c9      	lsls	r1, r1, #7
 8001cae:	d400      	bmi.n	8001cb2 <__aeabi_dmul+0x302>
 8001cb0:	e0f1      	b.n	8001e96 <__aeabi_dmul+0x4e6>
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	0843      	lsrs	r3, r0, #1
 8001cb6:	4001      	ands	r1, r0
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	07e0      	lsls	r0, r4, #31
 8001cbc:	4318      	orrs	r0, r3
 8001cbe:	0864      	lsrs	r4, r4, #1
 8001cc0:	4915      	ldr	r1, [pc, #84]	; (8001d18 <__aeabi_dmul+0x368>)
 8001cc2:	9b02      	ldr	r3, [sp, #8]
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	4463      	add	r3, ip
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dmul+0x31e>
 8001ccc:	e097      	b.n	8001dfe <__aeabi_dmul+0x44e>
 8001cce:	0741      	lsls	r1, r0, #29
 8001cd0:	d009      	beq.n	8001ce6 <__aeabi_dmul+0x336>
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	4001      	ands	r1, r0
 8001cd6:	2904      	cmp	r1, #4
 8001cd8:	d005      	beq.n	8001ce6 <__aeabi_dmul+0x336>
 8001cda:	1d01      	adds	r1, r0, #4
 8001cdc:	4281      	cmp	r1, r0
 8001cde:	4180      	sbcs	r0, r0
 8001ce0:	4240      	negs	r0, r0
 8001ce2:	1824      	adds	r4, r4, r0
 8001ce4:	0008      	movs	r0, r1
 8001ce6:	01e1      	lsls	r1, r4, #7
 8001ce8:	d506      	bpl.n	8001cf8 <__aeabi_dmul+0x348>
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	00c9      	lsls	r1, r1, #3
 8001cee:	468c      	mov	ip, r1
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <__aeabi_dmul+0x36c>)
 8001cf2:	401c      	ands	r4, r3
 8001cf4:	9b02      	ldr	r3, [sp, #8]
 8001cf6:	4463      	add	r3, ip
 8001cf8:	4909      	ldr	r1, [pc, #36]	; (8001d20 <__aeabi_dmul+0x370>)
 8001cfa:	428b      	cmp	r3, r1
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dmul+0x350>
 8001cfe:	e710      	b.n	8001b22 <__aeabi_dmul+0x172>
 8001d00:	0761      	lsls	r1, r4, #29
 8001d02:	08c5      	lsrs	r5, r0, #3
 8001d04:	0264      	lsls	r4, r4, #9
 8001d06:	055b      	lsls	r3, r3, #21
 8001d08:	430d      	orrs	r5, r1
 8001d0a:	0b24      	lsrs	r4, r4, #12
 8001d0c:	0d5b      	lsrs	r3, r3, #21
 8001d0e:	e6c1      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001d10:	000007ff 	.word	0x000007ff
 8001d14:	fffffc01 	.word	0xfffffc01
 8001d18:	000003ff 	.word	0x000003ff
 8001d1c:	feffffff 	.word	0xfeffffff
 8001d20:	000007fe 	.word	0x000007fe
 8001d24:	464b      	mov	r3, r9
 8001d26:	4323      	orrs	r3, r4
 8001d28:	d059      	beq.n	8001dde <__aeabi_dmul+0x42e>
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dmul+0x380>
 8001d2e:	e0a3      	b.n	8001e78 <__aeabi_dmul+0x4c8>
 8001d30:	0020      	movs	r0, r4
 8001d32:	f000 fd2b 	bl	800278c <__clzsi2>
 8001d36:	0001      	movs	r1, r0
 8001d38:	0003      	movs	r3, r0
 8001d3a:	390b      	subs	r1, #11
 8001d3c:	221d      	movs	r2, #29
 8001d3e:	1a52      	subs	r2, r2, r1
 8001d40:	4649      	mov	r1, r9
 8001d42:	0018      	movs	r0, r3
 8001d44:	40d1      	lsrs	r1, r2
 8001d46:	464a      	mov	r2, r9
 8001d48:	3808      	subs	r0, #8
 8001d4a:	4082      	lsls	r2, r0
 8001d4c:	4084      	lsls	r4, r0
 8001d4e:	0010      	movs	r0, r2
 8001d50:	430c      	orrs	r4, r1
 8001d52:	4a74      	ldr	r2, [pc, #464]	; (8001f24 <__aeabi_dmul+0x574>)
 8001d54:	1aeb      	subs	r3, r5, r3
 8001d56:	4694      	mov	ip, r2
 8001d58:	4642      	mov	r2, r8
 8001d5a:	4463      	add	r3, ip
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	9b01      	ldr	r3, [sp, #4]
 8001d60:	407a      	eors	r2, r7
 8001d62:	3301      	adds	r3, #1
 8001d64:	2100      	movs	r1, #0
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2e0a      	cmp	r6, #10
 8001d6c:	dd00      	ble.n	8001d70 <__aeabi_dmul+0x3c0>
 8001d6e:	e667      	b.n	8001a40 <__aeabi_dmul+0x90>
 8001d70:	e683      	b.n	8001a7a <__aeabi_dmul+0xca>
 8001d72:	465b      	mov	r3, fp
 8001d74:	4303      	orrs	r3, r0
 8001d76:	469a      	mov	sl, r3
 8001d78:	d02a      	beq.n	8001dd0 <__aeabi_dmul+0x420>
 8001d7a:	465b      	mov	r3, fp
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d06d      	beq.n	8001e5c <__aeabi_dmul+0x4ac>
 8001d80:	4658      	mov	r0, fp
 8001d82:	f000 fd03 	bl	800278c <__clzsi2>
 8001d86:	0001      	movs	r1, r0
 8001d88:	0003      	movs	r3, r0
 8001d8a:	390b      	subs	r1, #11
 8001d8c:	221d      	movs	r2, #29
 8001d8e:	1a52      	subs	r2, r2, r1
 8001d90:	0021      	movs	r1, r4
 8001d92:	0018      	movs	r0, r3
 8001d94:	465d      	mov	r5, fp
 8001d96:	40d1      	lsrs	r1, r2
 8001d98:	3808      	subs	r0, #8
 8001d9a:	4085      	lsls	r5, r0
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	4084      	lsls	r4, r0
 8001da0:	432a      	orrs	r2, r5
 8001da2:	4693      	mov	fp, r2
 8001da4:	46a2      	mov	sl, r4
 8001da6:	4d5f      	ldr	r5, [pc, #380]	; (8001f24 <__aeabi_dmul+0x574>)
 8001da8:	2600      	movs	r6, #0
 8001daa:	1aed      	subs	r5, r5, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	e625      	b.n	80019fe <__aeabi_dmul+0x4e>
 8001db2:	465b      	mov	r3, fp
 8001db4:	4303      	orrs	r3, r0
 8001db6:	469a      	mov	sl, r3
 8001db8:	d105      	bne.n	8001dc6 <__aeabi_dmul+0x416>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	469b      	mov	fp, r3
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	2608      	movs	r6, #8
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	e61b      	b.n	80019fe <__aeabi_dmul+0x4e>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	4682      	mov	sl, r0
 8001dca:	260c      	movs	r6, #12
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	e616      	b.n	80019fe <__aeabi_dmul+0x4e>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	469b      	mov	fp, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	2604      	movs	r6, #4
 8001dd8:	2500      	movs	r5, #0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	e60f      	b.n	80019fe <__aeabi_dmul+0x4e>
 8001dde:	4642      	mov	r2, r8
 8001de0:	3301      	adds	r3, #1
 8001de2:	9501      	str	r5, [sp, #4]
 8001de4:	431e      	orrs	r6, r3
 8001de6:	9b01      	ldr	r3, [sp, #4]
 8001de8:	407a      	eors	r2, r7
 8001dea:	3301      	adds	r3, #1
 8001dec:	2400      	movs	r4, #0
 8001dee:	2000      	movs	r0, #0
 8001df0:	2101      	movs	r1, #1
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	9302      	str	r3, [sp, #8]
 8001df6:	2e0a      	cmp	r6, #10
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dmul+0x44c>
 8001dfa:	e621      	b.n	8001a40 <__aeabi_dmul+0x90>
 8001dfc:	e63d      	b.n	8001a7a <__aeabi_dmul+0xca>
 8001dfe:	2101      	movs	r1, #1
 8001e00:	1ac9      	subs	r1, r1, r3
 8001e02:	2938      	cmp	r1, #56	; 0x38
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_dmul+0x458>
 8001e06:	e642      	b.n	8001a8e <__aeabi_dmul+0xde>
 8001e08:	291f      	cmp	r1, #31
 8001e0a:	dd47      	ble.n	8001e9c <__aeabi_dmul+0x4ec>
 8001e0c:	261f      	movs	r6, #31
 8001e0e:	0025      	movs	r5, r4
 8001e10:	4276      	negs	r6, r6
 8001e12:	1af3      	subs	r3, r6, r3
 8001e14:	40dd      	lsrs	r5, r3
 8001e16:	002b      	movs	r3, r5
 8001e18:	2920      	cmp	r1, #32
 8001e1a:	d005      	beq.n	8001e28 <__aeabi_dmul+0x478>
 8001e1c:	4942      	ldr	r1, [pc, #264]	; (8001f28 <__aeabi_dmul+0x578>)
 8001e1e:	9d02      	ldr	r5, [sp, #8]
 8001e20:	468c      	mov	ip, r1
 8001e22:	4465      	add	r5, ip
 8001e24:	40ac      	lsls	r4, r5
 8001e26:	4320      	orrs	r0, r4
 8001e28:	1e41      	subs	r1, r0, #1
 8001e2a:	4188      	sbcs	r0, r1
 8001e2c:	4318      	orrs	r0, r3
 8001e2e:	2307      	movs	r3, #7
 8001e30:	001d      	movs	r5, r3
 8001e32:	2400      	movs	r4, #0
 8001e34:	4005      	ands	r5, r0
 8001e36:	4203      	tst	r3, r0
 8001e38:	d04a      	beq.n	8001ed0 <__aeabi_dmul+0x520>
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	4003      	ands	r3, r0
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d042      	beq.n	8001eca <__aeabi_dmul+0x51a>
 8001e44:	1d03      	adds	r3, r0, #4
 8001e46:	4283      	cmp	r3, r0
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	4240      	negs	r0, r0
 8001e4c:	1824      	adds	r4, r4, r0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	0223      	lsls	r3, r4, #8
 8001e52:	d53a      	bpl.n	8001eca <__aeabi_dmul+0x51a>
 8001e54:	2301      	movs	r3, #1
 8001e56:	2400      	movs	r4, #0
 8001e58:	2500      	movs	r5, #0
 8001e5a:	e61b      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001e5c:	f000 fc96 	bl	800278c <__clzsi2>
 8001e60:	0001      	movs	r1, r0
 8001e62:	0003      	movs	r3, r0
 8001e64:	3115      	adds	r1, #21
 8001e66:	3320      	adds	r3, #32
 8001e68:	291c      	cmp	r1, #28
 8001e6a:	dd8f      	ble.n	8001d8c <__aeabi_dmul+0x3dc>
 8001e6c:	3808      	subs	r0, #8
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4084      	lsls	r4, r0
 8001e72:	4692      	mov	sl, r2
 8001e74:	46a3      	mov	fp, r4
 8001e76:	e796      	b.n	8001da6 <__aeabi_dmul+0x3f6>
 8001e78:	f000 fc88 	bl	800278c <__clzsi2>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	0003      	movs	r3, r0
 8001e80:	3115      	adds	r1, #21
 8001e82:	3320      	adds	r3, #32
 8001e84:	291c      	cmp	r1, #28
 8001e86:	dc00      	bgt.n	8001e8a <__aeabi_dmul+0x4da>
 8001e88:	e758      	b.n	8001d3c <__aeabi_dmul+0x38c>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	464c      	mov	r4, r9
 8001e8e:	3a08      	subs	r2, #8
 8001e90:	2000      	movs	r0, #0
 8001e92:	4094      	lsls	r4, r2
 8001e94:	e75d      	b.n	8001d52 <__aeabi_dmul+0x3a2>
 8001e96:	9b01      	ldr	r3, [sp, #4]
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	e711      	b.n	8001cc0 <__aeabi_dmul+0x310>
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <__aeabi_dmul+0x57c>)
 8001e9e:	0026      	movs	r6, r4
 8001ea0:	469c      	mov	ip, r3
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	9d02      	ldr	r5, [sp, #8]
 8001ea6:	40cb      	lsrs	r3, r1
 8001ea8:	4465      	add	r5, ip
 8001eaa:	40ae      	lsls	r6, r5
 8001eac:	431e      	orrs	r6, r3
 8001eae:	0003      	movs	r3, r0
 8001eb0:	40ab      	lsls	r3, r5
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	4183      	sbcs	r3, r0
 8001eb6:	0030      	movs	r0, r6
 8001eb8:	4318      	orrs	r0, r3
 8001eba:	40cc      	lsrs	r4, r1
 8001ebc:	0743      	lsls	r3, r0, #29
 8001ebe:	d0c7      	beq.n	8001e50 <__aeabi_dmul+0x4a0>
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	4003      	ands	r3, r0
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d1bd      	bne.n	8001e44 <__aeabi_dmul+0x494>
 8001ec8:	e7c2      	b.n	8001e50 <__aeabi_dmul+0x4a0>
 8001eca:	0765      	lsls	r5, r4, #29
 8001ecc:	0264      	lsls	r4, r4, #9
 8001ece:	0b24      	lsrs	r4, r4, #12
 8001ed0:	08c0      	lsrs	r0, r0, #3
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4305      	orrs	r5, r0
 8001ed6:	e5dd      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001ed8:	2500      	movs	r5, #0
 8001eda:	2302      	movs	r3, #2
 8001edc:	2e0f      	cmp	r6, #15
 8001ede:	d10c      	bne.n	8001efa <__aeabi_dmul+0x54a>
 8001ee0:	2480      	movs	r4, #128	; 0x80
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	4223      	tst	r3, r4
 8001ee8:	d00e      	beq.n	8001f08 <__aeabi_dmul+0x558>
 8001eea:	4221      	tst	r1, r4
 8001eec:	d10c      	bne.n	8001f08 <__aeabi_dmul+0x558>
 8001eee:	430c      	orrs	r4, r1
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	003a      	movs	r2, r7
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <__aeabi_dmul+0x580>)
 8001ef6:	0b24      	lsrs	r4, r4, #12
 8001ef8:	e5cc      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001efa:	2e0b      	cmp	r6, #11
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dmul+0x550>
 8001efe:	e5a2      	b.n	8001a46 <__aeabi_dmul+0x96>
 8001f00:	468b      	mov	fp, r1
 8001f02:	46aa      	mov	sl, r5
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	e5f7      	b.n	8001af8 <__aeabi_dmul+0x148>
 8001f08:	2480      	movs	r4, #128	; 0x80
 8001f0a:	465b      	mov	r3, fp
 8001f0c:	0324      	lsls	r4, r4, #12
 8001f0e:	431c      	orrs	r4, r3
 8001f10:	0324      	lsls	r4, r4, #12
 8001f12:	4642      	mov	r2, r8
 8001f14:	4655      	mov	r5, sl
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <__aeabi_dmul+0x580>)
 8001f18:	0b24      	lsrs	r4, r4, #12
 8001f1a:	e5bb      	b.n	8001a94 <__aeabi_dmul+0xe4>
 8001f1c:	464d      	mov	r5, r9
 8001f1e:	0021      	movs	r1, r4
 8001f20:	2303      	movs	r3, #3
 8001f22:	e7db      	b.n	8001edc <__aeabi_dmul+0x52c>
 8001f24:	fffffc0d 	.word	0xfffffc0d
 8001f28:	0000043e 	.word	0x0000043e
 8001f2c:	0000041e 	.word	0x0000041e
 8001f30:	000007ff 	.word	0x000007ff

08001f34 <__aeabi_dsub>:
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	4657      	mov	r7, sl
 8001f38:	464e      	mov	r6, r9
 8001f3a:	4645      	mov	r5, r8
 8001f3c:	46de      	mov	lr, fp
 8001f3e:	b5e0      	push	{r5, r6, r7, lr}
 8001f40:	000d      	movs	r5, r1
 8001f42:	0004      	movs	r4, r0
 8001f44:	0019      	movs	r1, r3
 8001f46:	0010      	movs	r0, r2
 8001f48:	032b      	lsls	r3, r5, #12
 8001f4a:	0a5b      	lsrs	r3, r3, #9
 8001f4c:	0f62      	lsrs	r2, r4, #29
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	00e3      	lsls	r3, r4, #3
 8001f52:	030c      	lsls	r4, r1, #12
 8001f54:	0a64      	lsrs	r4, r4, #9
 8001f56:	0f47      	lsrs	r7, r0, #29
 8001f58:	4327      	orrs	r7, r4
 8001f5a:	4cd0      	ldr	r4, [pc, #832]	; (800229c <__aeabi_dsub+0x368>)
 8001f5c:	006e      	lsls	r6, r5, #1
 8001f5e:	4691      	mov	r9, r2
 8001f60:	b083      	sub	sp, #12
 8001f62:	004a      	lsls	r2, r1, #1
 8001f64:	00c0      	lsls	r0, r0, #3
 8001f66:	4698      	mov	r8, r3
 8001f68:	46a2      	mov	sl, r4
 8001f6a:	0d76      	lsrs	r6, r6, #21
 8001f6c:	0fed      	lsrs	r5, r5, #31
 8001f6e:	0d52      	lsrs	r2, r2, #21
 8001f70:	0fc9      	lsrs	r1, r1, #31
 8001f72:	9001      	str	r0, [sp, #4]
 8001f74:	42a2      	cmp	r2, r4
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x46>
 8001f78:	e0b9      	b.n	80020ee <__aeabi_dsub+0x1ba>
 8001f7a:	2401      	movs	r4, #1
 8001f7c:	4061      	eors	r1, r4
 8001f7e:	468b      	mov	fp, r1
 8001f80:	428d      	cmp	r5, r1
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x52>
 8001f84:	e08d      	b.n	80020a2 <__aeabi_dsub+0x16e>
 8001f86:	1ab4      	subs	r4, r6, r2
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	dc00      	bgt.n	8001f90 <__aeabi_dsub+0x5c>
 8001f8e:	e0b7      	b.n	8002100 <__aeabi_dsub+0x1cc>
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x62>
 8001f94:	e0cb      	b.n	800212e <__aeabi_dsub+0x1fa>
 8001f96:	4ac1      	ldr	r2, [pc, #772]	; (800229c <__aeabi_dsub+0x368>)
 8001f98:	4296      	cmp	r6, r2
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x6a>
 8001f9c:	e186      	b.n	80022ac <__aeabi_dsub+0x378>
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0412      	lsls	r2, r2, #16
 8001fa2:	4317      	orrs	r7, r2
 8001fa4:	4662      	mov	r2, ip
 8001fa6:	2a38      	cmp	r2, #56	; 0x38
 8001fa8:	dd00      	ble.n	8001fac <__aeabi_dsub+0x78>
 8001faa:	e1a4      	b.n	80022f6 <__aeabi_dsub+0x3c2>
 8001fac:	2a1f      	cmp	r2, #31
 8001fae:	dd00      	ble.n	8001fb2 <__aeabi_dsub+0x7e>
 8001fb0:	e21d      	b.n	80023ee <__aeabi_dsub+0x4ba>
 8001fb2:	4661      	mov	r1, ip
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	1a52      	subs	r2, r2, r1
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4090      	lsls	r0, r2
 8001fbe:	4094      	lsls	r4, r2
 8001fc0:	1e42      	subs	r2, r0, #1
 8001fc2:	4190      	sbcs	r0, r2
 8001fc4:	4662      	mov	r2, ip
 8001fc6:	46a0      	mov	r8, r4
 8001fc8:	4664      	mov	r4, ip
 8001fca:	40d7      	lsrs	r7, r2
 8001fcc:	464a      	mov	r2, r9
 8001fce:	40e1      	lsrs	r1, r4
 8001fd0:	4644      	mov	r4, r8
 8001fd2:	1bd2      	subs	r2, r2, r7
 8001fd4:	4691      	mov	r9, r2
 8001fd6:	430c      	orrs	r4, r1
 8001fd8:	4304      	orrs	r4, r0
 8001fda:	1b1c      	subs	r4, r3, r4
 8001fdc:	42a3      	cmp	r3, r4
 8001fde:	4192      	sbcs	r2, r2
 8001fe0:	464b      	mov	r3, r9
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	469a      	mov	sl, r3
 8001fe8:	4653      	mov	r3, sl
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	d400      	bmi.n	8001ff0 <__aeabi_dsub+0xbc>
 8001fee:	e12b      	b.n	8002248 <__aeabi_dsub+0x314>
 8001ff0:	4653      	mov	r3, sl
 8001ff2:	025a      	lsls	r2, r3, #9
 8001ff4:	0a53      	lsrs	r3, r2, #9
 8001ff6:	469a      	mov	sl, r3
 8001ff8:	4653      	mov	r3, sl
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dsub+0xcc>
 8001ffe:	e166      	b.n	80022ce <__aeabi_dsub+0x39a>
 8002000:	4650      	mov	r0, sl
 8002002:	f000 fbc3 	bl	800278c <__clzsi2>
 8002006:	0003      	movs	r3, r0
 8002008:	3b08      	subs	r3, #8
 800200a:	2220      	movs	r2, #32
 800200c:	0020      	movs	r0, r4
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	4651      	mov	r1, sl
 8002012:	40d0      	lsrs	r0, r2
 8002014:	4099      	lsls	r1, r3
 8002016:	0002      	movs	r2, r0
 8002018:	409c      	lsls	r4, r3
 800201a:	430a      	orrs	r2, r1
 800201c:	429e      	cmp	r6, r3
 800201e:	dd00      	ble.n	8002022 <__aeabi_dsub+0xee>
 8002020:	e164      	b.n	80022ec <__aeabi_dsub+0x3b8>
 8002022:	1b9b      	subs	r3, r3, r6
 8002024:	1c59      	adds	r1, r3, #1
 8002026:	291f      	cmp	r1, #31
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0xf8>
 800202a:	e0fe      	b.n	800222a <__aeabi_dsub+0x2f6>
 800202c:	2320      	movs	r3, #32
 800202e:	0010      	movs	r0, r2
 8002030:	0026      	movs	r6, r4
 8002032:	1a5b      	subs	r3, r3, r1
 8002034:	409c      	lsls	r4, r3
 8002036:	4098      	lsls	r0, r3
 8002038:	40ce      	lsrs	r6, r1
 800203a:	40ca      	lsrs	r2, r1
 800203c:	1e63      	subs	r3, r4, #1
 800203e:	419c      	sbcs	r4, r3
 8002040:	4330      	orrs	r0, r6
 8002042:	4692      	mov	sl, r2
 8002044:	2600      	movs	r6, #0
 8002046:	4304      	orrs	r4, r0
 8002048:	0763      	lsls	r3, r4, #29
 800204a:	d009      	beq.n	8002060 <__aeabi_dsub+0x12c>
 800204c:	230f      	movs	r3, #15
 800204e:	4023      	ands	r3, r4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d005      	beq.n	8002060 <__aeabi_dsub+0x12c>
 8002054:	1d23      	adds	r3, r4, #4
 8002056:	42a3      	cmp	r3, r4
 8002058:	41a4      	sbcs	r4, r4
 800205a:	4264      	negs	r4, r4
 800205c:	44a2      	add	sl, r4
 800205e:	001c      	movs	r4, r3
 8002060:	4653      	mov	r3, sl
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	d400      	bmi.n	8002068 <__aeabi_dsub+0x134>
 8002066:	e0f2      	b.n	800224e <__aeabi_dsub+0x31a>
 8002068:	4b8c      	ldr	r3, [pc, #560]	; (800229c <__aeabi_dsub+0x368>)
 800206a:	3601      	adds	r6, #1
 800206c:	429e      	cmp	r6, r3
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x13e>
 8002070:	e10f      	b.n	8002292 <__aeabi_dsub+0x35e>
 8002072:	4653      	mov	r3, sl
 8002074:	498a      	ldr	r1, [pc, #552]	; (80022a0 <__aeabi_dsub+0x36c>)
 8002076:	08e4      	lsrs	r4, r4, #3
 8002078:	400b      	ands	r3, r1
 800207a:	0019      	movs	r1, r3
 800207c:	075b      	lsls	r3, r3, #29
 800207e:	4323      	orrs	r3, r4
 8002080:	0572      	lsls	r2, r6, #21
 8002082:	024c      	lsls	r4, r1, #9
 8002084:	0b24      	lsrs	r4, r4, #12
 8002086:	0d52      	lsrs	r2, r2, #21
 8002088:	0512      	lsls	r2, r2, #20
 800208a:	4322      	orrs	r2, r4
 800208c:	07ed      	lsls	r5, r5, #31
 800208e:	432a      	orrs	r2, r5
 8002090:	0018      	movs	r0, r3
 8002092:	0011      	movs	r1, r2
 8002094:	b003      	add	sp, #12
 8002096:	bcf0      	pop	{r4, r5, r6, r7}
 8002098:	46bb      	mov	fp, r7
 800209a:	46b2      	mov	sl, r6
 800209c:	46a9      	mov	r9, r5
 800209e:	46a0      	mov	r8, r4
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a2:	1ab4      	subs	r4, r6, r2
 80020a4:	46a4      	mov	ip, r4
 80020a6:	2c00      	cmp	r4, #0
 80020a8:	dd59      	ble.n	800215e <__aeabi_dsub+0x22a>
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x17c>
 80020ae:	e0b0      	b.n	8002212 <__aeabi_dsub+0x2de>
 80020b0:	4556      	cmp	r6, sl
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x182>
 80020b4:	e0fa      	b.n	80022ac <__aeabi_dsub+0x378>
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4317      	orrs	r7, r2
 80020bc:	4662      	mov	r2, ip
 80020be:	2a38      	cmp	r2, #56	; 0x38
 80020c0:	dd00      	ble.n	80020c4 <__aeabi_dsub+0x190>
 80020c2:	e0d4      	b.n	800226e <__aeabi_dsub+0x33a>
 80020c4:	2a1f      	cmp	r2, #31
 80020c6:	dc00      	bgt.n	80020ca <__aeabi_dsub+0x196>
 80020c8:	e1c0      	b.n	800244c <__aeabi_dsub+0x518>
 80020ca:	0039      	movs	r1, r7
 80020cc:	3a20      	subs	r2, #32
 80020ce:	40d1      	lsrs	r1, r2
 80020d0:	4662      	mov	r2, ip
 80020d2:	2a20      	cmp	r2, #32
 80020d4:	d006      	beq.n	80020e4 <__aeabi_dsub+0x1b0>
 80020d6:	4664      	mov	r4, ip
 80020d8:	2240      	movs	r2, #64	; 0x40
 80020da:	1b12      	subs	r2, r2, r4
 80020dc:	003c      	movs	r4, r7
 80020de:	4094      	lsls	r4, r2
 80020e0:	4304      	orrs	r4, r0
 80020e2:	9401      	str	r4, [sp, #4]
 80020e4:	9c01      	ldr	r4, [sp, #4]
 80020e6:	1e62      	subs	r2, r4, #1
 80020e8:	4194      	sbcs	r4, r2
 80020ea:	430c      	orrs	r4, r1
 80020ec:	e0c3      	b.n	8002276 <__aeabi_dsub+0x342>
 80020ee:	003c      	movs	r4, r7
 80020f0:	4304      	orrs	r4, r0
 80020f2:	d02b      	beq.n	800214c <__aeabi_dsub+0x218>
 80020f4:	468b      	mov	fp, r1
 80020f6:	428d      	cmp	r5, r1
 80020f8:	d02e      	beq.n	8002158 <__aeabi_dsub+0x224>
 80020fa:	4c6a      	ldr	r4, [pc, #424]	; (80022a4 <__aeabi_dsub+0x370>)
 80020fc:	46a4      	mov	ip, r4
 80020fe:	44b4      	add	ip, r6
 8002100:	4664      	mov	r4, ip
 8002102:	2c00      	cmp	r4, #0
 8002104:	d05f      	beq.n	80021c6 <__aeabi_dsub+0x292>
 8002106:	1b94      	subs	r4, r2, r6
 8002108:	46a4      	mov	ip, r4
 800210a:	2e00      	cmp	r6, #0
 800210c:	d000      	beq.n	8002110 <__aeabi_dsub+0x1dc>
 800210e:	e120      	b.n	8002352 <__aeabi_dsub+0x41e>
 8002110:	464c      	mov	r4, r9
 8002112:	431c      	orrs	r4, r3
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x1e4>
 8002116:	e1c7      	b.n	80024a8 <__aeabi_dsub+0x574>
 8002118:	4661      	mov	r1, ip
 800211a:	1e4c      	subs	r4, r1, #1
 800211c:	2901      	cmp	r1, #1
 800211e:	d100      	bne.n	8002122 <__aeabi_dsub+0x1ee>
 8002120:	e223      	b.n	800256a <__aeabi_dsub+0x636>
 8002122:	4d5e      	ldr	r5, [pc, #376]	; (800229c <__aeabi_dsub+0x368>)
 8002124:	45ac      	cmp	ip, r5
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x1f6>
 8002128:	e1d8      	b.n	80024dc <__aeabi_dsub+0x5a8>
 800212a:	46a4      	mov	ip, r4
 800212c:	e11a      	b.n	8002364 <__aeabi_dsub+0x430>
 800212e:	003a      	movs	r2, r7
 8002130:	4302      	orrs	r2, r0
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x202>
 8002134:	e0e4      	b.n	8002300 <__aeabi_dsub+0x3cc>
 8002136:	0022      	movs	r2, r4
 8002138:	3a01      	subs	r2, #1
 800213a:	2c01      	cmp	r4, #1
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x20c>
 800213e:	e1c3      	b.n	80024c8 <__aeabi_dsub+0x594>
 8002140:	4956      	ldr	r1, [pc, #344]	; (800229c <__aeabi_dsub+0x368>)
 8002142:	428c      	cmp	r4, r1
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x214>
 8002146:	e0b1      	b.n	80022ac <__aeabi_dsub+0x378>
 8002148:	4694      	mov	ip, r2
 800214a:	e72b      	b.n	8001fa4 <__aeabi_dsub+0x70>
 800214c:	2401      	movs	r4, #1
 800214e:	4061      	eors	r1, r4
 8002150:	468b      	mov	fp, r1
 8002152:	428d      	cmp	r5, r1
 8002154:	d000      	beq.n	8002158 <__aeabi_dsub+0x224>
 8002156:	e716      	b.n	8001f86 <__aeabi_dsub+0x52>
 8002158:	4952      	ldr	r1, [pc, #328]	; (80022a4 <__aeabi_dsub+0x370>)
 800215a:	468c      	mov	ip, r1
 800215c:	44b4      	add	ip, r6
 800215e:	4664      	mov	r4, ip
 8002160:	2c00      	cmp	r4, #0
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x232>
 8002164:	e0d3      	b.n	800230e <__aeabi_dsub+0x3da>
 8002166:	1b91      	subs	r1, r2, r6
 8002168:	468c      	mov	ip, r1
 800216a:	2e00      	cmp	r6, #0
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x23c>
 800216e:	e15e      	b.n	800242e <__aeabi_dsub+0x4fa>
 8002170:	494a      	ldr	r1, [pc, #296]	; (800229c <__aeabi_dsub+0x368>)
 8002172:	428a      	cmp	r2, r1
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x244>
 8002176:	e1be      	b.n	80024f6 <__aeabi_dsub+0x5c2>
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	464c      	mov	r4, r9
 800217c:	0409      	lsls	r1, r1, #16
 800217e:	430c      	orrs	r4, r1
 8002180:	46a1      	mov	r9, r4
 8002182:	4661      	mov	r1, ip
 8002184:	2938      	cmp	r1, #56	; 0x38
 8002186:	dd00      	ble.n	800218a <__aeabi_dsub+0x256>
 8002188:	e1ba      	b.n	8002500 <__aeabi_dsub+0x5cc>
 800218a:	291f      	cmp	r1, #31
 800218c:	dd00      	ble.n	8002190 <__aeabi_dsub+0x25c>
 800218e:	e227      	b.n	80025e0 <__aeabi_dsub+0x6ac>
 8002190:	2420      	movs	r4, #32
 8002192:	1a64      	subs	r4, r4, r1
 8002194:	4649      	mov	r1, r9
 8002196:	40a1      	lsls	r1, r4
 8002198:	001e      	movs	r6, r3
 800219a:	4688      	mov	r8, r1
 800219c:	4661      	mov	r1, ip
 800219e:	40a3      	lsls	r3, r4
 80021a0:	40ce      	lsrs	r6, r1
 80021a2:	4641      	mov	r1, r8
 80021a4:	1e5c      	subs	r4, r3, #1
 80021a6:	41a3      	sbcs	r3, r4
 80021a8:	4331      	orrs	r1, r6
 80021aa:	4319      	orrs	r1, r3
 80021ac:	000c      	movs	r4, r1
 80021ae:	4663      	mov	r3, ip
 80021b0:	4649      	mov	r1, r9
 80021b2:	40d9      	lsrs	r1, r3
 80021b4:	187f      	adds	r7, r7, r1
 80021b6:	1824      	adds	r4, r4, r0
 80021b8:	4284      	cmp	r4, r0
 80021ba:	419b      	sbcs	r3, r3
 80021bc:	425b      	negs	r3, r3
 80021be:	469a      	mov	sl, r3
 80021c0:	0016      	movs	r6, r2
 80021c2:	44ba      	add	sl, r7
 80021c4:	e05d      	b.n	8002282 <__aeabi_dsub+0x34e>
 80021c6:	4c38      	ldr	r4, [pc, #224]	; (80022a8 <__aeabi_dsub+0x374>)
 80021c8:	1c72      	adds	r2, r6, #1
 80021ca:	4222      	tst	r2, r4
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x29c>
 80021ce:	e0df      	b.n	8002390 <__aeabi_dsub+0x45c>
 80021d0:	464a      	mov	r2, r9
 80021d2:	431a      	orrs	r2, r3
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x2a6>
 80021d8:	e15c      	b.n	8002494 <__aeabi_dsub+0x560>
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x2ac>
 80021de:	e1cf      	b.n	8002580 <__aeabi_dsub+0x64c>
 80021e0:	003a      	movs	r2, r7
 80021e2:	4302      	orrs	r2, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x2b4>
 80021e6:	e17f      	b.n	80024e8 <__aeabi_dsub+0x5b4>
 80021e8:	1a1c      	subs	r4, r3, r0
 80021ea:	464a      	mov	r2, r9
 80021ec:	42a3      	cmp	r3, r4
 80021ee:	4189      	sbcs	r1, r1
 80021f0:	1bd2      	subs	r2, r2, r7
 80021f2:	4249      	negs	r1, r1
 80021f4:	1a52      	subs	r2, r2, r1
 80021f6:	4692      	mov	sl, r2
 80021f8:	0212      	lsls	r2, r2, #8
 80021fa:	d400      	bmi.n	80021fe <__aeabi_dsub+0x2ca>
 80021fc:	e20a      	b.n	8002614 <__aeabi_dsub+0x6e0>
 80021fe:	1ac4      	subs	r4, r0, r3
 8002200:	42a0      	cmp	r0, r4
 8002202:	4180      	sbcs	r0, r0
 8002204:	464b      	mov	r3, r9
 8002206:	4240      	negs	r0, r0
 8002208:	1aff      	subs	r7, r7, r3
 800220a:	1a3b      	subs	r3, r7, r0
 800220c:	469a      	mov	sl, r3
 800220e:	465d      	mov	r5, fp
 8002210:	e71a      	b.n	8002048 <__aeabi_dsub+0x114>
 8002212:	003a      	movs	r2, r7
 8002214:	4302      	orrs	r2, r0
 8002216:	d073      	beq.n	8002300 <__aeabi_dsub+0x3cc>
 8002218:	0022      	movs	r2, r4
 800221a:	3a01      	subs	r2, #1
 800221c:	2c01      	cmp	r4, #1
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x2ee>
 8002220:	e0cb      	b.n	80023ba <__aeabi_dsub+0x486>
 8002222:	4554      	cmp	r4, sl
 8002224:	d042      	beq.n	80022ac <__aeabi_dsub+0x378>
 8002226:	4694      	mov	ip, r2
 8002228:	e748      	b.n	80020bc <__aeabi_dsub+0x188>
 800222a:	0010      	movs	r0, r2
 800222c:	3b1f      	subs	r3, #31
 800222e:	40d8      	lsrs	r0, r3
 8002230:	2920      	cmp	r1, #32
 8002232:	d003      	beq.n	800223c <__aeabi_dsub+0x308>
 8002234:	2340      	movs	r3, #64	; 0x40
 8002236:	1a5b      	subs	r3, r3, r1
 8002238:	409a      	lsls	r2, r3
 800223a:	4314      	orrs	r4, r2
 800223c:	1e63      	subs	r3, r4, #1
 800223e:	419c      	sbcs	r4, r3
 8002240:	2300      	movs	r3, #0
 8002242:	2600      	movs	r6, #0
 8002244:	469a      	mov	sl, r3
 8002246:	4304      	orrs	r4, r0
 8002248:	0763      	lsls	r3, r4, #29
 800224a:	d000      	beq.n	800224e <__aeabi_dsub+0x31a>
 800224c:	e6fe      	b.n	800204c <__aeabi_dsub+0x118>
 800224e:	4652      	mov	r2, sl
 8002250:	08e3      	lsrs	r3, r4, #3
 8002252:	0752      	lsls	r2, r2, #29
 8002254:	4313      	orrs	r3, r2
 8002256:	4652      	mov	r2, sl
 8002258:	46b4      	mov	ip, r6
 800225a:	08d2      	lsrs	r2, r2, #3
 800225c:	490f      	ldr	r1, [pc, #60]	; (800229c <__aeabi_dsub+0x368>)
 800225e:	458c      	cmp	ip, r1
 8002260:	d02a      	beq.n	80022b8 <__aeabi_dsub+0x384>
 8002262:	0312      	lsls	r2, r2, #12
 8002264:	0b14      	lsrs	r4, r2, #12
 8002266:	4662      	mov	r2, ip
 8002268:	0552      	lsls	r2, r2, #21
 800226a:	0d52      	lsrs	r2, r2, #21
 800226c:	e70c      	b.n	8002088 <__aeabi_dsub+0x154>
 800226e:	003c      	movs	r4, r7
 8002270:	4304      	orrs	r4, r0
 8002272:	1e62      	subs	r2, r4, #1
 8002274:	4194      	sbcs	r4, r2
 8002276:	18e4      	adds	r4, r4, r3
 8002278:	429c      	cmp	r4, r3
 800227a:	4192      	sbcs	r2, r2
 800227c:	4252      	negs	r2, r2
 800227e:	444a      	add	r2, r9
 8002280:	4692      	mov	sl, r2
 8002282:	4653      	mov	r3, sl
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	d5df      	bpl.n	8002248 <__aeabi_dsub+0x314>
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__aeabi_dsub+0x368>)
 800228a:	3601      	adds	r6, #1
 800228c:	429e      	cmp	r6, r3
 800228e:	d000      	beq.n	8002292 <__aeabi_dsub+0x35e>
 8002290:	e0a0      	b.n	80023d4 <__aeabi_dsub+0x4a0>
 8002292:	0032      	movs	r2, r6
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	e6f6      	b.n	8002088 <__aeabi_dsub+0x154>
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	000007ff 	.word	0x000007ff
 80022a0:	ff7fffff 	.word	0xff7fffff
 80022a4:	fffff801 	.word	0xfffff801
 80022a8:	000007fe 	.word	0x000007fe
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	464a      	mov	r2, r9
 80022b0:	0752      	lsls	r2, r2, #29
 80022b2:	4313      	orrs	r3, r2
 80022b4:	464a      	mov	r2, r9
 80022b6:	08d2      	lsrs	r2, r2, #3
 80022b8:	0019      	movs	r1, r3
 80022ba:	4311      	orrs	r1, r2
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x38c>
 80022be:	e1b5      	b.n	800262c <__aeabi_dsub+0x6f8>
 80022c0:	2480      	movs	r4, #128	; 0x80
 80022c2:	0324      	lsls	r4, r4, #12
 80022c4:	4314      	orrs	r4, r2
 80022c6:	0324      	lsls	r4, r4, #12
 80022c8:	4ad5      	ldr	r2, [pc, #852]	; (8002620 <__aeabi_dsub+0x6ec>)
 80022ca:	0b24      	lsrs	r4, r4, #12
 80022cc:	e6dc      	b.n	8002088 <__aeabi_dsub+0x154>
 80022ce:	0020      	movs	r0, r4
 80022d0:	f000 fa5c 	bl	800278c <__clzsi2>
 80022d4:	0003      	movs	r3, r0
 80022d6:	3318      	adds	r3, #24
 80022d8:	2b1f      	cmp	r3, #31
 80022da:	dc00      	bgt.n	80022de <__aeabi_dsub+0x3aa>
 80022dc:	e695      	b.n	800200a <__aeabi_dsub+0xd6>
 80022de:	0022      	movs	r2, r4
 80022e0:	3808      	subs	r0, #8
 80022e2:	4082      	lsls	r2, r0
 80022e4:	2400      	movs	r4, #0
 80022e6:	429e      	cmp	r6, r3
 80022e8:	dc00      	bgt.n	80022ec <__aeabi_dsub+0x3b8>
 80022ea:	e69a      	b.n	8002022 <__aeabi_dsub+0xee>
 80022ec:	1af6      	subs	r6, r6, r3
 80022ee:	4bcd      	ldr	r3, [pc, #820]	; (8002624 <__aeabi_dsub+0x6f0>)
 80022f0:	401a      	ands	r2, r3
 80022f2:	4692      	mov	sl, r2
 80022f4:	e6a8      	b.n	8002048 <__aeabi_dsub+0x114>
 80022f6:	003c      	movs	r4, r7
 80022f8:	4304      	orrs	r4, r0
 80022fa:	1e62      	subs	r2, r4, #1
 80022fc:	4194      	sbcs	r4, r2
 80022fe:	e66c      	b.n	8001fda <__aeabi_dsub+0xa6>
 8002300:	464a      	mov	r2, r9
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	0752      	lsls	r2, r2, #29
 8002306:	4313      	orrs	r3, r2
 8002308:	464a      	mov	r2, r9
 800230a:	08d2      	lsrs	r2, r2, #3
 800230c:	e7a6      	b.n	800225c <__aeabi_dsub+0x328>
 800230e:	4cc6      	ldr	r4, [pc, #792]	; (8002628 <__aeabi_dsub+0x6f4>)
 8002310:	1c72      	adds	r2, r6, #1
 8002312:	4222      	tst	r2, r4
 8002314:	d000      	beq.n	8002318 <__aeabi_dsub+0x3e4>
 8002316:	e0ac      	b.n	8002472 <__aeabi_dsub+0x53e>
 8002318:	464a      	mov	r2, r9
 800231a:	431a      	orrs	r2, r3
 800231c:	2e00      	cmp	r6, #0
 800231e:	d000      	beq.n	8002322 <__aeabi_dsub+0x3ee>
 8002320:	e105      	b.n	800252e <__aeabi_dsub+0x5fa>
 8002322:	2a00      	cmp	r2, #0
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x3f4>
 8002326:	e156      	b.n	80025d6 <__aeabi_dsub+0x6a2>
 8002328:	003a      	movs	r2, r7
 800232a:	4302      	orrs	r2, r0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x3fc>
 800232e:	e0db      	b.n	80024e8 <__aeabi_dsub+0x5b4>
 8002330:	181c      	adds	r4, r3, r0
 8002332:	429c      	cmp	r4, r3
 8002334:	419b      	sbcs	r3, r3
 8002336:	444f      	add	r7, r9
 8002338:	46ba      	mov	sl, r7
 800233a:	425b      	negs	r3, r3
 800233c:	449a      	add	sl, r3
 800233e:	4653      	mov	r3, sl
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	d400      	bmi.n	8002346 <__aeabi_dsub+0x412>
 8002344:	e780      	b.n	8002248 <__aeabi_dsub+0x314>
 8002346:	4652      	mov	r2, sl
 8002348:	4bb6      	ldr	r3, [pc, #728]	; (8002624 <__aeabi_dsub+0x6f0>)
 800234a:	2601      	movs	r6, #1
 800234c:	401a      	ands	r2, r3
 800234e:	4692      	mov	sl, r2
 8002350:	e77a      	b.n	8002248 <__aeabi_dsub+0x314>
 8002352:	4cb3      	ldr	r4, [pc, #716]	; (8002620 <__aeabi_dsub+0x6ec>)
 8002354:	42a2      	cmp	r2, r4
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x426>
 8002358:	e0c0      	b.n	80024dc <__aeabi_dsub+0x5a8>
 800235a:	2480      	movs	r4, #128	; 0x80
 800235c:	464d      	mov	r5, r9
 800235e:	0424      	lsls	r4, r4, #16
 8002360:	4325      	orrs	r5, r4
 8002362:	46a9      	mov	r9, r5
 8002364:	4664      	mov	r4, ip
 8002366:	2c38      	cmp	r4, #56	; 0x38
 8002368:	dc53      	bgt.n	8002412 <__aeabi_dsub+0x4de>
 800236a:	4661      	mov	r1, ip
 800236c:	2c1f      	cmp	r4, #31
 800236e:	dd00      	ble.n	8002372 <__aeabi_dsub+0x43e>
 8002370:	e0cd      	b.n	800250e <__aeabi_dsub+0x5da>
 8002372:	2520      	movs	r5, #32
 8002374:	001e      	movs	r6, r3
 8002376:	1b2d      	subs	r5, r5, r4
 8002378:	464c      	mov	r4, r9
 800237a:	40ab      	lsls	r3, r5
 800237c:	40ac      	lsls	r4, r5
 800237e:	40ce      	lsrs	r6, r1
 8002380:	1e5d      	subs	r5, r3, #1
 8002382:	41ab      	sbcs	r3, r5
 8002384:	4334      	orrs	r4, r6
 8002386:	4323      	orrs	r3, r4
 8002388:	464c      	mov	r4, r9
 800238a:	40cc      	lsrs	r4, r1
 800238c:	1b3f      	subs	r7, r7, r4
 800238e:	e045      	b.n	800241c <__aeabi_dsub+0x4e8>
 8002390:	464a      	mov	r2, r9
 8002392:	1a1c      	subs	r4, r3, r0
 8002394:	1bd1      	subs	r1, r2, r7
 8002396:	42a3      	cmp	r3, r4
 8002398:	4192      	sbcs	r2, r2
 800239a:	4252      	negs	r2, r2
 800239c:	4692      	mov	sl, r2
 800239e:	000a      	movs	r2, r1
 80023a0:	4651      	mov	r1, sl
 80023a2:	1a52      	subs	r2, r2, r1
 80023a4:	4692      	mov	sl, r2
 80023a6:	0212      	lsls	r2, r2, #8
 80023a8:	d500      	bpl.n	80023ac <__aeabi_dsub+0x478>
 80023aa:	e083      	b.n	80024b4 <__aeabi_dsub+0x580>
 80023ac:	4653      	mov	r3, sl
 80023ae:	4323      	orrs	r3, r4
 80023b0:	d000      	beq.n	80023b4 <__aeabi_dsub+0x480>
 80023b2:	e621      	b.n	8001ff8 <__aeabi_dsub+0xc4>
 80023b4:	2200      	movs	r2, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	e753      	b.n	8002262 <__aeabi_dsub+0x32e>
 80023ba:	181c      	adds	r4, r3, r0
 80023bc:	429c      	cmp	r4, r3
 80023be:	419b      	sbcs	r3, r3
 80023c0:	444f      	add	r7, r9
 80023c2:	46ba      	mov	sl, r7
 80023c4:	425b      	negs	r3, r3
 80023c6:	449a      	add	sl, r3
 80023c8:	4653      	mov	r3, sl
 80023ca:	2601      	movs	r6, #1
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	d400      	bmi.n	80023d2 <__aeabi_dsub+0x49e>
 80023d0:	e73a      	b.n	8002248 <__aeabi_dsub+0x314>
 80023d2:	2602      	movs	r6, #2
 80023d4:	4652      	mov	r2, sl
 80023d6:	4b93      	ldr	r3, [pc, #588]	; (8002624 <__aeabi_dsub+0x6f0>)
 80023d8:	2101      	movs	r1, #1
 80023da:	401a      	ands	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	4021      	ands	r1, r4
 80023e0:	0862      	lsrs	r2, r4, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	07dc      	lsls	r4, r3, #31
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	469a      	mov	sl, r3
 80023ea:	4314      	orrs	r4, r2
 80023ec:	e62c      	b.n	8002048 <__aeabi_dsub+0x114>
 80023ee:	0039      	movs	r1, r7
 80023f0:	3a20      	subs	r2, #32
 80023f2:	40d1      	lsrs	r1, r2
 80023f4:	4662      	mov	r2, ip
 80023f6:	2a20      	cmp	r2, #32
 80023f8:	d006      	beq.n	8002408 <__aeabi_dsub+0x4d4>
 80023fa:	4664      	mov	r4, ip
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	1b12      	subs	r2, r2, r4
 8002400:	003c      	movs	r4, r7
 8002402:	4094      	lsls	r4, r2
 8002404:	4304      	orrs	r4, r0
 8002406:	9401      	str	r4, [sp, #4]
 8002408:	9c01      	ldr	r4, [sp, #4]
 800240a:	1e62      	subs	r2, r4, #1
 800240c:	4194      	sbcs	r4, r2
 800240e:	430c      	orrs	r4, r1
 8002410:	e5e3      	b.n	8001fda <__aeabi_dsub+0xa6>
 8002412:	4649      	mov	r1, r9
 8002414:	4319      	orrs	r1, r3
 8002416:	000b      	movs	r3, r1
 8002418:	1e5c      	subs	r4, r3, #1
 800241a:	41a3      	sbcs	r3, r4
 800241c:	1ac4      	subs	r4, r0, r3
 800241e:	42a0      	cmp	r0, r4
 8002420:	419b      	sbcs	r3, r3
 8002422:	425b      	negs	r3, r3
 8002424:	1afb      	subs	r3, r7, r3
 8002426:	469a      	mov	sl, r3
 8002428:	465d      	mov	r5, fp
 800242a:	0016      	movs	r6, r2
 800242c:	e5dc      	b.n	8001fe8 <__aeabi_dsub+0xb4>
 800242e:	4649      	mov	r1, r9
 8002430:	4319      	orrs	r1, r3
 8002432:	d100      	bne.n	8002436 <__aeabi_dsub+0x502>
 8002434:	e0ae      	b.n	8002594 <__aeabi_dsub+0x660>
 8002436:	4661      	mov	r1, ip
 8002438:	4664      	mov	r4, ip
 800243a:	3901      	subs	r1, #1
 800243c:	2c01      	cmp	r4, #1
 800243e:	d100      	bne.n	8002442 <__aeabi_dsub+0x50e>
 8002440:	e0e0      	b.n	8002604 <__aeabi_dsub+0x6d0>
 8002442:	4c77      	ldr	r4, [pc, #476]	; (8002620 <__aeabi_dsub+0x6ec>)
 8002444:	45a4      	cmp	ip, r4
 8002446:	d056      	beq.n	80024f6 <__aeabi_dsub+0x5c2>
 8002448:	468c      	mov	ip, r1
 800244a:	e69a      	b.n	8002182 <__aeabi_dsub+0x24e>
 800244c:	4661      	mov	r1, ip
 800244e:	2220      	movs	r2, #32
 8002450:	003c      	movs	r4, r7
 8002452:	1a52      	subs	r2, r2, r1
 8002454:	4094      	lsls	r4, r2
 8002456:	0001      	movs	r1, r0
 8002458:	4090      	lsls	r0, r2
 800245a:	46a0      	mov	r8, r4
 800245c:	4664      	mov	r4, ip
 800245e:	1e42      	subs	r2, r0, #1
 8002460:	4190      	sbcs	r0, r2
 8002462:	4662      	mov	r2, ip
 8002464:	40e1      	lsrs	r1, r4
 8002466:	4644      	mov	r4, r8
 8002468:	40d7      	lsrs	r7, r2
 800246a:	430c      	orrs	r4, r1
 800246c:	4304      	orrs	r4, r0
 800246e:	44b9      	add	r9, r7
 8002470:	e701      	b.n	8002276 <__aeabi_dsub+0x342>
 8002472:	496b      	ldr	r1, [pc, #428]	; (8002620 <__aeabi_dsub+0x6ec>)
 8002474:	428a      	cmp	r2, r1
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x546>
 8002478:	e70c      	b.n	8002294 <__aeabi_dsub+0x360>
 800247a:	1818      	adds	r0, r3, r0
 800247c:	4298      	cmp	r0, r3
 800247e:	419b      	sbcs	r3, r3
 8002480:	444f      	add	r7, r9
 8002482:	425b      	negs	r3, r3
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	07dc      	lsls	r4, r3, #31
 8002488:	0840      	lsrs	r0, r0, #1
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	469a      	mov	sl, r3
 800248e:	0016      	movs	r6, r2
 8002490:	4304      	orrs	r4, r0
 8002492:	e6d9      	b.n	8002248 <__aeabi_dsub+0x314>
 8002494:	2a00      	cmp	r2, #0
 8002496:	d000      	beq.n	800249a <__aeabi_dsub+0x566>
 8002498:	e081      	b.n	800259e <__aeabi_dsub+0x66a>
 800249a:	003b      	movs	r3, r7
 800249c:	4303      	orrs	r3, r0
 800249e:	d11d      	bne.n	80024dc <__aeabi_dsub+0x5a8>
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	2500      	movs	r5, #0
 80024a4:	0312      	lsls	r2, r2, #12
 80024a6:	e70b      	b.n	80022c0 <__aeabi_dsub+0x38c>
 80024a8:	08c0      	lsrs	r0, r0, #3
 80024aa:	077b      	lsls	r3, r7, #29
 80024ac:	465d      	mov	r5, fp
 80024ae:	4303      	orrs	r3, r0
 80024b0:	08fa      	lsrs	r2, r7, #3
 80024b2:	e6d3      	b.n	800225c <__aeabi_dsub+0x328>
 80024b4:	1ac4      	subs	r4, r0, r3
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	4180      	sbcs	r0, r0
 80024ba:	464b      	mov	r3, r9
 80024bc:	4240      	negs	r0, r0
 80024be:	1aff      	subs	r7, r7, r3
 80024c0:	1a3b      	subs	r3, r7, r0
 80024c2:	469a      	mov	sl, r3
 80024c4:	465d      	mov	r5, fp
 80024c6:	e597      	b.n	8001ff8 <__aeabi_dsub+0xc4>
 80024c8:	1a1c      	subs	r4, r3, r0
 80024ca:	464a      	mov	r2, r9
 80024cc:	42a3      	cmp	r3, r4
 80024ce:	419b      	sbcs	r3, r3
 80024d0:	1bd7      	subs	r7, r2, r7
 80024d2:	425b      	negs	r3, r3
 80024d4:	1afb      	subs	r3, r7, r3
 80024d6:	469a      	mov	sl, r3
 80024d8:	2601      	movs	r6, #1
 80024da:	e585      	b.n	8001fe8 <__aeabi_dsub+0xb4>
 80024dc:	08c0      	lsrs	r0, r0, #3
 80024de:	077b      	lsls	r3, r7, #29
 80024e0:	465d      	mov	r5, fp
 80024e2:	4303      	orrs	r3, r0
 80024e4:	08fa      	lsrs	r2, r7, #3
 80024e6:	e6e7      	b.n	80022b8 <__aeabi_dsub+0x384>
 80024e8:	464a      	mov	r2, r9
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	0752      	lsls	r2, r2, #29
 80024ee:	4313      	orrs	r3, r2
 80024f0:	464a      	mov	r2, r9
 80024f2:	08d2      	lsrs	r2, r2, #3
 80024f4:	e6b5      	b.n	8002262 <__aeabi_dsub+0x32e>
 80024f6:	08c0      	lsrs	r0, r0, #3
 80024f8:	077b      	lsls	r3, r7, #29
 80024fa:	4303      	orrs	r3, r0
 80024fc:	08fa      	lsrs	r2, r7, #3
 80024fe:	e6db      	b.n	80022b8 <__aeabi_dsub+0x384>
 8002500:	4649      	mov	r1, r9
 8002502:	4319      	orrs	r1, r3
 8002504:	000b      	movs	r3, r1
 8002506:	1e59      	subs	r1, r3, #1
 8002508:	418b      	sbcs	r3, r1
 800250a:	001c      	movs	r4, r3
 800250c:	e653      	b.n	80021b6 <__aeabi_dsub+0x282>
 800250e:	464d      	mov	r5, r9
 8002510:	3c20      	subs	r4, #32
 8002512:	40e5      	lsrs	r5, r4
 8002514:	2920      	cmp	r1, #32
 8002516:	d005      	beq.n	8002524 <__aeabi_dsub+0x5f0>
 8002518:	2440      	movs	r4, #64	; 0x40
 800251a:	1a64      	subs	r4, r4, r1
 800251c:	4649      	mov	r1, r9
 800251e:	40a1      	lsls	r1, r4
 8002520:	430b      	orrs	r3, r1
 8002522:	4698      	mov	r8, r3
 8002524:	4643      	mov	r3, r8
 8002526:	1e5c      	subs	r4, r3, #1
 8002528:	41a3      	sbcs	r3, r4
 800252a:	432b      	orrs	r3, r5
 800252c:	e776      	b.n	800241c <__aeabi_dsub+0x4e8>
 800252e:	2a00      	cmp	r2, #0
 8002530:	d0e1      	beq.n	80024f6 <__aeabi_dsub+0x5c2>
 8002532:	003a      	movs	r2, r7
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	4302      	orrs	r2, r0
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x608>
 800253a:	e6b8      	b.n	80022ae <__aeabi_dsub+0x37a>
 800253c:	464a      	mov	r2, r9
 800253e:	0752      	lsls	r2, r2, #29
 8002540:	2480      	movs	r4, #128	; 0x80
 8002542:	4313      	orrs	r3, r2
 8002544:	464a      	mov	r2, r9
 8002546:	0324      	lsls	r4, r4, #12
 8002548:	08d2      	lsrs	r2, r2, #3
 800254a:	4222      	tst	r2, r4
 800254c:	d007      	beq.n	800255e <__aeabi_dsub+0x62a>
 800254e:	08fe      	lsrs	r6, r7, #3
 8002550:	4226      	tst	r6, r4
 8002552:	d104      	bne.n	800255e <__aeabi_dsub+0x62a>
 8002554:	465d      	mov	r5, fp
 8002556:	0032      	movs	r2, r6
 8002558:	08c3      	lsrs	r3, r0, #3
 800255a:	077f      	lsls	r7, r7, #29
 800255c:	433b      	orrs	r3, r7
 800255e:	0f59      	lsrs	r1, r3, #29
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	0749      	lsls	r1, r1, #29
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	430b      	orrs	r3, r1
 8002568:	e6a6      	b.n	80022b8 <__aeabi_dsub+0x384>
 800256a:	1ac4      	subs	r4, r0, r3
 800256c:	42a0      	cmp	r0, r4
 800256e:	4180      	sbcs	r0, r0
 8002570:	464b      	mov	r3, r9
 8002572:	4240      	negs	r0, r0
 8002574:	1aff      	subs	r7, r7, r3
 8002576:	1a3b      	subs	r3, r7, r0
 8002578:	469a      	mov	sl, r3
 800257a:	465d      	mov	r5, fp
 800257c:	2601      	movs	r6, #1
 800257e:	e533      	b.n	8001fe8 <__aeabi_dsub+0xb4>
 8002580:	003b      	movs	r3, r7
 8002582:	4303      	orrs	r3, r0
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x654>
 8002586:	e715      	b.n	80023b4 <__aeabi_dsub+0x480>
 8002588:	08c0      	lsrs	r0, r0, #3
 800258a:	077b      	lsls	r3, r7, #29
 800258c:	465d      	mov	r5, fp
 800258e:	4303      	orrs	r3, r0
 8002590:	08fa      	lsrs	r2, r7, #3
 8002592:	e666      	b.n	8002262 <__aeabi_dsub+0x32e>
 8002594:	08c0      	lsrs	r0, r0, #3
 8002596:	077b      	lsls	r3, r7, #29
 8002598:	4303      	orrs	r3, r0
 800259a:	08fa      	lsrs	r2, r7, #3
 800259c:	e65e      	b.n	800225c <__aeabi_dsub+0x328>
 800259e:	003a      	movs	r2, r7
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	4302      	orrs	r2, r0
 80025a4:	d100      	bne.n	80025a8 <__aeabi_dsub+0x674>
 80025a6:	e682      	b.n	80022ae <__aeabi_dsub+0x37a>
 80025a8:	464a      	mov	r2, r9
 80025aa:	0752      	lsls	r2, r2, #29
 80025ac:	2480      	movs	r4, #128	; 0x80
 80025ae:	4313      	orrs	r3, r2
 80025b0:	464a      	mov	r2, r9
 80025b2:	0324      	lsls	r4, r4, #12
 80025b4:	08d2      	lsrs	r2, r2, #3
 80025b6:	4222      	tst	r2, r4
 80025b8:	d007      	beq.n	80025ca <__aeabi_dsub+0x696>
 80025ba:	08fe      	lsrs	r6, r7, #3
 80025bc:	4226      	tst	r6, r4
 80025be:	d104      	bne.n	80025ca <__aeabi_dsub+0x696>
 80025c0:	465d      	mov	r5, fp
 80025c2:	0032      	movs	r2, r6
 80025c4:	08c3      	lsrs	r3, r0, #3
 80025c6:	077f      	lsls	r7, r7, #29
 80025c8:	433b      	orrs	r3, r7
 80025ca:	0f59      	lsrs	r1, r3, #29
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	0749      	lsls	r1, r1, #29
 80025d2:	430b      	orrs	r3, r1
 80025d4:	e670      	b.n	80022b8 <__aeabi_dsub+0x384>
 80025d6:	08c0      	lsrs	r0, r0, #3
 80025d8:	077b      	lsls	r3, r7, #29
 80025da:	4303      	orrs	r3, r0
 80025dc:	08fa      	lsrs	r2, r7, #3
 80025de:	e640      	b.n	8002262 <__aeabi_dsub+0x32e>
 80025e0:	464c      	mov	r4, r9
 80025e2:	3920      	subs	r1, #32
 80025e4:	40cc      	lsrs	r4, r1
 80025e6:	4661      	mov	r1, ip
 80025e8:	2920      	cmp	r1, #32
 80025ea:	d006      	beq.n	80025fa <__aeabi_dsub+0x6c6>
 80025ec:	4666      	mov	r6, ip
 80025ee:	2140      	movs	r1, #64	; 0x40
 80025f0:	1b89      	subs	r1, r1, r6
 80025f2:	464e      	mov	r6, r9
 80025f4:	408e      	lsls	r6, r1
 80025f6:	4333      	orrs	r3, r6
 80025f8:	4698      	mov	r8, r3
 80025fa:	4643      	mov	r3, r8
 80025fc:	1e59      	subs	r1, r3, #1
 80025fe:	418b      	sbcs	r3, r1
 8002600:	431c      	orrs	r4, r3
 8002602:	e5d8      	b.n	80021b6 <__aeabi_dsub+0x282>
 8002604:	181c      	adds	r4, r3, r0
 8002606:	4284      	cmp	r4, r0
 8002608:	4180      	sbcs	r0, r0
 800260a:	444f      	add	r7, r9
 800260c:	46ba      	mov	sl, r7
 800260e:	4240      	negs	r0, r0
 8002610:	4482      	add	sl, r0
 8002612:	e6d9      	b.n	80023c8 <__aeabi_dsub+0x494>
 8002614:	4653      	mov	r3, sl
 8002616:	4323      	orrs	r3, r4
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x6e8>
 800261a:	e6cb      	b.n	80023b4 <__aeabi_dsub+0x480>
 800261c:	e614      	b.n	8002248 <__aeabi_dsub+0x314>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff
 8002624:	ff7fffff 	.word	0xff7fffff
 8002628:	000007fe 	.word	0x000007fe
 800262c:	2300      	movs	r3, #0
 800262e:	4a01      	ldr	r2, [pc, #4]	; (8002634 <__aeabi_dsub+0x700>)
 8002630:	001c      	movs	r4, r3
 8002632:	e529      	b.n	8002088 <__aeabi_dsub+0x154>
 8002634:	000007ff 	.word	0x000007ff

08002638 <__aeabi_dcmpun>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	0005      	movs	r5, r0
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <__aeabi_dcmpun+0x38>)
 800263e:	031c      	lsls	r4, r3, #12
 8002640:	0016      	movs	r6, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	030a      	lsls	r2, r1, #12
 8002646:	0049      	lsls	r1, r1, #1
 8002648:	0b12      	lsrs	r2, r2, #12
 800264a:	0d49      	lsrs	r1, r1, #21
 800264c:	0b24      	lsrs	r4, r4, #12
 800264e:	0d5b      	lsrs	r3, r3, #21
 8002650:	4281      	cmp	r1, r0
 8002652:	d008      	beq.n	8002666 <__aeabi_dcmpun+0x2e>
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <__aeabi_dcmpun+0x38>)
 8002656:	2000      	movs	r0, #0
 8002658:	4293      	cmp	r3, r2
 800265a:	d103      	bne.n	8002664 <__aeabi_dcmpun+0x2c>
 800265c:	0020      	movs	r0, r4
 800265e:	4330      	orrs	r0, r6
 8002660:	1e43      	subs	r3, r0, #1
 8002662:	4198      	sbcs	r0, r3
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	2001      	movs	r0, #1
 8002668:	432a      	orrs	r2, r5
 800266a:	d1fb      	bne.n	8002664 <__aeabi_dcmpun+0x2c>
 800266c:	e7f2      	b.n	8002654 <__aeabi_dcmpun+0x1c>
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	000007ff 	.word	0x000007ff

08002674 <__aeabi_d2iz>:
 8002674:	000a      	movs	r2, r1
 8002676:	b530      	push	{r4, r5, lr}
 8002678:	4c13      	ldr	r4, [pc, #76]	; (80026c8 <__aeabi_d2iz+0x54>)
 800267a:	0053      	lsls	r3, r2, #1
 800267c:	0309      	lsls	r1, r1, #12
 800267e:	0005      	movs	r5, r0
 8002680:	0b09      	lsrs	r1, r1, #12
 8002682:	2000      	movs	r0, #0
 8002684:	0d5b      	lsrs	r3, r3, #21
 8002686:	0fd2      	lsrs	r2, r2, #31
 8002688:	42a3      	cmp	r3, r4
 800268a:	dd04      	ble.n	8002696 <__aeabi_d2iz+0x22>
 800268c:	480f      	ldr	r0, [pc, #60]	; (80026cc <__aeabi_d2iz+0x58>)
 800268e:	4283      	cmp	r3, r0
 8002690:	dd02      	ble.n	8002698 <__aeabi_d2iz+0x24>
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <__aeabi_d2iz+0x5c>)
 8002694:	18d0      	adds	r0, r2, r3
 8002696:	bd30      	pop	{r4, r5, pc}
 8002698:	2080      	movs	r0, #128	; 0x80
 800269a:	0340      	lsls	r0, r0, #13
 800269c:	4301      	orrs	r1, r0
 800269e:	480d      	ldr	r0, [pc, #52]	; (80026d4 <__aeabi_d2iz+0x60>)
 80026a0:	1ac0      	subs	r0, r0, r3
 80026a2:	281f      	cmp	r0, #31
 80026a4:	dd08      	ble.n	80026b8 <__aeabi_d2iz+0x44>
 80026a6:	480c      	ldr	r0, [pc, #48]	; (80026d8 <__aeabi_d2iz+0x64>)
 80026a8:	1ac3      	subs	r3, r0, r3
 80026aa:	40d9      	lsrs	r1, r3
 80026ac:	000b      	movs	r3, r1
 80026ae:	4258      	negs	r0, r3
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d1f0      	bne.n	8002696 <__aeabi_d2iz+0x22>
 80026b4:	0018      	movs	r0, r3
 80026b6:	e7ee      	b.n	8002696 <__aeabi_d2iz+0x22>
 80026b8:	4c08      	ldr	r4, [pc, #32]	; (80026dc <__aeabi_d2iz+0x68>)
 80026ba:	40c5      	lsrs	r5, r0
 80026bc:	46a4      	mov	ip, r4
 80026be:	4463      	add	r3, ip
 80026c0:	4099      	lsls	r1, r3
 80026c2:	000b      	movs	r3, r1
 80026c4:	432b      	orrs	r3, r5
 80026c6:	e7f2      	b.n	80026ae <__aeabi_d2iz+0x3a>
 80026c8:	000003fe 	.word	0x000003fe
 80026cc:	0000041d 	.word	0x0000041d
 80026d0:	7fffffff 	.word	0x7fffffff
 80026d4:	00000433 	.word	0x00000433
 80026d8:	00000413 	.word	0x00000413
 80026dc:	fffffbed 	.word	0xfffffbed

080026e0 <__aeabi_i2d>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d016      	beq.n	8002714 <__aeabi_i2d+0x34>
 80026e6:	17c3      	asrs	r3, r0, #31
 80026e8:	18c5      	adds	r5, r0, r3
 80026ea:	405d      	eors	r5, r3
 80026ec:	0fc4      	lsrs	r4, r0, #31
 80026ee:	0028      	movs	r0, r5
 80026f0:	f000 f84c 	bl	800278c <__clzsi2>
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <__aeabi_i2d+0x5c>)
 80026f6:	1a1b      	subs	r3, r3, r0
 80026f8:	280a      	cmp	r0, #10
 80026fa:	dc16      	bgt.n	800272a <__aeabi_i2d+0x4a>
 80026fc:	0002      	movs	r2, r0
 80026fe:	002e      	movs	r6, r5
 8002700:	3215      	adds	r2, #21
 8002702:	4096      	lsls	r6, r2
 8002704:	220b      	movs	r2, #11
 8002706:	1a12      	subs	r2, r2, r0
 8002708:	40d5      	lsrs	r5, r2
 800270a:	055b      	lsls	r3, r3, #21
 800270c:	032d      	lsls	r5, r5, #12
 800270e:	0b2d      	lsrs	r5, r5, #12
 8002710:	0d5b      	lsrs	r3, r3, #21
 8002712:	e003      	b.n	800271c <__aeabi_i2d+0x3c>
 8002714:	2400      	movs	r4, #0
 8002716:	2300      	movs	r3, #0
 8002718:	2500      	movs	r5, #0
 800271a:	2600      	movs	r6, #0
 800271c:	051b      	lsls	r3, r3, #20
 800271e:	432b      	orrs	r3, r5
 8002720:	07e4      	lsls	r4, r4, #31
 8002722:	4323      	orrs	r3, r4
 8002724:	0030      	movs	r0, r6
 8002726:	0019      	movs	r1, r3
 8002728:	bd70      	pop	{r4, r5, r6, pc}
 800272a:	380b      	subs	r0, #11
 800272c:	4085      	lsls	r5, r0
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	032d      	lsls	r5, r5, #12
 8002732:	2600      	movs	r6, #0
 8002734:	0b2d      	lsrs	r5, r5, #12
 8002736:	0d5b      	lsrs	r3, r3, #21
 8002738:	e7f0      	b.n	800271c <__aeabi_i2d+0x3c>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	0000041e 	.word	0x0000041e

08002740 <__aeabi_ui2d>:
 8002740:	b510      	push	{r4, lr}
 8002742:	1e04      	subs	r4, r0, #0
 8002744:	d010      	beq.n	8002768 <__aeabi_ui2d+0x28>
 8002746:	f000 f821 	bl	800278c <__clzsi2>
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <__aeabi_ui2d+0x48>)
 800274c:	1a1b      	subs	r3, r3, r0
 800274e:	280a      	cmp	r0, #10
 8002750:	dc11      	bgt.n	8002776 <__aeabi_ui2d+0x36>
 8002752:	220b      	movs	r2, #11
 8002754:	0021      	movs	r1, r4
 8002756:	1a12      	subs	r2, r2, r0
 8002758:	40d1      	lsrs	r1, r2
 800275a:	3015      	adds	r0, #21
 800275c:	030a      	lsls	r2, r1, #12
 800275e:	055b      	lsls	r3, r3, #21
 8002760:	4084      	lsls	r4, r0
 8002762:	0b12      	lsrs	r2, r2, #12
 8002764:	0d5b      	lsrs	r3, r3, #21
 8002766:	e001      	b.n	800276c <__aeabi_ui2d+0x2c>
 8002768:	2300      	movs	r3, #0
 800276a:	2200      	movs	r2, #0
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	4313      	orrs	r3, r2
 8002770:	0020      	movs	r0, r4
 8002772:	0019      	movs	r1, r3
 8002774:	bd10      	pop	{r4, pc}
 8002776:	0022      	movs	r2, r4
 8002778:	380b      	subs	r0, #11
 800277a:	4082      	lsls	r2, r0
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	0312      	lsls	r2, r2, #12
 8002780:	2400      	movs	r4, #0
 8002782:	0b12      	lsrs	r2, r2, #12
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	e7f1      	b.n	800276c <__aeabi_ui2d+0x2c>
 8002788:	0000041e 	.word	0x0000041e

0800278c <__clzsi2>:
 800278c:	211c      	movs	r1, #28
 800278e:	2301      	movs	r3, #1
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	4298      	cmp	r0, r3
 8002794:	d301      	bcc.n	800279a <__clzsi2+0xe>
 8002796:	0c00      	lsrs	r0, r0, #16
 8002798:	3910      	subs	r1, #16
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	4298      	cmp	r0, r3
 800279e:	d301      	bcc.n	80027a4 <__clzsi2+0x18>
 80027a0:	0a00      	lsrs	r0, r0, #8
 80027a2:	3908      	subs	r1, #8
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	4298      	cmp	r0, r3
 80027a8:	d301      	bcc.n	80027ae <__clzsi2+0x22>
 80027aa:	0900      	lsrs	r0, r0, #4
 80027ac:	3904      	subs	r1, #4
 80027ae:	a202      	add	r2, pc, #8	; (adr r2, 80027b8 <__clzsi2+0x2c>)
 80027b0:	5c10      	ldrb	r0, [r2, r0]
 80027b2:	1840      	adds	r0, r0, r1
 80027b4:	4770      	bx	lr
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	02020304 	.word	0x02020304
 80027bc:	01010101 	.word	0x01010101
	...

080027c8 <__clzdi2>:
 80027c8:	b510      	push	{r4, lr}
 80027ca:	2900      	cmp	r1, #0
 80027cc:	d103      	bne.n	80027d6 <__clzdi2+0xe>
 80027ce:	f7ff ffdd 	bl	800278c <__clzsi2>
 80027d2:	3020      	adds	r0, #32
 80027d4:	e002      	b.n	80027dc <__clzdi2+0x14>
 80027d6:	0008      	movs	r0, r1
 80027d8:	f7ff ffd8 	bl	800278c <__clzsi2>
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	46c0      	nop			; (mov r8, r8)

080027e0 <statechart_init>:
static statechart_event statechart_get_next_event(Statechart* handle);
static sc_boolean statechart_dispatch_next_event(Statechart* handle);


void statechart_init(Statechart* handle)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	sc_integer i;
	
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e007      	b.n	80027fe <statechart_init+0x1e>
	{
		handle->stateConfVector[i] = Statechart_last_state;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	18d3      	adds	r3, r2, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	ddf4      	ble.n	80027ee <statechart_init+0xe>
	}
	
				
	clear_in_events(handle);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f844 	bl	8002894 <clear_in_events>
	
	
	/* Default init sequence for statechart Statechart */
	statechart_set_i(handle, 1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2101      	movs	r1, #1
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f8e0 	bl	80029d6 <statechart_set_i>
	
	handle->isExecuting = bool_false;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	739a      	strb	r2, [r3, #14]
	statechart_eventqueue_init(&handle->in_event_queue, handle->in_buffer, STATECHART_IN_EVENTQUEUE_BUFFERSIZE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3310      	adds	r3, #16
 8002820:	0018      	movs	r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3324      	adds	r3, #36	; 0x24
 8002826:	2214      	movs	r2, #20
 8002828:	0019      	movs	r1, r3
 800282a:	f000 fa6c 	bl	8002d06 <statechart_eventqueue_init>
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b004      	add	sp, #16
 8002834:	bd80      	pop	{r7, pc}

08002836 <statechart_enter>:

void statechart_enter(Statechart* handle)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	/* Activates the state machine. */
	if (handle->isExecuting == bool_true)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7b9b      	ldrb	r3, [r3, #14]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d122      	bne.n	800288c <statechart_enter+0x56>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	739a      	strb	r2, [r3, #14]
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default(handle);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f92d 	bl	8002aae <enseq_main_region_default>
	handle->doCompletion = bool_false;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	735a      	strb	r2, [r3, #13]
	do
	{ 
		if (handle->completed == bool_true)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7b1b      	ldrb	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <statechart_enter+0x32>
		{ 
			handle->doCompletion = bool_true;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	735a      	strb	r2, [r3, #13]
		} 
		handle->completed = bool_false;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	731a      	strb	r2, [r3, #12]
		micro_step(handle);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f81d 	bl	80028b0 <micro_step>
		handle->doCompletion = bool_false;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	735a      	strb	r2, [r3, #13]
	} while (handle->completed == bool_true);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7b1b      	ldrb	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ea      	bne.n	800285a <statechart_enter+0x24>
	handle->isExecuting = bool_false;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	739a      	strb	r2, [r3, #14]
 800288a:	e000      	b.n	800288e <statechart_enter+0x58>
		return;
 800288c:	46c0      	nop			; (mov r8, r8)
}
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <clear_in_events>:
		}
		return result;
	}

static void clear_in_events(Statechart* handle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	handle->iface.TimerInterrupt_raised = bool_false;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	711a      	strb	r2, [r3, #4]
	handle->iface.ButtonPressed_raised = bool_false;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	715a      	strb	r2, [r3, #5]
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <micro_step>:

static void micro_step(Statechart* handle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	switch(handle->stateConfVector[ 0 ])
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d020      	beq.n	8002902 <micro_step+0x52>
 80028c0:	dc27      	bgt.n	8002912 <micro_step+0x62>
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d015      	beq.n	80028f2 <micro_step+0x42>
 80028c6:	dc24      	bgt.n	8002912 <micro_step+0x62>
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d002      	beq.n	80028d2 <micro_step+0x22>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d008      	beq.n	80028e2 <micro_step+0x32>
			main_region_Atvaizduoti_react(handle,-1);
			break;
		}
		default: 
			/* do nothing */
			break;
 80028d0:	e01f      	b.n	8002912 <micro_step+0x62>
			main_region_Inicializacija_react(handle,-1);
 80028d2:	2301      	movs	r3, #1
 80028d4:	425a      	negs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0011      	movs	r1, r2
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f92a 	bl	8002b34 <main_region_Inicializacija_react>
			break;
 80028e0:	e018      	b.n	8002914 <micro_step+0x64>
			main_region_Nuskaityti_Duomenis___react(handle,-1);
 80028e2:	2301      	movs	r3, #1
 80028e4:	425a      	negs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0011      	movs	r1, r2
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f957 	bl	8002b9e <main_region_Nuskaityti_Duomenis___react>
			break;
 80028f0:	e010      	b.n	8002914 <micro_step+0x64>
			main_region_Suvidurkinti_react(handle,-1);
 80028f2:	2301      	movs	r3, #1
 80028f4:	425a      	negs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0011      	movs	r1, r2
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f9a6 	bl	8002c4c <main_region_Suvidurkinti_react>
			break;
 8002900:	e008      	b.n	8002914 <micro_step+0x64>
			main_region_Atvaizduoti_react(handle,-1);
 8002902:	2301      	movs	r3, #1
 8002904:	425a      	negs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f9c6 	bl	8002c9c <main_region_Atvaizduoti_react>
			break;
 8002910:	e000      	b.n	8002914 <micro_step+0x64>
			break;
 8002912:	46c0      	nop			; (mov r8, r8)
	}
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <run_cycle>:

static void run_cycle(Statechart* handle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	/* Performs a 'run to completion' step. */
	if (handle->isExecuting == bool_true)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7b9b      	ldrb	r3, [r3, #14]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d12c      	bne.n	8002986 <run_cycle+0x6a>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	739a      	strb	r2, [r3, #14]
	statechart_dispatch_next_event(handle);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fad7 	bl	8002ee8 <statechart_dispatch_next_event>
	do
	{ 
		handle->doCompletion = bool_false;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	735a      	strb	r2, [r3, #13]
		do
		{ 
			if (handle->completed == bool_true)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7b1b      	ldrb	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <run_cycle+0x32>
			{ 
				handle->doCompletion = bool_true;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	735a      	strb	r2, [r3, #13]
			} 
			handle->completed = bool_false;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	731a      	strb	r2, [r3, #12]
			micro_step(handle);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f7ff ffaa 	bl	80028b0 <micro_step>
			handle->doCompletion = bool_false;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	735a      	strb	r2, [r3, #13]
		} while (handle->completed == bool_true);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7b1b      	ldrb	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ea      	bne.n	8002940 <run_cycle+0x24>
		clear_in_events(handle);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff91 	bl	8002894 <clear_in_events>
	} while (statechart_dispatch_next_event(handle) == bool_true);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fab7 	bl	8002ee8 <statechart_dispatch_next_event>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d1dd      	bne.n	800293a <run_cycle+0x1e>
	handle->isExecuting = bool_false;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	739a      	strb	r2, [r3, #14]
 8002984:	e000      	b.n	8002988 <run_cycle+0x6c>
		return;
 8002986:	46c0      	nop			; (mov r8, r8)
}
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}

0800298e <statechart_raise_timerInterrupt>:


void statechart_raise_timerInterrupt(Statechart* handle)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_TimerInterrupt);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3310      	adds	r3, #16
 800299a:	2101      	movs	r1, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f000 fa4d 	bl	8002e3c <statechart_add_event_to_queue>
	run_cycle(handle);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff ffb9 	bl	800291c <run_cycle>
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <statechart_raise_buttonPressed>:

void statechart_raise_buttonPressed(Statechart* handle)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_ButtonPressed);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3310      	adds	r3, #16
 80029be:	2102      	movs	r1, #2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fa3b 	bl	8002e3c <statechart_add_event_to_queue>
	run_cycle(handle);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff ffa7 	bl	800291c <run_cycle>
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b002      	add	sp, #8
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <statechart_set_i>:
sc_integer statechart_get_i(const Statechart* handle)
{
	return handle->iface.i;
}
void statechart_set_i(Statechart* handle, sc_integer value)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
	handle->iface.i = value;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}

080029ee <enact_main_region_Inicializacija>:

/* implementations of all internal functions */

/* Entry action for state 'Inicializacija'. */
static void enact_main_region_Inicializacija(Statechart* handle)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Inicializacija'. */
	statechart_initialize(handle);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f001 fb13 	bl	8004024 <statechart_initialize>
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <enact_main_region_Nuskaityti_Duomenis__>:

/* Entry action for state 'Nuskaityti Duomenis  '. */
static void enact_main_region_Nuskaityti_Duomenis__(Statechart* handle)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Nuskaityti Duomenis  '. */
	statechart_readSensor(handle);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f001 fb81 	bl	8004118 <statechart_readSensor>
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <enact_main_region_Suvidurkinti>:

static void enact_main_region_Suvidurkinti(Statechart* handle)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Suvidurkinti'. */
	statechart_calculateAverage(handle);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f001 fbe9 	bl	8004200 <statechart_calculateAverage>
	handle->completed = bool_true;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	731a      	strb	r2, [r3, #12]
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <enact_main_region_Atvaizduoti>:

/* Entry action for state 'Atvaizduoti'. */
static void enact_main_region_Atvaizduoti(Statechart* handle)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Atvaizduoti'. */
	statechart_display(handle);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f001 fc6e 	bl	8004328 <statechart_display>
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <enseq_main_region_Inicializacija_default>:

/* 'default' enter sequence for state Inicializacija */
static void enseq_main_region_Inicializacija_default(Statechart* handle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Inicializacija */
	enact_main_region_Inicializacija(handle);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ffc5 	bl	80029ee <enact_main_region_Inicializacija>
	handle->stateConfVector[0] = Statechart_main_region_Inicializacija;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <enseq_main_region_Nuskaityti_Duomenis___default>:

/* 'default' enter sequence for state Nuskaityti Duomenis   */
static void enseq_main_region_Nuskaityti_Duomenis___default(Statechart* handle)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Nuskaityti Duomenis   */
	enact_main_region_Nuskaityti_Duomenis__(handle);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff ffc2 	bl	8002a06 <enact_main_region_Nuskaityti_Duomenis__>
	handle->stateConfVector[0] = Statechart_main_region_Nuskaityti_Duomenis__;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <enseq_main_region_Suvidurkinti_default>:

/* 'default' enter sequence for state Suvidurkinti */
static void enseq_main_region_Suvidurkinti_default(Statechart* handle)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Suvidurkinti */
	enact_main_region_Suvidurkinti(handle);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff ffbf 	bl	8002a1e <enact_main_region_Suvidurkinti>
	handle->stateConfVector[0] = Statechart_main_region_Suvidurkinti;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	701a      	strb	r2, [r3, #0]
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}

08002aae <enseq_main_region_default>:

/* 'default' enter sequence for region main region */
static void enseq_main_region_default(Statechart* handle)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default(handle);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 f825 	bl	8002b08 <react_main_region__entry_Default>
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <exseq_main_region_Inicializacija>:

/* Default exit sequence for state Inicializacija */
static void exseq_main_region_Inicializacija(Statechart* handle)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Inicializacija */
	handle->stateConfVector[0] = Statechart_last_state;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <exseq_main_region_Nuskaityti_Duomenis__>:

/* Default exit sequence for state Nuskaityti Duomenis   */
static void exseq_main_region_Nuskaityti_Duomenis__(Statechart* handle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Nuskaityti Duomenis   */
	handle->stateConfVector[0] = Statechart_last_state;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <exseq_main_region_Atvaizduoti>:
	handle->stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state Atvaizduoti */
static void exseq_main_region_Atvaizduoti(Statechart* handle)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Atvaizduoti */
	handle->stateConfVector[0] = Statechart_last_state;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <react_main_region__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(Statechart* handle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_main_region_Inicializacija_default(handle);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff ff9e 	bl	8002a54 <enseq_main_region_Inicializacija_default>
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <react>:


static sc_integer react(Statechart* handle, const sc_integer transitioned_before)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	/* State machine reactions. */
	SC_UNUSED(handle);
	return transitioned_before;
 8002b2a:	683b      	ldr	r3, [r7, #0]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <main_region_Inicializacija_react>:

static sc_integer main_region_Inicializacija_react(Statechart* handle, const sc_integer transitioned_before)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	/* The reactions of state Inicializacija. */
 			sc_integer transitioned_after = transitioned_before;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7b5b      	ldrb	r3, [r3, #13]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4053      	eors	r3, r2
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d021      	beq.n	8002b94 <main_region_Inicializacija_react+0x60>
	{ 
		if ((transitioned_after) < (0))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da12      	bge.n	8002b7c <main_region_Inicializacija_react+0x48>
		{ 
			if (handle->iface.ButtonPressed_raised == bool_true)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	795b      	ldrb	r3, [r3, #5]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <main_region_Inicializacija_react+0x48>
			{ 
				exseq_main_region_Inicializacija(handle);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff ffb0 	bl	8002ac6 <exseq_main_region_Inicializacija>
				enseq_main_region_Nuskaityti_Duomenis___default(handle);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff ff82 	bl	8002a72 <enseq_main_region_Nuskaityti_Duomenis___default>
				react(handle,0);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2100      	movs	r1, #0
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff ffd4 	bl	8002b20 <react>
				transitioned_after = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <main_region_Inicializacija_react+0x60>
		{ 
			/* then execute local reactions. */
			transitioned_after = react(handle,transitioned_before);
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff ffc8 	bl	8002b20 <react>
 8002b90:	0003      	movs	r3, r0
 8002b92:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 8002b94:	68fb      	ldr	r3, [r7, #12]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <main_region_Nuskaityti_Duomenis___react>:

static sc_integer main_region_Nuskaityti_Duomenis___react(Statechart* handle, const sc_integer transitioned_before)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	/* The reactions of state Nuskaityti Duomenis  . */
 			sc_integer transitioned_after = transitioned_before;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7b5b      	ldrb	r3, [r3, #13]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4053      	eors	r3, r2
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d043      	beq.n	8002c42 <main_region_Nuskaityti_Duomenis___react+0xa4>
	{ 
		if ((transitioned_after) < (0))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da34      	bge.n	8002c2a <main_region_Nuskaityti_Duomenis___react+0x8c>
		{ 
			if (((handle->iface.TimerInterrupt_raised) == bool_true) && (((handle->iface.i) < (5)) == bool_true))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	791b      	ldrb	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d018      	beq.n	8002bfa <main_region_Nuskaityti_Duomenis___react+0x5c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	dc14      	bgt.n	8002bfa <main_region_Nuskaityti_Duomenis___react+0x5c>
			{ 
				exseq_main_region_Nuskaityti_Duomenis__(handle);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff ff82 	bl	8002adc <exseq_main_region_Nuskaityti_Duomenis__>
				handle->iface.i++;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
				enseq_main_region_Nuskaityti_Duomenis___default(handle);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff ff44 	bl	8002a72 <enseq_main_region_Nuskaityti_Duomenis___default>
				react(handle,0);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2100      	movs	r1, #0
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7ff ff96 	bl	8002b20 <react>
				transitioned_after = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e017      	b.n	8002c2a <main_region_Nuskaityti_Duomenis___react+0x8c>
			}  else
			{
				if ((handle->iface.i) >= (5))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	dd13      	ble.n	8002c2a <main_region_Nuskaityti_Duomenis___react+0x8c>
				{ 
					exseq_main_region_Nuskaityti_Duomenis__(handle);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff ff69 	bl	8002adc <exseq_main_region_Nuskaityti_Duomenis__>
					statechart_set_i(handle, 1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff fee1 	bl	80029d6 <statechart_set_i>
					enseq_main_region_Suvidurkinti_default(handle);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff ff3a 	bl	8002a90 <enseq_main_region_Suvidurkinti_default>
					react(handle,0);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2100      	movs	r1, #0
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff ff7d 	bl	8002b20 <react>
					transitioned_after = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d107      	bne.n	8002c42 <main_region_Nuskaityti_Duomenis___react+0xa4>
		{ 
			/* then execute local reactions. */
			transitioned_after = react(handle,transitioned_before);
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff ff71 	bl	8002b20 <react>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <main_region_Suvidurkinti_react>:

static sc_integer main_region_Suvidurkinti_react(Statechart* handle, const sc_integer transitioned_before)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
	/* The reactions of state Suvidurkinti. */
 			sc_integer transitioned_after = transitioned_before;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7b5b      	ldrb	r3, [r3, #13]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00f      	beq.n	8002c82 <main_region_Suvidurkinti_react+0x36>
	{ 
		/* Default exit sequence for state Suvidurkinti */
		handle->stateConfVector[0] = Statechart_last_state;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
		/* 'default' enter sequence for state Atvaizduoti */
		enact_main_region_Atvaizduoti(handle);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff fee6 	bl	8002a3c <enact_main_region_Atvaizduoti>
		handle->stateConfVector[0] = Statechart_main_region_Atvaizduoti;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2204      	movs	r2, #4
 8002c74:	701a      	strb	r2, [r3, #0]
		react(handle,0);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f7ff ff50 	bl	8002b20 <react>
 8002c80:	e007      	b.n	8002c92 <main_region_Suvidurkinti_react+0x46>
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = react(handle,transitioned_before);
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff ff49 	bl	8002b20 <react>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	60fb      	str	r3, [r7, #12]
	}
	return transitioned_after;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <main_region_Atvaizduoti_react>:

static sc_integer main_region_Atvaizduoti_react(Statechart* handle, const sc_integer transitioned_before)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
	/* The reactions of state Atvaizduoti. */
 			sc_integer transitioned_after = transitioned_before;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7b5b      	ldrb	r3, [r3, #13]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4053      	eors	r3, r2
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <main_region_Atvaizduoti_react+0x60>
	{ 
		if ((transitioned_after) < (0))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da12      	bge.n	8002ce4 <main_region_Atvaizduoti_react+0x48>
		{ 
			if (handle->iface.TimerInterrupt_raised == bool_true)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	791b      	ldrb	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00e      	beq.n	8002ce4 <main_region_Atvaizduoti_react+0x48>
			{ 
				exseq_main_region_Atvaizduoti(handle);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff12 	bl	8002af2 <exseq_main_region_Atvaizduoti>
				enseq_main_region_Nuskaityti_Duomenis___default(handle);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff fece 	bl	8002a72 <enseq_main_region_Nuskaityti_Duomenis___default>
				react(handle,0);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff ff20 	bl	8002b20 <react>
				transitioned_after = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <main_region_Atvaizduoti_react+0x60>
		{ 
			/* then execute local reactions. */
			transitioned_after = react(handle,transitioned_before);
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0011      	movs	r1, r2
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff ff14 	bl	8002b20 <react>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <statechart_eventqueue_init>:




static void statechart_eventqueue_init(statechart_eventqueue * eq, statechart_event *buffer, sc_integer capacity)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
	eq->events = buffer;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	601a      	str	r2, [r3, #0]
	eq->capacity = capacity;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	605a      	str	r2, [r3, #4]
	eq->push_index = 0;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
	eq->pop_index = 0;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
	eq->size = 0;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b004      	add	sp, #16
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <statechart_eventqueue_size>:

static sc_integer statechart_eventqueue_size(statechart_eventqueue * eq)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	return eq->size;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <statechart_eventqueue_pop>:

static statechart_event statechart_eventqueue_pop(statechart_eventqueue * eq)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	statechart_event event;
	if(statechart_eventqueue_size(eq) <= 0) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff ffee 	bl	8002d38 <statechart_eventqueue_size>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	dc06      	bgt.n	8002d6e <statechart_eventqueue_pop+0x22>
		statechart_event_init(&event, Statechart_invalid_event);
 8002d60:	230c      	movs	r3, #12
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2100      	movs	r1, #0
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f859 	bl	8002e1e <statechart_event_init>
 8002d6c:	e01d      	b.n	8002daa <statechart_eventqueue_pop+0x5e>
	}
	else {
		event = eq->events[eq->pop_index];
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	18d2      	adds	r2, r2, r3
 8002d78:	230c      	movs	r3, #12
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	701a      	strb	r2, [r3, #0]
		
		if(eq->pop_index < eq->capacity - 1) {
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	da05      	bge.n	8002d9a <statechart_eventqueue_pop+0x4e>
			eq->pop_index++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e002      	b.n	8002da0 <statechart_eventqueue_pop+0x54>
		} 
		else {
			eq->pop_index = 0;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
		}
		eq->size--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]
	}
	return event;
 8002daa:	230c      	movs	r3, #12
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
}
 8002db0:	1c18      	adds	r0, r3, #0
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b004      	add	sp, #16
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <statechart_eventqueue_push>:
static sc_boolean statechart_eventqueue_push(statechart_eventqueue * eq, statechart_event ev)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	7019      	strb	r1, [r3, #0]
	if(statechart_eventqueue_size(eq) == eq->capacity) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7ff ffb6 	bl	8002d38 <statechart_eventqueue_size>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d101      	bne.n	8002dda <statechart_eventqueue_push+0x22>
		return bool_false;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e01d      	b.n	8002e16 <statechart_eventqueue_push+0x5e>
	}
	else {
		eq->events[eq->push_index] = ev;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	18d3      	adds	r3, r2, r3
 8002de4:	003a      	movs	r2, r7
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
		
		if(eq->push_index < eq->capacity - 1) {
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	429a      	cmp	r2, r3
 8002df6:	da05      	bge.n	8002e04 <statechart_eventqueue_push+0x4c>
			eq->push_index++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	e002      	b.n	8002e0a <statechart_eventqueue_push+0x52>
		}
		else {
			eq->push_index = 0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
		}
		eq->size++;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	611a      	str	r2, [r3, #16]
		
		return bool_true;
 8002e14:	2301      	movs	r3, #1
	}
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b002      	add	sp, #8
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <statechart_event_init>:
static void statechart_event_init(statechart_event * ev, StatechartEventID name)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	000a      	movs	r2, r1
 8002e28:	1cfb      	adds	r3, r7, #3
 8002e2a:	701a      	strb	r2, [r3, #0]
	ev->name = name;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1cfa      	adds	r2, r7, #3
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	701a      	strb	r2, [r3, #0]
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <statechart_add_event_to_queue>:

static void statechart_add_event_to_queue(statechart_eventqueue * eq, StatechartEventID name)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	000a      	movs	r2, r1
 8002e46:	1cfb      	adds	r3, r7, #3
 8002e48:	701a      	strb	r2, [r3, #0]
	statechart_event event;
	statechart_event_init(&event, name);
 8002e4a:	1cfb      	adds	r3, r7, #3
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	240c      	movs	r4, #12
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	0011      	movs	r1, r2
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff ffe2 	bl	8002e1e <statechart_event_init>
	statechart_eventqueue_push(eq, event);
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	1c11      	adds	r1, r2, #0
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff ffa8 	bl	8002db8 <statechart_eventqueue_push>
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b005      	add	sp, #20
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <statechart_dispatch_event>:

static sc_boolean statechart_dispatch_event(Statechart* handle, const statechart_event * event) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
	switch(event->name) {
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d002      	beq.n	8002e88 <statechart_dispatch_event+0x18>
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d005      	beq.n	8002e92 <statechart_dispatch_event+0x22>
 8002e86:	e009      	b.n	8002e9c <statechart_dispatch_event+0x2c>
		case Statechart_TimerInterrupt:
		{
			handle->iface.TimerInterrupt_raised = bool_true;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	711a      	strb	r2, [r3, #4]
			return bool_true;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e005      	b.n	8002e9e <statechart_dispatch_event+0x2e>
		}
		case Statechart_ButtonPressed:
		{
			handle->iface.ButtonPressed_raised = bool_true;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	715a      	strb	r2, [r3, #5]
			return bool_true;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <statechart_dispatch_event+0x2e>
		}
		default:
			return bool_false;
 8002e9c:	2300      	movs	r3, #0
	}
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <statechart_get_next_event>:

static statechart_event statechart_get_next_event(Statechart* handle)
{
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
	statechart_event next_event;
	statechart_event_init(&next_event, Statechart_invalid_event);
 8002eae:	240c      	movs	r4, #12
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff ffb2 	bl	8002e1e <statechart_event_init>
	if(statechart_eventqueue_size(&(handle->in_event_queue)) > 0) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff ff3a 	bl	8002d38 <statechart_eventqueue_size>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	dd08      	ble.n	8002eda <statechart_get_next_event+0x34>
		next_event = statechart_eventqueue_pop(&(handle->in_event_queue));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3310      	adds	r3, #16
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff ff3d 	bl	8002d4c <statechart_eventqueue_pop>
 8002ed2:	1c03      	adds	r3, r0, #0
 8002ed4:	1c1a      	adds	r2, r3, #0
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	701a      	strb	r2, [r3, #0]
	}
	return next_event;
 8002eda:	230c      	movs	r3, #12
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	781b      	ldrb	r3, [r3, #0]
}
 8002ee0:	1c18      	adds	r0, r3, #0
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b005      	add	sp, #20
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <statechart_dispatch_next_event>:

static sc_boolean statechart_dispatch_next_event(Statechart* handle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	statechart_event nextEvent;
	nextEvent = statechart_get_next_event(handle);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff ffd7 	bl	8002ea6 <statechart_get_next_event>
 8002ef8:	1c03      	adds	r3, r0, #0
 8002efa:	1c1a      	adds	r2, r3, #0
 8002efc:	210c      	movs	r1, #12
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	701a      	strb	r2, [r3, #0]
	return statechart_dispatch_event(handle, &nextEvent);
 8002f02:	187a      	adds	r2, r7, r1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff ffb1 	bl	8002e70 <statechart_dispatch_event>
 8002f0e:	0003      	movs	r3, r0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	9302      	str	r3, [sp, #8]
 8002f26:	2301      	movs	r3, #1
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	240f      	movs	r4, #15
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2301      	movs	r3, #1
 8002f32:	2275      	movs	r2, #117	; 0x75
 8002f34:	21d0      	movs	r1, #208	; 0xd0
 8002f36:	f002 f939 	bl	80051ac <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b68      	cmp	r3, #104	; 0x68
 8002f40:	d144      	bne.n	8002fcc <MPU6050_Init+0xb4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002f42:	210e      	movs	r1, #14
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002f4a:	2364      	movs	r3, #100	; 0x64
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	9302      	str	r3, [sp, #8]
 8002f50:	2301      	movs	r3, #1
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	000c      	movs	r4, r1
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	226b      	movs	r2, #107	; 0x6b
 8002f5e:	21d0      	movs	r1, #208	; 0xd0
 8002f60:	f001 fff6 	bl	8004f50 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002f64:	0021      	movs	r1, r4
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2207      	movs	r2, #7
 8002f6a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002f6c:	2364      	movs	r3, #100	; 0x64
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	2301      	movs	r3, #1
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	000c      	movs	r4, r1
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2219      	movs	r2, #25
 8002f80:	21d0      	movs	r1, #208	; 0xd0
 8002f82:	f001 ffe5 	bl	8004f50 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002f86:	0021      	movs	r1, r4
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002f8e:	2364      	movs	r3, #100	; 0x64
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	9302      	str	r3, [sp, #8]
 8002f94:	2301      	movs	r3, #1
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	000c      	movs	r4, r1
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	221c      	movs	r2, #28
 8002fa2:	21d0      	movs	r1, #208	; 0xd0
 8002fa4:	f001 ffd4 	bl	8004f50 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002fa8:	0021      	movs	r1, r4
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002fb0:	2364      	movs	r3, #100	; 0x64
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	9302      	str	r3, [sp, #8]
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	221b      	movs	r2, #27
 8002fc2:	21d0      	movs	r1, #208	; 0xd0
 8002fc4:	f001 ffc4 	bl	8004f50 <HAL_I2C_Mem_Write>
        return 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <MPU6050_Init+0xb6>
    }
    return 1;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b005      	add	sp, #20
 8002fd4:	bd90      	pop	{r4, r7, pc}
	...

08002fd8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	b099      	sub	sp, #100	; 0x64
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	6178      	str	r0, [r7, #20]
 8002fe0:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002fe2:	2364      	movs	r3, #100	; 0x64
 8002fe4:	6978      	ldr	r0, [r7, #20]
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	230e      	movs	r3, #14
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	2408      	movs	r4, #8
 8002fee:	2510      	movs	r5, #16
 8002ff0:	1963      	adds	r3, r4, r5
 8002ff2:	19db      	adds	r3, r3, r7
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	223b      	movs	r2, #59	; 0x3b
 8002ffa:	21d0      	movs	r1, #208	; 0xd0
 8002ffc:	f002 f8d6 	bl	80051ac <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003000:	0020      	movs	r0, r4
 8003002:	0029      	movs	r1, r5
 8003004:	1843      	adds	r3, r0, r1
 8003006:	19db      	adds	r3, r3, r7
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	b21a      	sxth	r2, r3
 800300e:	1843      	adds	r3, r0, r1
 8003010:	19db      	adds	r3, r3, r7
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	b21b      	sxth	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b21a      	sxth	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800301e:	1843      	adds	r3, r0, r1
 8003020:	19db      	adds	r3, r3, r7
 8003022:	789b      	ldrb	r3, [r3, #2]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	b21a      	sxth	r2, r3
 8003028:	1843      	adds	r3, r0, r1
 800302a:	19db      	adds	r3, r3, r7
 800302c:	78db      	ldrb	r3, [r3, #3]
 800302e:	b21b      	sxth	r3, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	b21a      	sxth	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003038:	1843      	adds	r3, r0, r1
 800303a:	19db      	adds	r3, r3, r7
 800303c:	791b      	ldrb	r3, [r3, #4]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	b21a      	sxth	r2, r3
 8003042:	1843      	adds	r3, r0, r1
 8003044:	19db      	adds	r3, r3, r7
 8003046:	795b      	ldrb	r3, [r3, #5]
 8003048:	b21b      	sxth	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	b21a      	sxth	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003052:	000d      	movs	r5, r1
 8003054:	1843      	adds	r3, r0, r1
 8003056:	19db      	adds	r3, r3, r7
 8003058:	799b      	ldrb	r3, [r3, #6]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	b219      	sxth	r1, r3
 800305e:	1943      	adds	r3, r0, r5
 8003060:	19db      	adds	r3, r3, r7
 8003062:	79db      	ldrb	r3, [r3, #7]
 8003064:	b21a      	sxth	r2, r3
 8003066:	2436      	movs	r4, #54	; 0x36
 8003068:	1963      	adds	r3, r4, r5
 800306a:	19db      	adds	r3, r3, r7
 800306c:	430a      	orrs	r2, r1
 800306e:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003070:	0001      	movs	r1, r0
 8003072:	194b      	adds	r3, r1, r5
 8003074:	19db      	adds	r3, r3, r7
 8003076:	7a1b      	ldrb	r3, [r3, #8]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b21a      	sxth	r2, r3
 800307c:	194b      	adds	r3, r1, r5
 800307e:	19db      	adds	r3, r3, r7
 8003080:	7a5b      	ldrb	r3, [r3, #9]
 8003082:	b21b      	sxth	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	b21a      	sxth	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800308c:	194b      	adds	r3, r1, r5
 800308e:	19db      	adds	r3, r3, r7
 8003090:	7a9b      	ldrb	r3, [r3, #10]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	b21a      	sxth	r2, r3
 8003096:	194b      	adds	r3, r1, r5
 8003098:	19db      	adds	r3, r3, r7
 800309a:	7adb      	ldrb	r3, [r3, #11]
 800309c:	b21b      	sxth	r3, r3
 800309e:	4313      	orrs	r3, r2
 80030a0:	b21a      	sxth	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80030a6:	194b      	adds	r3, r1, r5
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	7b1b      	ldrb	r3, [r3, #12]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	194b      	adds	r3, r1, r5
 80030b2:	19db      	adds	r3, r3, r7
 80030b4:	7b5b      	ldrb	r3, [r3, #13]
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2200      	movs	r2, #0
 80030c4:	5e9b      	ldrsh	r3, [r3, r2]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7ff fb0a 	bl	80026e0 <__aeabi_i2d>
 80030cc:	2200      	movs	r2, #0
 80030ce:	4bac      	ldr	r3, [pc, #688]	; (8003380 <MPU6050_Read_All+0x3a8>)
 80030d0:	f7fe f874 	bl	80011bc <__aeabi_ddiv>
 80030d4:	0002      	movs	r2, r0
 80030d6:	000b      	movs	r3, r1
 80030d8:	6939      	ldr	r1, [r7, #16]
 80030da:	608a      	str	r2, [r1, #8]
 80030dc:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2202      	movs	r2, #2
 80030e2:	5e9b      	ldrsh	r3, [r3, r2]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fafb 	bl	80026e0 <__aeabi_i2d>
 80030ea:	2200      	movs	r2, #0
 80030ec:	4ba4      	ldr	r3, [pc, #656]	; (8003380 <MPU6050_Read_All+0x3a8>)
 80030ee:	f7fe f865 	bl	80011bc <__aeabi_ddiv>
 80030f2:	0002      	movs	r2, r0
 80030f4:	000b      	movs	r3, r1
 80030f6:	6939      	ldr	r1, [r7, #16]
 80030f8:	610a      	str	r2, [r1, #16]
 80030fa:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2204      	movs	r2, #4
 8003100:	5e9b      	ldrsh	r3, [r3, r2]
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff faec 	bl	80026e0 <__aeabi_i2d>
 8003108:	2200      	movs	r2, #0
 800310a:	4b9e      	ldr	r3, [pc, #632]	; (8003384 <MPU6050_Read_All+0x3ac>)
 800310c:	f7fe f856 	bl	80011bc <__aeabi_ddiv>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	6939      	ldr	r1, [r7, #16]
 8003116:	618a      	str	r2, [r1, #24]
 8003118:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800311a:	1963      	adds	r3, r4, r5
 800311c:	19db      	adds	r3, r3, r7
 800311e:	2200      	movs	r2, #0
 8003120:	5e9b      	ldrsh	r3, [r3, r2]
 8003122:	0018      	movs	r0, r3
 8003124:	f7fd fc98 	bl	8000a58 <__aeabi_i2f>
 8003128:	1c03      	adds	r3, r0, #0
 800312a:	4997      	ldr	r1, [pc, #604]	; (8003388 <MPU6050_Read_All+0x3b0>)
 800312c:	1c18      	adds	r0, r3, #0
 800312e:	f7fd fb79 	bl	8000824 <__aeabi_fdiv>
 8003132:	1c03      	adds	r3, r0, #0
 8003134:	4995      	ldr	r1, [pc, #596]	; (800338c <MPU6050_Read_All+0x3b4>)
 8003136:	1c18      	adds	r0, r3, #0
 8003138:	f7fd f9d4 	bl	80004e4 <__aeabi_fadd>
 800313c:	1c03      	adds	r3, r0, #0
 800313e:	1c1a      	adds	r2, r3, #0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2220      	movs	r2, #32
 8003148:	5e9b      	ldrsh	r3, [r3, r2]
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff fac8 	bl	80026e0 <__aeabi_i2d>
 8003150:	2200      	movs	r2, #0
 8003152:	4b8f      	ldr	r3, [pc, #572]	; (8003390 <MPU6050_Read_All+0x3b8>)
 8003154:	f7fe f832 	bl	80011bc <__aeabi_ddiv>
 8003158:	0002      	movs	r2, r0
 800315a:	000b      	movs	r3, r1
 800315c:	6939      	ldr	r1, [r7, #16]
 800315e:	628a      	str	r2, [r1, #40]	; 0x28
 8003160:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2222      	movs	r2, #34	; 0x22
 8003166:	5e9b      	ldrsh	r3, [r3, r2]
 8003168:	0018      	movs	r0, r3
 800316a:	f7ff fab9 	bl	80026e0 <__aeabi_i2d>
 800316e:	2200      	movs	r2, #0
 8003170:	4b87      	ldr	r3, [pc, #540]	; (8003390 <MPU6050_Read_All+0x3b8>)
 8003172:	f7fe f823 	bl	80011bc <__aeabi_ddiv>
 8003176:	0002      	movs	r2, r0
 8003178:	000b      	movs	r3, r1
 800317a:	6939      	ldr	r1, [r7, #16]
 800317c:	630a      	str	r2, [r1, #48]	; 0x30
 800317e:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	5e9b      	ldrsh	r3, [r3, r2]
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff faaa 	bl	80026e0 <__aeabi_i2d>
 800318c:	2200      	movs	r2, #0
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <MPU6050_Read_All+0x3b8>)
 8003190:	f7fe f814 	bl	80011bc <__aeabi_ddiv>
 8003194:	0002      	movs	r2, r0
 8003196:	000b      	movs	r3, r1
 8003198:	6939      	ldr	r1, [r7, #16]
 800319a:	638a      	str	r2, [r1, #56]	; 0x38
 800319c:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800319e:	f001 fb7d 	bl	800489c <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <MPU6050_Read_All+0x3bc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff fac8 	bl	8002740 <__aeabi_ui2d>
 80031b0:	2200      	movs	r2, #0
 80031b2:	4b79      	ldr	r3, [pc, #484]	; (8003398 <MPU6050_Read_All+0x3c0>)
 80031b4:	f7fe f802 	bl	80011bc <__aeabi_ddiv>
 80031b8:	0002      	movs	r2, r0
 80031ba:	000b      	movs	r3, r1
 80031bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 80031c0:	f001 fb6c 	bl	800489c <HAL_GetTick>
 80031c4:	0002      	movs	r2, r0
 80031c6:	4b73      	ldr	r3, [pc, #460]	; (8003394 <MPU6050_Read_All+0x3bc>)
 80031c8:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2200      	movs	r2, #0
 80031ce:	5e9b      	ldrsh	r3, [r3, r2]
 80031d0:	001a      	movs	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2100      	movs	r1, #0
 80031d6:	5e5b      	ldrsh	r3, [r3, r1]
 80031d8:	435a      	muls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2104      	movs	r1, #4
 80031de:	5e5b      	ldrsh	r3, [r3, r1]
 80031e0:	0019      	movs	r1, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2004      	movs	r0, #4
 80031e6:	5e1b      	ldrsh	r3, [r3, r0]
 80031e8:	434b      	muls	r3, r1
 80031ea:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff fa77 	bl	80026e0 <__aeabi_i2d>
 80031f2:	0002      	movs	r2, r0
 80031f4:	000b      	movs	r3, r1
 80031f6:	0010      	movs	r0, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	f005 f903 	bl	8008404 <sqrt>
 80031fe:	0002      	movs	r2, r0
 8003200:	000b      	movs	r3, r1
 8003202:	633a      	str	r2, [r7, #48]	; 0x30
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 8003206:	2200      	movs	r2, #0
 8003208:	2300      	movs	r3, #0
 800320a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800320c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800320e:	f7fd f821 	bl	8000254 <__aeabi_dcmpeq>
 8003212:	1e03      	subs	r3, r0, #0
 8003214:	d118      	bne.n	8003248 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2202      	movs	r2, #2
 800321a:	5e9b      	ldrsh	r3, [r3, r2]
 800321c:	0018      	movs	r0, r3
 800321e:	f7ff fa5f 	bl	80026e0 <__aeabi_i2d>
 8003222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	f7fd ffc9 	bl	80011bc <__aeabi_ddiv>
 800322a:	0002      	movs	r2, r0
 800322c:	000b      	movs	r3, r1
 800322e:	0010      	movs	r0, r2
 8003230:	0019      	movs	r1, r3
 8003232:	f005 f90d 	bl	8008450 <atan>
 8003236:	4a59      	ldr	r2, [pc, #356]	; (800339c <MPU6050_Read_All+0x3c4>)
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <MPU6050_Read_All+0x3c8>)
 800323a:	f7fe fbb9 	bl	80019b0 <__aeabi_dmul>
 800323e:	0002      	movs	r2, r0
 8003240:	000b      	movs	r3, r1
 8003242:	64ba      	str	r2, [r7, #72]	; 0x48
 8003244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003246:	e003      	b.n	8003250 <MPU6050_Read_All+0x278>
    }
    else
    {
        roll = 0.0;
 8003248:	2200      	movs	r2, #0
 800324a:	2300      	movs	r3, #0
 800324c:	64ba      	str	r2, [r7, #72]	; 0x48
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2200      	movs	r2, #0
 8003254:	5e9b      	ldrsh	r3, [r3, r2]
 8003256:	425b      	negs	r3, r3
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff fa41 	bl	80026e0 <__aeabi_i2d>
 800325e:	0004      	movs	r4, r0
 8003260:	000d      	movs	r5, r1
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2204      	movs	r2, #4
 8003266:	5e9b      	ldrsh	r3, [r3, r2]
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff fa39 	bl	80026e0 <__aeabi_i2d>
 800326e:	0002      	movs	r2, r0
 8003270:	000b      	movs	r3, r1
 8003272:	0020      	movs	r0, r4
 8003274:	0029      	movs	r1, r5
 8003276:	f005 f8c1 	bl	80083fc <atan2>
 800327a:	4a48      	ldr	r2, [pc, #288]	; (800339c <MPU6050_Read_All+0x3c4>)
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <MPU6050_Read_All+0x3c8>)
 800327e:	f7fe fb97 	bl	80019b0 <__aeabi_dmul>
 8003282:	0002      	movs	r2, r0
 8003284:	000b      	movs	r3, r1
 8003286:	62ba      	str	r2, [r7, #40]	; 0x28
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800328a:	2200      	movs	r2, #0
 800328c:	4b45      	ldr	r3, [pc, #276]	; (80033a4 <MPU6050_Read_All+0x3cc>)
 800328e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003292:	f7fc ffe5 	bl	8000260 <__aeabi_dcmplt>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d008      	beq.n	80032ac <MPU6050_Read_All+0x2d4>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800329e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032a0:	2200      	movs	r2, #0
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <MPU6050_Read_All+0x3d0>)
 80032a4:	f7fc fff0 	bl	8000288 <__aeabi_dcmpgt>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d110      	bne.n	80032ce <MPU6050_Read_All+0x2f6>
 80032ac:	2200      	movs	r2, #0
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <MPU6050_Read_All+0x3d0>)
 80032b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032b4:	f7fc ffe8 	bl	8000288 <__aeabi_dcmpgt>
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d013      	beq.n	80032e4 <MPU6050_Read_All+0x30c>
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80032c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032c2:	2200      	movs	r2, #0
 80032c4:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <MPU6050_Read_All+0x3cc>)
 80032c6:	f7fc ffcb 	bl	8000260 <__aeabi_dcmplt>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d00a      	beq.n	80032e4 <MPU6050_Read_All+0x30c>
    {
        KalmanY.angle = pitch;
 80032ce:	4937      	ldr	r1, [pc, #220]	; (80033ac <MPU6050_Read_All+0x3d4>)
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	618a      	str	r2, [r1, #24]
 80032d6:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 80032d8:	6939      	ldr	r1, [r7, #16]
 80032da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	650a      	str	r2, [r1, #80]	; 0x50
 80032e0:	654b      	str	r3, [r1, #84]	; 0x54
 80032e2:	e015      	b.n	8003310 <MPU6050_Read_All+0x338>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80032ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80032ee:	4e2f      	ldr	r6, [pc, #188]	; (80033ac <MPU6050_Read_All+0x3d4>)
 80032f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032f4:	9002      	str	r0, [sp, #8]
 80032f6:	9103      	str	r1, [sp, #12]
 80032f8:	9200      	str	r2, [sp, #0]
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	0022      	movs	r2, r4
 80032fe:	002b      	movs	r3, r5
 8003300:	0030      	movs	r0, r6
 8003302:	f000 f857 	bl	80033b4 <Kalman_getAngle>
 8003306:	0002      	movs	r2, r0
 8003308:	000b      	movs	r3, r1
 800330a:	6939      	ldr	r1, [r7, #16]
 800330c:	650a      	str	r2, [r1, #80]	; 0x50
 800330e:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	0011      	movs	r1, r2
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <MPU6050_Read_All+0x3d0>)
 8003324:	68b8      	ldr	r0, [r7, #8]
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	f7fc ffae 	bl	8000288 <__aeabi_dcmpgt>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d00d      	beq.n	800334c <MPU6050_Read_All+0x374>
        DataStruct->Gx = -DataStruct->Gx;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	0011      	movs	r1, r2
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	0609      	lsls	r1, r1, #24
 800333e:	4059      	eors	r1, r3
 8003340:	6079      	str	r1, [r7, #4]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6299      	str	r1, [r3, #40]	; 0x28
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8003354:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8003356:	4e16      	ldr	r6, [pc, #88]	; (80033b0 <MPU6050_Read_All+0x3d8>)
 8003358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800335a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800335c:	9002      	str	r0, [sp, #8]
 800335e:	9103      	str	r1, [sp, #12]
 8003360:	9200      	str	r2, [sp, #0]
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	0022      	movs	r2, r4
 8003366:	002b      	movs	r3, r5
 8003368:	0030      	movs	r0, r6
 800336a:	f000 f823 	bl	80033b4 <Kalman_getAngle>
 800336e:	0002      	movs	r2, r0
 8003370:	000b      	movs	r3, r1
 8003372:	6939      	ldr	r1, [r7, #16]
 8003374:	648a      	str	r2, [r1, #72]	; 0x48
 8003376:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b015      	add	sp, #84	; 0x54
 800337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003380:	40d00000 	.word	0x40d00000
 8003384:	40cc2900 	.word	0x40cc2900
 8003388:	43aa0000 	.word	0x43aa0000
 800338c:	42121eb8 	.word	0x42121eb8
 8003390:	40606000 	.word	0x40606000
 8003394:	20000124 	.word	0x20000124
 8003398:	408f4000 	.word	0x408f4000
 800339c:	1a63c1f8 	.word	0x1a63c1f8
 80033a0:	404ca5dc 	.word	0x404ca5dc
 80033a4:	c0568000 	.word	0xc0568000
 80033a8:	40568000 	.word	0x40568000
 80033ac:	20000048 	.word	0x20000048
 80033b0:	20000000 	.word	0x20000000

080033b4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b093      	sub	sp, #76	; 0x4c
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	603a      	str	r2, [r7, #0]
 80033be:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80033c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80033ca:	f7fe fdb3 	bl	8001f34 <__aeabi_dsub>
 80033ce:	0002      	movs	r2, r0
 80033d0:	000b      	movs	r3, r1
 80033d2:	643a      	str	r2, [r7, #64]	; 0x40
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699c      	ldr	r4, [r3, #24]
 80033da:	69dd      	ldr	r5, [r3, #28]
 80033dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80033e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80033e4:	f7fe fae4 	bl	80019b0 <__aeabi_dmul>
 80033e8:	0002      	movs	r2, r0
 80033ea:	000b      	movs	r3, r1
 80033ec:	0020      	movs	r0, r4
 80033ee:	0029      	movs	r1, r5
 80033f0:	f7fd fb84 	bl	8000afc <__aeabi_dadd>
 80033f4:	0002      	movs	r2, r0
 80033f6:	000b      	movs	r3, r1
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	618a      	str	r2, [r1, #24]
 80033fc:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003402:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003408:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800340a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	f7fe facf 	bl	80019b0 <__aeabi_dmul>
 8003412:	0002      	movs	r2, r0
 8003414:	000b      	movs	r3, r1
 8003416:	0010      	movs	r0, r2
 8003418:	0019      	movs	r1, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	f7fe fd88 	bl	8001f34 <__aeabi_dsub>
 8003424:	0002      	movs	r2, r0
 8003426:	000b      	movs	r3, r1
 8003428:	0010      	movs	r0, r2
 800342a:	0019      	movs	r1, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	f7fe fd7f 	bl	8001f34 <__aeabi_dsub>
 8003436:	0002      	movs	r2, r0
 8003438:	000b      	movs	r3, r1
 800343a:	0010      	movs	r0, r2
 800343c:	0019      	movs	r1, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f7fd fb5a 	bl	8000afc <__aeabi_dadd>
 8003448:	0002      	movs	r2, r0
 800344a:	000b      	movs	r3, r1
 800344c:	0010      	movs	r0, r2
 800344e:	0019      	movs	r1, r3
 8003450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003454:	f7fe faac 	bl	80019b0 <__aeabi_dmul>
 8003458:	0002      	movs	r2, r0
 800345a:	000b      	movs	r3, r1
 800345c:	0020      	movs	r0, r4
 800345e:	0029      	movs	r1, r5
 8003460:	f7fd fb4c 	bl	8000afc <__aeabi_dadd>
 8003464:	0002      	movs	r2, r0
 8003466:	000b      	movs	r3, r1
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	628a      	str	r2, [r1, #40]	; 0x28
 800346c:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003472:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003478:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800347a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800347c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347e:	f7fe fa97 	bl	80019b0 <__aeabi_dmul>
 8003482:	0002      	movs	r2, r0
 8003484:	000b      	movs	r3, r1
 8003486:	0020      	movs	r0, r4
 8003488:	0029      	movs	r1, r5
 800348a:	f7fe fd53 	bl	8001f34 <__aeabi_dsub>
 800348e:	0002      	movs	r2, r0
 8003490:	000b      	movs	r3, r1
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	630a      	str	r2, [r1, #48]	; 0x30
 8003496:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800349c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80034a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80034a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a8:	f7fe fa82 	bl	80019b0 <__aeabi_dmul>
 80034ac:	0002      	movs	r2, r0
 80034ae:	000b      	movs	r3, r1
 80034b0:	0020      	movs	r0, r4
 80034b2:	0029      	movs	r1, r5
 80034b4:	f7fe fd3e 	bl	8001f34 <__aeabi_dsub>
 80034b8:	0002      	movs	r2, r0
 80034ba:	000b      	movs	r3, r1
 80034bc:	68f9      	ldr	r1, [r7, #12]
 80034be:	638a      	str	r2, [r1, #56]	; 0x38
 80034c0:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80034c6:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6898      	ldr	r0, [r3, #8]
 80034cc:	68d9      	ldr	r1, [r3, #12]
 80034ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	f7fe fa6d 	bl	80019b0 <__aeabi_dmul>
 80034d6:	0002      	movs	r2, r0
 80034d8:	000b      	movs	r3, r1
 80034da:	0020      	movs	r0, r4
 80034dc:	0029      	movs	r1, r5
 80034de:	f7fd fb0d 	bl	8000afc <__aeabi_dadd>
 80034e2:	0002      	movs	r2, r0
 80034e4:	000b      	movs	r3, r1
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	640a      	str	r2, [r1, #64]	; 0x40
 80034ea:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80034f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f7fd fb00 	bl	8000afc <__aeabi_dadd>
 80034fc:	0002      	movs	r2, r0
 80034fe:	000b      	movs	r3, r1
 8003500:	63ba      	str	r2, [r7, #56]	; 0x38
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	f7fd fe55 	bl	80011bc <__aeabi_ddiv>
 8003512:	0002      	movs	r2, r0
 8003514:	000b      	movs	r3, r1
 8003516:	2610      	movs	r6, #16
 8003518:	19b9      	adds	r1, r7, r6
 800351a:	600a      	str	r2, [r1, #0]
 800351c:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003522:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	f7fd fe48 	bl	80011bc <__aeabi_ddiv>
 800352c:	0002      	movs	r2, r0
 800352e:	000b      	movs	r3, r1
 8003530:	19b9      	adds	r1, r7, r6
 8003532:	608a      	str	r2, [r1, #8]
 8003534:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	6838      	ldr	r0, [r7, #0]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	f7fe fcf8 	bl	8001f34 <__aeabi_dsub>
 8003544:	0002      	movs	r2, r0
 8003546:	000b      	movs	r3, r1
 8003548:	633a      	str	r2, [r7, #48]	; 0x30
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	699c      	ldr	r4, [r3, #24]
 8003550:	69dd      	ldr	r5, [r3, #28]
 8003552:	19bb      	adds	r3, r7, r6
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355c:	f7fe fa28 	bl	80019b0 <__aeabi_dmul>
 8003560:	0002      	movs	r2, r0
 8003562:	000b      	movs	r3, r1
 8003564:	0020      	movs	r0, r4
 8003566:	0029      	movs	r1, r5
 8003568:	f7fd fac8 	bl	8000afc <__aeabi_dadd>
 800356c:	0002      	movs	r2, r0
 800356e:	000b      	movs	r3, r1
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	618a      	str	r2, [r1, #24]
 8003574:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1c      	ldr	r4, [r3, #32]
 800357a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800357c:	19bb      	adds	r3, r7, r6
 800357e:	6898      	ldr	r0, [r3, #8]
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	f7fe fa13 	bl	80019b0 <__aeabi_dmul>
 800358a:	0002      	movs	r2, r0
 800358c:	000b      	movs	r3, r1
 800358e:	0020      	movs	r0, r4
 8003590:	0029      	movs	r1, r5
 8003592:	f7fd fab3 	bl	8000afc <__aeabi_dadd>
 8003596:	0002      	movs	r2, r0
 8003598:	000b      	movs	r3, r1
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	620a      	str	r2, [r1, #32]
 800359e:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	623a      	str	r2, [r7, #32]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80035b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80035ba:	19bb      	adds	r3, r7, r6
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	f7fe f9f4 	bl	80019b0 <__aeabi_dmul>
 80035c8:	0002      	movs	r2, r0
 80035ca:	000b      	movs	r3, r1
 80035cc:	0020      	movs	r0, r4
 80035ce:	0029      	movs	r1, r5
 80035d0:	f7fe fcb0 	bl	8001f34 <__aeabi_dsub>
 80035d4:	0002      	movs	r2, r0
 80035d6:	000b      	movs	r3, r1
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	628a      	str	r2, [r1, #40]	; 0x28
 80035dc:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80035e2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80035e4:	19bb      	adds	r3, r7, r6
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	6a3a      	ldr	r2, [r7, #32]
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	f7fe f9df 	bl	80019b0 <__aeabi_dmul>
 80035f2:	0002      	movs	r2, r0
 80035f4:	000b      	movs	r3, r1
 80035f6:	0020      	movs	r0, r4
 80035f8:	0029      	movs	r1, r5
 80035fa:	f7fe fc9b 	bl	8001f34 <__aeabi_dsub>
 80035fe:	0002      	movs	r2, r0
 8003600:	000b      	movs	r3, r1
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	630a      	str	r2, [r1, #48]	; 0x30
 8003606:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800360c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800360e:	19bb      	adds	r3, r7, r6
 8003610:	6898      	ldr	r0, [r3, #8]
 8003612:	68d9      	ldr	r1, [r3, #12]
 8003614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	f7fe f9ca 	bl	80019b0 <__aeabi_dmul>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0020      	movs	r0, r4
 8003622:	0029      	movs	r1, r5
 8003624:	f7fe fc86 	bl	8001f34 <__aeabi_dsub>
 8003628:	0002      	movs	r2, r0
 800362a:	000b      	movs	r3, r1
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	638a      	str	r2, [r1, #56]	; 0x38
 8003630:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003636:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003638:	19bb      	adds	r3, r7, r6
 800363a:	6898      	ldr	r0, [r3, #8]
 800363c:	68d9      	ldr	r1, [r3, #12]
 800363e:	6a3a      	ldr	r2, [r7, #32]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f7fe f9b5 	bl	80019b0 <__aeabi_dmul>
 8003646:	0002      	movs	r2, r0
 8003648:	000b      	movs	r3, r1
 800364a:	0020      	movs	r0, r4
 800364c:	0029      	movs	r1, r5
 800364e:	f7fe fc71 	bl	8001f34 <__aeabi_dsub>
 8003652:	0002      	movs	r2, r0
 8003654:	000b      	movs	r3, r1
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	640a      	str	r2, [r1, #64]	; 0x40
 800365a:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	69db      	ldr	r3, [r3, #28]
};
 8003662:	0010      	movs	r0, r2
 8003664:	0019      	movs	r1, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b013      	add	sp, #76	; 0x4c
 800366a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800366c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af04      	add	r7, sp, #16
 800367e:	0002      	movs	r2, r0
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003684:	4808      	ldr	r0, [pc, #32]	; (80036a8 <ssd1306_WriteCommand+0x30>)
 8003686:	2301      	movs	r3, #1
 8003688:	425b      	negs	r3, r3
 800368a:	9302      	str	r3, [sp, #8]
 800368c:	2301      	movs	r3, #1
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2301      	movs	r3, #1
 8003696:	2200      	movs	r2, #0
 8003698:	2178      	movs	r1, #120	; 0x78
 800369a:	f001 fc59 	bl	8004f50 <HAL_I2C_Mem_Write>
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000530 	.word	0x20000530

080036ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4808      	ldr	r0, [pc, #32]	; (80036dc <ssd1306_WriteData+0x30>)
 80036bc:	2201      	movs	r2, #1
 80036be:	4252      	negs	r2, r2
 80036c0:	9202      	str	r2, [sp, #8]
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2301      	movs	r3, #1
 80036ca:	2240      	movs	r2, #64	; 0x40
 80036cc:	2178      	movs	r1, #120	; 0x78
 80036ce:	f001 fc3f 	bl	8004f50 <HAL_I2C_Mem_Write>
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	20000530 	.word	0x20000530

080036e0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80036e4:	f7ff ffc2 	bl	800366c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80036e8:	2064      	movs	r0, #100	; 0x64
 80036ea:	f001 f8e1 	bl	80048b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80036ee:	2000      	movs	r0, #0
 80036f0:	f000 fa02 	bl	8003af8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80036f4:	2020      	movs	r0, #32
 80036f6:	f7ff ffbf 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7ff ffbc 	bl	8003678 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003700:	20b0      	movs	r0, #176	; 0xb0
 8003702:	f7ff ffb9 	bl	8003678 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003706:	20c8      	movs	r0, #200	; 0xc8
 8003708:	f7ff ffb6 	bl	8003678 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800370c:	2000      	movs	r0, #0
 800370e:	f7ff ffb3 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003712:	2010      	movs	r0, #16
 8003714:	f7ff ffb0 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003718:	2040      	movs	r0, #64	; 0x40
 800371a:	f7ff ffad 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800371e:	20ff      	movs	r0, #255	; 0xff
 8003720:	f000 f9d2 	bl	8003ac8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003724:	20a1      	movs	r0, #161	; 0xa1
 8003726:	f7ff ffa7 	bl	8003678 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800372a:	20a6      	movs	r0, #166	; 0xa6
 800372c:	f7ff ffa4 	bl	8003678 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003730:	20a8      	movs	r0, #168	; 0xa8
 8003732:	f7ff ffa1 	bl	8003678 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003736:	203f      	movs	r0, #63	; 0x3f
 8003738:	f7ff ff9e 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800373c:	20a4      	movs	r0, #164	; 0xa4
 800373e:	f7ff ff9b 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003742:	20d3      	movs	r0, #211	; 0xd3
 8003744:	f7ff ff98 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003748:	2000      	movs	r0, #0
 800374a:	f7ff ff95 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800374e:	20d5      	movs	r0, #213	; 0xd5
 8003750:	f7ff ff92 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003754:	20f0      	movs	r0, #240	; 0xf0
 8003756:	f7ff ff8f 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800375a:	20d9      	movs	r0, #217	; 0xd9
 800375c:	f7ff ff8c 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003760:	2022      	movs	r0, #34	; 0x22
 8003762:	f7ff ff89 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003766:	20da      	movs	r0, #218	; 0xda
 8003768:	f7ff ff86 	bl	8003678 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800376c:	2012      	movs	r0, #18
 800376e:	f7ff ff83 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003772:	20db      	movs	r0, #219	; 0xdb
 8003774:	f7ff ff80 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003778:	2020      	movs	r0, #32
 800377a:	f7ff ff7d 	bl	8003678 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800377e:	208d      	movs	r0, #141	; 0x8d
 8003780:	f7ff ff7a 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003784:	2014      	movs	r0, #20
 8003786:	f7ff ff77 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800378a:	2001      	movs	r0, #1
 800378c:	f000 f9b4 	bl	8003af8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003790:	2000      	movs	r0, #0
 8003792:	f000 f811 	bl	80037b8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003796:	f000 f829 	bl	80037ec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <ssd1306_Init+0xd4>)
 800379c:	2200      	movs	r2, #0
 800379e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <ssd1306_Init+0xd4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80037a6:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <ssd1306_Init+0xd4>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	711a      	strb	r2, [r3, #4]
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	20000528 	.word	0x20000528

080037b8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	0002      	movs	r2, r0
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80037c4:	1dfb      	adds	r3, r7, #7
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <ssd1306_Fill+0x18>
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <ssd1306_Fill+0x1a>
 80037d0:	23ff      	movs	r3, #255	; 0xff
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	4804      	ldr	r0, [pc, #16]	; (80037e8 <ssd1306_Fill+0x30>)
 80037d8:	0019      	movs	r1, r3
 80037da:	f004 f989 	bl	8007af0 <memset>
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b002      	add	sp, #8
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	20000128 	.word	0x20000128

080037ec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e01a      	b.n	8003830 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80037fa:	1dfb      	adds	r3, r7, #7
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	3b50      	subs	r3, #80	; 0x50
 8003800:	b2db      	uxtb	r3, r3
 8003802:	0018      	movs	r0, r3
 8003804:	f7ff ff38 	bl	8003678 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003808:	2000      	movs	r0, #0
 800380a:	f7ff ff35 	bl	8003678 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800380e:	2010      	movs	r0, #16
 8003810:	f7ff ff32 	bl	8003678 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	01da      	lsls	r2, r3, #7
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <ssd1306_UpdateScreen+0x58>)
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ff43 	bl	80036ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	3201      	adds	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b07      	cmp	r3, #7
 8003836:	d9e0      	bls.n	80037fa <ssd1306_UpdateScreen+0xe>
    }
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	20000128 	.word	0x20000128

08003848 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	0004      	movs	r4, r0
 8003850:	0008      	movs	r0, r1
 8003852:	0011      	movs	r1, r2
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	1c22      	adds	r2, r4, #0
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	1dbb      	adds	r3, r7, #6
 800385c:	1c02      	adds	r2, r0, #0
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	1d7b      	adds	r3, r7, #5
 8003862:	1c0a      	adds	r2, r1, #0
 8003864:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b25b      	sxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	db47      	blt.n	8003900 <ssd1306_DrawPixel+0xb8>
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b3f      	cmp	r3, #63	; 0x3f
 8003876:	d843      	bhi.n	8003900 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003878:	1d7b      	adds	r3, r7, #5
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d11e      	bne.n	80038be <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	1dbb      	adds	r3, r7, #6
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	b2d8      	uxtb	r0, r3
 800388c:	0003      	movs	r3, r0
 800388e:	01db      	lsls	r3, r3, #7
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <ssd1306_DrawPixel+0xc0>)
 8003894:	5cd3      	ldrb	r3, [r2, r3]
 8003896:	b25a      	sxtb	r2, r3
 8003898:	1dbb      	adds	r3, r7, #6
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2107      	movs	r1, #7
 800389e:	400b      	ands	r3, r1
 80038a0:	2101      	movs	r1, #1
 80038a2:	4099      	lsls	r1, r3
 80038a4:	000b      	movs	r3, r1
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	4313      	orrs	r3, r2
 80038aa:	b259      	sxtb	r1, r3
 80038ac:	1dfb      	adds	r3, r7, #7
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	0003      	movs	r3, r0
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	18d3      	adds	r3, r2, r3
 80038b6:	b2c9      	uxtb	r1, r1
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <ssd1306_DrawPixel+0xc0>)
 80038ba:	54d1      	strb	r1, [r2, r3]
 80038bc:	e021      	b.n	8003902 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	08db      	lsrs	r3, r3, #3
 80038c8:	b2d8      	uxtb	r0, r3
 80038ca:	0003      	movs	r3, r0
 80038cc:	01db      	lsls	r3, r3, #7
 80038ce:	18d3      	adds	r3, r2, r3
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <ssd1306_DrawPixel+0xc0>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	1dba      	adds	r2, r7, #6
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	2107      	movs	r1, #7
 80038dc:	400a      	ands	r2, r1
 80038de:	2101      	movs	r1, #1
 80038e0:	4091      	lsls	r1, r2
 80038e2:	000a      	movs	r2, r1
 80038e4:	b252      	sxtb	r2, r2
 80038e6:	43d2      	mvns	r2, r2
 80038e8:	b252      	sxtb	r2, r2
 80038ea:	4013      	ands	r3, r2
 80038ec:	b259      	sxtb	r1, r3
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	0003      	movs	r3, r0
 80038f4:	01db      	lsls	r3, r3, #7
 80038f6:	18d3      	adds	r3, r2, r3
 80038f8:	b2c9      	uxtb	r1, r1
 80038fa:	4a03      	ldr	r2, [pc, #12]	; (8003908 <ssd1306_DrawPixel+0xc0>)
 80038fc:	54d1      	strb	r1, [r2, r3]
 80038fe:	e000      	b.n	8003902 <ssd1306_DrawPixel+0xba>
        return;
 8003900:	46c0      	nop			; (mov r8, r8)
    }
}
 8003902:	46bd      	mov	sp, r7
 8003904:	b003      	add	sp, #12
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	20000128 	.word	0x20000128

0800390c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	0004      	movs	r4, r0
 8003914:	1d38      	adds	r0, r7, #4
 8003916:	6001      	str	r1, [r0, #0]
 8003918:	6042      	str	r2, [r0, #4]
 800391a:	0019      	movs	r1, r3
 800391c:	200f      	movs	r0, #15
 800391e:	183b      	adds	r3, r7, r0
 8003920:	1c22      	adds	r2, r4, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	230e      	movs	r3, #14
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	1c0a      	adds	r2, r1, #0
 800392a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800392c:	183b      	adds	r3, r7, r0
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b1f      	cmp	r3, #31
 8003932:	d903      	bls.n	800393c <ssd1306_WriteChar+0x30>
 8003934:	183b      	adds	r3, r7, r0
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b7e      	cmp	r3, #126	; 0x7e
 800393a:	d901      	bls.n	8003940 <ssd1306_WriteChar+0x34>
        return 0;
 800393c:	2300      	movs	r3, #0
 800393e:	e078      	b.n	8003a32 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003940:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <ssd1306_WriteChar+0x130>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	001a      	movs	r2, r3
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	18d3      	adds	r3, r2, r3
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	dc07      	bgt.n	8003960 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <ssd1306_WriteChar+0x130>)
 8003952:	885b      	ldrh	r3, [r3, #2]
 8003954:	001a      	movs	r2, r3
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	dd01      	ble.n	8003964 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003960:	2300      	movs	r3, #0
 8003962:	e066      	b.n	8003a32 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e051      	b.n	8003a0e <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	230f      	movs	r3, #15
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	3b20      	subs	r3, #32
 8003976:	1d39      	adds	r1, r7, #4
 8003978:	7849      	ldrb	r1, [r1, #1]
 800397a:	434b      	muls	r3, r1
 800397c:	0019      	movs	r1, r3
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	18cb      	adds	r3, r1, r3
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e035      	b.n	80039fc <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	409a      	lsls	r2, r3
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	4013      	ands	r3, r2
 800399c:	d014      	beq.n	80039c8 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800399e:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <ssd1306_WriteChar+0x130>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	b2d8      	uxtb	r0, r3
 80039ac:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <ssd1306_WriteChar+0x130>)
 80039ae:	885b      	ldrh	r3, [r3, #2]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	18d3      	adds	r3, r2, r3
 80039b8:	b2d9      	uxtb	r1, r3
 80039ba:	230e      	movs	r3, #14
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	001a      	movs	r2, r3
 80039c2:	f7ff ff41 	bl	8003848 <ssd1306_DrawPixel>
 80039c6:	e016      	b.n	80039f6 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <ssd1306_WriteChar+0x130>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	18d3      	adds	r3, r2, r3
 80039d4:	b2d8      	uxtb	r0, r3
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <ssd1306_WriteChar+0x130>)
 80039d8:	885b      	ldrh	r3, [r3, #2]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	b2d9      	uxtb	r1, r3
 80039e4:	230e      	movs	r3, #14
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	425a      	negs	r2, r3
 80039ec:	4153      	adcs	r3, r2
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	001a      	movs	r2, r3
 80039f2:	f7ff ff29 	bl	8003848 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	001a      	movs	r2, r3
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d3c3      	bcc.n	8003990 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	001a      	movs	r2, r3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d3a7      	bcc.n	800396a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <ssd1306_WriteChar+0x130>)
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <ssd1306_WriteChar+0x130>)
 8003a2a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	781b      	ldrb	r3, [r3, #0]
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b009      	add	sp, #36	; 0x24
 8003a38:	bd90      	pop	{r4, r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	20000528 	.word	0x20000528

08003a40 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	1d38      	adds	r0, r7, #4
 8003a4a:	6001      	str	r1, [r0, #0]
 8003a4c:	6042      	str	r2, [r0, #4]
 8003a4e:	001a      	movs	r2, r3
 8003a50:	1cfb      	adds	r3, r7, #3
 8003a52:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8003a54:	e014      	b.n	8003a80 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	7818      	ldrb	r0, [r3, #0]
 8003a5a:	1cfb      	adds	r3, r7, #3
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	1d3a      	adds	r2, r7, #4
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	6852      	ldr	r2, [r2, #4]
 8003a64:	f7ff ff52 	bl	800390c <ssd1306_WriteChar>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d002      	beq.n	8003a7a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	e008      	b.n	8003a8c <ssd1306_WriteString+0x4c>
        }
        str++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e6      	bne.n	8003a56 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	1dfb      	adds	r3, r7, #7
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	1dbb      	adds	r3, r7, #6
 8003aa2:	1c0a      	adds	r2, r1, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <ssd1306_SetCursor+0x30>)
 8003aae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <ssd1306_SetCursor+0x30>)
 8003ab8:	805a      	strh	r2, [r3, #2]
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	20000528 	.word	0x20000528

08003ac8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	0002      	movs	r2, r0
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003ad4:	210f      	movs	r1, #15
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2281      	movs	r2, #129	; 0x81
 8003ada:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff fdc9 	bl	8003678 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f7ff fdc4 	bl	8003678 <ssd1306_WriteCommand>
}
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	0002      	movs	r2, r0
 8003b00:	1dfb      	adds	r3, r7, #7
 8003b02:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003b04:	1dfb      	adds	r3, r7, #7
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	22af      	movs	r2, #175	; 0xaf
 8003b12:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <ssd1306_SetDisplayOn+0x48>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	715a      	strb	r2, [r3, #5]
 8003b1a:	e006      	b.n	8003b2a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	22ae      	movs	r2, #174	; 0xae
 8003b22:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <ssd1306_SetDisplayOn+0x48>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fda1 	bl	8003678 <ssd1306_WriteCommand>
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000528 	.word	0x20000528

08003b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b48:	f000 fe42 	bl	80047d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b4c:	f000 f814 	bl	8003b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b50:	f000 f928 	bl	8003da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003b54:	f000 f8f6 	bl	8003d44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003b58:	f000 f87c 	bl	8003c54 <MX_I2C1_Init>
  MX_TIM7_Init();
 8003b5c:	f000 f8b8 	bl	8003cd0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  statechart_init(&myStateChart);
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <main+0x30>)
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7fe fe3c 	bl	80027e0 <statechart_init>
  statechart_enter(&myStateChart);
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <main+0x30>)
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fe fe63 	bl	8002836 <statechart_enter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <main+0x2c>
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	2000064c 	.word	0x2000064c

08003b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b09f      	sub	sp, #124	; 0x7c
 8003b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b7e:	2440      	movs	r4, #64	; 0x40
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	0018      	movs	r0, r3
 8003b84:	2338      	movs	r3, #56	; 0x38
 8003b86:	001a      	movs	r2, r3
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f003 ffb1 	bl	8007af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b8e:	232c      	movs	r3, #44	; 0x2c
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	0018      	movs	r0, r3
 8003b94:	2314      	movs	r3, #20
 8003b96:	001a      	movs	r2, r3
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f003 ffa9 	bl	8007af0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	2328      	movs	r3, #40	; 0x28
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	f003 ffa2 	bl	8007af0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <SystemClock_Config+0xd4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <SystemClock_Config+0xd8>)
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <SystemClock_Config+0xd4>)
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	0109      	lsls	r1, r1, #4
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003bbe:	0021      	movs	r1, r4
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2201      	movs	r2, #1
 8003bca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2200      	movs	r2, #0
 8003bd0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	22a0      	movs	r2, #160	; 0xa0
 8003bd6:	0212      	lsls	r2, r2, #8
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	0018      	movs	r0, r3
 8003be4:	f001 ffa8 	bl	8005b38 <HAL_RCC_OscConfig>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003bec:	f000 fc9a 	bl	8004524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	2100      	movs	r1, #0
 8003c14:	0018      	movs	r0, r3
 8003c16:	f002 fb63 	bl	80062e0 <HAL_RCC_ClockConfig>
 8003c1a:	1e03      	subs	r3, r0, #0
 8003c1c:	d001      	beq.n	8003c22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003c1e:	f000 fc81 	bl	8004524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	220a      	movs	r2, #10
 8003c26:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c28:	1d3b      	adds	r3, r7, #4
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	0018      	movs	r0, r3
 8003c38:	f002 fd76 	bl	8006728 <HAL_RCCEx_PeriphCLKConfig>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d001      	beq.n	8003c44 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003c40:	f000 fc70 	bl	8004524 <Error_Handler>
  }
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b01f      	add	sp, #124	; 0x7c
 8003c4a:	bd90      	pop	{r4, r7, pc}
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	ffffe7ff 	.word	0xffffe7ff

08003c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <MX_I2C1_Init+0x78>)
 8003c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003c90:	0018      	movs	r0, r3
 8003c92:	f001 f8c7 	bl	8004e24 <HAL_I2C_Init>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d001      	beq.n	8003c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c9a:	f000 fc43 	bl	8004524 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f001 feb0 	bl	8005a08 <HAL_I2CEx_ConfigAnalogFilter>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003cac:	f000 fc3a 	bl	8004524 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <MX_I2C1_Init+0x74>)
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f001 fef3 	bl	8005aa0 <HAL_I2CEx_ConfigDigitalFilter>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003cbe:	f000 fc31 	bl	8004524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000530 	.word	0x20000530
 8003ccc:	40005400 	.word	0x40005400

08003cd0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd6:	003b      	movs	r3, r7
 8003cd8:	0018      	movs	r0, r3
 8003cda:	2308      	movs	r3, #8
 8003cdc:	001a      	movs	r2, r3
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f003 ff06 	bl	8007af0 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <MX_TIM7_Init+0x70>)
 8003ce8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2097-1;
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003cec:	2283      	movs	r2, #131	; 0x83
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003cfa:	22c7      	movs	r2, #199	; 0xc7
 8003cfc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003d06:	0018      	movs	r0, r3
 8003d08:	f002 feac 	bl	8006a64 <HAL_TIM_Base_Init>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8003d10:	f000 fc08 	bl	8004524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d14:	003b      	movs	r3, r7
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1a:	003b      	movs	r3, r7
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003d20:	003a      	movs	r2, r7
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f003 f894 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8003d30:	f000 fbf8 	bl	8004524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000584 	.word	0x20000584
 8003d40:	40001400 	.word	0x40001400

08003d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <MX_USART2_UART_Init+0x5c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d50:	22e1      	movs	r2, #225	; 0xe1
 8003d52:	0252      	lsls	r2, r2, #9
 8003d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f003 f8c1 	bl	8006f10 <HAL_UART_Init>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003d92:	f000 fbc7 	bl	8004524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	200005c4 	.word	0x200005c4
 8003da0:	40004400 	.word	0x40004400

08003da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003daa:	240c      	movs	r4, #12
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	0018      	movs	r0, r3
 8003db0:	2314      	movs	r3, #20
 8003db2:	001a      	movs	r2, r3
 8003db4:	2100      	movs	r1, #0
 8003db6:	f003 fe9b 	bl	8007af0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dd2:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dde:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	4013      	ands	r3, r2
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003df0:	2101      	movs	r1, #1
 8003df2:	430a      	orrs	r2, r1
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003df6:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <MX_GPIO_Init+0xd0>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003e02:	23a0      	movs	r3, #160	; 0xa0
 8003e04:	05db      	lsls	r3, r3, #23
 8003e06:	2200      	movs	r2, #0
 8003e08:	2120      	movs	r1, #32
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 ffd0 	bl	8004db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	0192      	lsls	r2, r2, #6
 8003e16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	2288      	movs	r2, #136	; 0x88
 8003e1c:	0352      	lsls	r2, r2, #13
 8003e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	2201      	movs	r2, #1
 8003e24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e26:	193b      	adds	r3, r7, r4
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <MX_GPIO_Init+0xd4>)
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	0010      	movs	r0, r2
 8003e2e:	f000 fe41 	bl	8004ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e32:	0021      	movs	r1, r4
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2220      	movs	r2, #32
 8003e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2200      	movs	r2, #0
 8003e4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e4c:	187a      	adds	r2, r7, r1
 8003e4e:	23a0      	movs	r3, #160	; 0xa0
 8003e50:	05db      	lsls	r3, r3, #23
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 fe2d 	bl	8004ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2007      	movs	r0, #7
 8003e60:	f000 fdf6 	bl	8004a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003e64:	2007      	movs	r0, #7
 8003e66:	f000 fe08 	bl	8004a7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b009      	add	sp, #36	; 0x24
 8003e70:	bd90      	pop	{r4, r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	40021000 	.word	0x40021000
 8003e78:	50000800 	.word	0x50000800

08003e7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d103      	bne.n	8003e94 <HAL_TIM_PeriodElapsedCallback+0x18>
		statechart_raise_timerInterrupt(&myStateChart);
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fe fd7d 	bl	800298e <statechart_raise_timerInterrupt>
	}
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000584 	.word	0x20000584
 8003ea0:	2000064c 	.word	0x2000064c

08003ea4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	0002      	movs	r2, r0
 8003eac:	1dbb      	adds	r3, r7, #6
 8003eae:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == 8192) { // PC13
 8003eb0:	1dbb      	adds	r3, r7, #6
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	019b      	lsls	r3, r3, #6
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d000      	beq.n	8003ebe <HAL_GPIO_EXTI_Callback+0x1a>
 8003ebc:	e09a      	b.n	8003ff4 <HAL_GPIO_EXTI_Callback+0x150>
		if(ButtonPressed == 0){
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <HAL_GPIO_EXTI_Callback+0x158>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_GPIO_EXTI_Callback+0x2a>
			ButtonPressed = 1;
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <HAL_GPIO_EXTI_Callback+0x158>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\r\n", sizeof("\r\n\r\n"), 10);


		}
	}
}
 8003ecc:	e092      	b.n	8003ff4 <HAL_GPIO_EXTI_Callback+0x150>
			char number[5] = {'\0','\0','\0','\0','\0'};
 8003ece:	240c      	movs	r4, #12
 8003ed0:	193b      	adds	r3, r7, r4
 8003ed2:	4a4b      	ldr	r2, [pc, #300]	; (8004000 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003ed4:	6811      	ldr	r1, [r2, #0]
 8003ed6:	6019      	str	r1, [r3, #0]
 8003ed8:	7912      	ldrb	r2, [r2, #4]
 8003eda:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit(&huart2, (uint8_t *)"X: ", sizeof("X: "), 10);
 8003edc:	4949      	ldr	r1, [pc, #292]	; (8004004 <HAL_GPIO_EXTI_Callback+0x160>)
 8003ede:	484a      	ldr	r0, [pc, #296]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003ee0:	230a      	movs	r3, #10
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	f003 f868 	bl	8006fb8 <HAL_UART_Transmit>
			snprintf(number, 5, "%d. ", (int)Last_Data[0]);
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <HAL_GPIO_EXTI_Callback+0x168>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0010      	movs	r0, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	f7fe fbbf 	bl	8002674 <__aeabi_d2iz>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	4a45      	ldr	r2, [pc, #276]	; (8004010 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003efa:	1938      	adds	r0, r7, r4
 8003efc:	2105      	movs	r1, #5
 8003efe:	f003 fdc3 	bl	8007a88 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)number, sizeof(number), 10);
 8003f02:	1939      	adds	r1, r7, r4
 8003f04:	4840      	ldr	r0, [pc, #256]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f06:	230a      	movs	r3, #10
 8003f08:	2205      	movs	r2, #5
 8003f0a:	f003 f855 	bl	8006fb8 <HAL_UART_Transmit>
			for(int i = 0; i < 5;i++){
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e008      	b.n	8003f26 <HAL_GPIO_EXTI_Callback+0x82>
				number[i] = '\0';
 8003f14:	230c      	movs	r3, #12
 8003f16:	18fa      	adds	r2, r7, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	18d3      	adds	r3, r2, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 5;i++){
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	ddf3      	ble.n	8003f14 <HAL_GPIO_EXTI_Callback+0x70>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", sizeof("\r\n"), 10);
 8003f2c:	4939      	ldr	r1, [pc, #228]	; (8004014 <HAL_GPIO_EXTI_Callback+0x170>)
 8003f2e:	4836      	ldr	r0, [pc, #216]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f30:	230a      	movs	r3, #10
 8003f32:	2203      	movs	r2, #3
 8003f34:	f003 f840 	bl	8006fb8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Y: ", sizeof("Y: "), 10);
 8003f38:	4937      	ldr	r1, [pc, #220]	; (8004018 <HAL_GPIO_EXTI_Callback+0x174>)
 8003f3a:	4833      	ldr	r0, [pc, #204]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	2204      	movs	r2, #4
 8003f40:	f003 f83a 	bl	8006fb8 <HAL_UART_Transmit>
			snprintf(number, 5, "%d. ", (int)Last_Data[1]);
 8003f44:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_GPIO_EXTI_Callback+0x168>)
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	0010      	movs	r0, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	f7fe fb91 	bl	8002674 <__aeabi_d2iz>
 8003f52:	0003      	movs	r3, r0
 8003f54:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003f56:	240c      	movs	r4, #12
 8003f58:	1938      	adds	r0, r7, r4
 8003f5a:	2105      	movs	r1, #5
 8003f5c:	f003 fd94 	bl	8007a88 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)number, sizeof(number), 10);
 8003f60:	1939      	adds	r1, r7, r4
 8003f62:	4829      	ldr	r0, [pc, #164]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f64:	230a      	movs	r3, #10
 8003f66:	2205      	movs	r2, #5
 8003f68:	f003 f826 	bl	8006fb8 <HAL_UART_Transmit>
			for(int i = 0; i < 5;i++){
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e008      	b.n	8003f84 <HAL_GPIO_EXTI_Callback+0xe0>
				number[i] = '\0';
 8003f72:	230c      	movs	r3, #12
 8003f74:	18fa      	adds	r2, r7, r3
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	18d3      	adds	r3, r2, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 5;i++){
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	ddf3      	ble.n	8003f72 <HAL_GPIO_EXTI_Callback+0xce>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", sizeof("\r\n"), 10);
 8003f8a:	4922      	ldr	r1, [pc, #136]	; (8004014 <HAL_GPIO_EXTI_Callback+0x170>)
 8003f8c:	481e      	ldr	r0, [pc, #120]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f8e:	230a      	movs	r3, #10
 8003f90:	2203      	movs	r2, #3
 8003f92:	f003 f811 	bl	8006fb8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Z: ", sizeof("Z: "), 10);
 8003f96:	4921      	ldr	r1, [pc, #132]	; (800401c <HAL_GPIO_EXTI_Callback+0x178>)
 8003f98:	481b      	ldr	r0, [pc, #108]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	f003 f80b 	bl	8006fb8 <HAL_UART_Transmit>
			snprintf(number, 5, "%d. ", (int)Last_Data[2]);
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_GPIO_EXTI_Callback+0x168>)
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	0010      	movs	r0, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	f7fe fb62 	bl	8002674 <__aeabi_d2iz>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003fb4:	240c      	movs	r4, #12
 8003fb6:	1938      	adds	r0, r7, r4
 8003fb8:	2105      	movs	r1, #5
 8003fba:	f003 fd65 	bl	8007a88 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)number, sizeof(number), 10);
 8003fbe:	1939      	adds	r1, r7, r4
 8003fc0:	4811      	ldr	r0, [pc, #68]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	2205      	movs	r2, #5
 8003fc6:	f002 fff7 	bl	8006fb8 <HAL_UART_Transmit>
			for(int i = 0; i < 5;i++){
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e008      	b.n	8003fe2 <HAL_GPIO_EXTI_Callback+0x13e>
				number[i] = '\0';
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	18fa      	adds	r2, r7, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	18d3      	adds	r3, r2, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 5;i++){
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	ddf3      	ble.n	8003fd0 <HAL_GPIO_EXTI_Callback+0x12c>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\r\n", sizeof("\r\n\r\n"), 10);
 8003fe8:	490d      	ldr	r1, [pc, #52]	; (8004020 <HAL_GPIO_EXTI_Callback+0x17c>)
 8003fea:	4807      	ldr	r0, [pc, #28]	; (8004008 <HAL_GPIO_EXTI_Callback+0x164>)
 8003fec:	230a      	movs	r3, #10
 8003fee:	2205      	movs	r2, #5
 8003ff0:	f002 ffe2 	bl	8006fb8 <HAL_UART_Transmit>
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b009      	add	sp, #36	; 0x24
 8003ffa:	bd90      	pop	{r4, r7, pc}
 8003ffc:	2000078c 	.word	0x2000078c
 8004000:	08008ac0 	.word	0x08008ac0
 8004004:	08008aa0 	.word	0x08008aa0
 8004008:	200005c4 	.word	0x200005c4
 800400c:	20000790 	.word	0x20000790
 8004010:	08008aa4 	.word	0x08008aa4
 8004014:	08008aac 	.word	0x08008aac
 8004018:	08008ab0 	.word	0x08008ab0
 800401c:	08008ab4 	.word	0x08008ab4
 8004020:	08008ab8 	.word	0x08008ab8

08004024 <statechart_initialize>:


void statechart_initialize( Statechart* handle){
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 800402c:	f7ff fb58 	bl	80036e0 <ssd1306_Init>
	while (MPU6050_Init(&hi2c1) == 1);
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <statechart_initialize+0xc8>)
 8004034:	0018      	movs	r0, r3
 8004036:	f7fe ff6f 	bl	8002f18 <MPU6050_Init>
 800403a:	0003      	movs	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d0f8      	beq.n	8004032 <statechart_initialize+0xe>
	while(ButtonPressed == 0); //Laukiame mygtuko paspaudimo
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <statechart_initialize+0xcc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0fb      	beq.n	8004042 <statechart_initialize+0x1e>
	// Nusistatome pradines vertes
	MPU6050_Read_All(&hi2c1, &MPU6050);
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <statechart_initialize+0xd0>)
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <statechart_initialize+0xc8>)
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f7fe ffc1 	bl	8002fd8 <MPU6050_Read_All>
	Initial_Acc_X = MPU6050.Ax *180 / PI;
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <statechart_initialize+0xd0>)
 8004058:	6898      	ldr	r0, [r3, #8]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <statechart_initialize+0xd4>)
 8004060:	f7fd fca6 	bl	80019b0 <__aeabi_dmul>
 8004064:	0002      	movs	r2, r0
 8004066:	000b      	movs	r3, r1
 8004068:	0010      	movs	r0, r2
 800406a:	0019      	movs	r1, r3
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <statechart_initialize+0xd8>)
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <statechart_initialize+0xdc>)
 8004070:	f7fd f8a4 	bl	80011bc <__aeabi_ddiv>
 8004074:	0002      	movs	r2, r0
 8004076:	000b      	movs	r3, r1
 8004078:	4922      	ldr	r1, [pc, #136]	; (8004104 <statechart_initialize+0xe0>)
 800407a:	600a      	str	r2, [r1, #0]
 800407c:	604b      	str	r3, [r1, #4]
	Initial_Acc_Y = MPU6050.Ay *180 / PI;
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <statechart_initialize+0xd0>)
 8004080:	6918      	ldr	r0, [r3, #16]
 8004082:	6959      	ldr	r1, [r3, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <statechart_initialize+0xd4>)
 8004088:	f7fd fc92 	bl	80019b0 <__aeabi_dmul>
 800408c:	0002      	movs	r2, r0
 800408e:	000b      	movs	r3, r1
 8004090:	0010      	movs	r0, r2
 8004092:	0019      	movs	r1, r3
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <statechart_initialize+0xd8>)
 8004096:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <statechart_initialize+0xdc>)
 8004098:	f7fd f890 	bl	80011bc <__aeabi_ddiv>
 800409c:	0002      	movs	r2, r0
 800409e:	000b      	movs	r3, r1
 80040a0:	4919      	ldr	r1, [pc, #100]	; (8004108 <statechart_initialize+0xe4>)
 80040a2:	600a      	str	r2, [r1, #0]
 80040a4:	604b      	str	r3, [r1, #4]
	Initial_Acc_Z = MPU6050.Az *180 / PI;
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <statechart_initialize+0xd0>)
 80040a8:	6998      	ldr	r0, [r3, #24]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	2200      	movs	r2, #0
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <statechart_initialize+0xd4>)
 80040b0:	f7fd fc7e 	bl	80019b0 <__aeabi_dmul>
 80040b4:	0002      	movs	r2, r0
 80040b6:	000b      	movs	r3, r1
 80040b8:	0010      	movs	r0, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <statechart_initialize+0xd8>)
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <statechart_initialize+0xdc>)
 80040c0:	f7fd f87c 	bl	80011bc <__aeabi_ddiv>
 80040c4:	0002      	movs	r2, r0
 80040c6:	000b      	movs	r3, r1
 80040c8:	4910      	ldr	r1, [pc, #64]	; (800410c <statechart_initialize+0xe8>)
 80040ca:	600a      	str	r2, [r1, #0]
 80040cc:	604b      	str	r3, [r1, #4]

	HAL_TIM_Base_Start_IT(&htim7);
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <statechart_initialize+0xec>)
 80040d0:	0018      	movs	r0, r3
 80040d2:	f002 fd07 	bl	8006ae4 <HAL_TIM_Base_Start_IT>
	HAL_Delay(200);
 80040d6:	20c8      	movs	r0, #200	; 0xc8
 80040d8:	f000 fbea 	bl	80048b0 <HAL_Delay>
	statechart_raise_buttonPressed(&myStateChart);
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <statechart_initialize+0xf0>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fe fc67 	bl	80029b2 <statechart_raise_buttonPressed>
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000530 	.word	0x20000530
 80040f0:	2000078c 	.word	0x2000078c
 80040f4:	20000688 	.word	0x20000688
 80040f8:	40668000 	.word	0x40668000
 80040fc:	fc8b007a 	.word	0xfc8b007a
 8004100:	400921fa 	.word	0x400921fa
 8004104:	200006e0 	.word	0x200006e0
 8004108:	200006e8 	.word	0x200006e8
 800410c:	200006f0 	.word	0x200006f0
 8004110:	20000584 	.word	0x20000584
 8004114:	2000064c 	.word	0x2000064c

08004118 <statechart_readSensor>:
void statechart_readSensor( Statechart* handle){
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8004120:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <statechart_readSensor+0xc4>)
 8004122:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <statechart_readSensor+0xc8>)
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f7fe ff56 	bl	8002fd8 <MPU6050_Read_All>
	Acc_X[iteration] = MPU6050.Ax *180 / PI;
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <statechart_readSensor+0xc4>)
 800412e:	6898      	ldr	r0, [r3, #8]
 8004130:	68d9      	ldr	r1, [r3, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <statechart_readSensor+0xcc>)
 8004136:	f7fd fc3b 	bl	80019b0 <__aeabi_dmul>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <statechart_readSensor+0xd0>)
 8004144:	681c      	ldr	r4, [r3, #0]
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <statechart_readSensor+0xd4>)
 8004148:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <statechart_readSensor+0xd8>)
 800414a:	f7fd f837 	bl	80011bc <__aeabi_ddiv>
 800414e:	0002      	movs	r2, r0
 8004150:	000b      	movs	r3, r1
 8004152:	4828      	ldr	r0, [pc, #160]	; (80041f4 <statechart_readSensor+0xdc>)
 8004154:	00e1      	lsls	r1, r4, #3
 8004156:	1841      	adds	r1, r0, r1
 8004158:	600a      	str	r2, [r1, #0]
 800415a:	604b      	str	r3, [r1, #4]
	Acc_Y[iteration] = MPU6050.Ay *180 / PI;
 800415c:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <statechart_readSensor+0xc4>)
 800415e:	6918      	ldr	r0, [r3, #16]
 8004160:	6959      	ldr	r1, [r3, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <statechart_readSensor+0xcc>)
 8004166:	f7fd fc23 	bl	80019b0 <__aeabi_dmul>
 800416a:	0002      	movs	r2, r0
 800416c:	000b      	movs	r3, r1
 800416e:	0010      	movs	r0, r2
 8004170:	0019      	movs	r1, r3
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <statechart_readSensor+0xd0>)
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <statechart_readSensor+0xd4>)
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <statechart_readSensor+0xd8>)
 800417a:	f7fd f81f 	bl	80011bc <__aeabi_ddiv>
 800417e:	0002      	movs	r2, r0
 8004180:	000b      	movs	r3, r1
 8004182:	481d      	ldr	r0, [pc, #116]	; (80041f8 <statechart_readSensor+0xe0>)
 8004184:	00e1      	lsls	r1, r4, #3
 8004186:	1841      	adds	r1, r0, r1
 8004188:	600a      	str	r2, [r1, #0]
 800418a:	604b      	str	r3, [r1, #4]
	Acc_Z[iteration] = MPU6050.Az *180 / PI;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <statechart_readSensor+0xc4>)
 800418e:	6998      	ldr	r0, [r3, #24]
 8004190:	69d9      	ldr	r1, [r3, #28]
 8004192:	2200      	movs	r2, #0
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <statechart_readSensor+0xcc>)
 8004196:	f7fd fc0b 	bl	80019b0 <__aeabi_dmul>
 800419a:	0002      	movs	r2, r0
 800419c:	000b      	movs	r3, r1
 800419e:	0010      	movs	r0, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <statechart_readSensor+0xd0>)
 80041a4:	681c      	ldr	r4, [r3, #0]
 80041a6:	4a11      	ldr	r2, [pc, #68]	; (80041ec <statechart_readSensor+0xd4>)
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <statechart_readSensor+0xd8>)
 80041aa:	f7fd f807 	bl	80011bc <__aeabi_ddiv>
 80041ae:	0002      	movs	r2, r0
 80041b0:	000b      	movs	r3, r1
 80041b2:	4812      	ldr	r0, [pc, #72]	; (80041fc <statechart_readSensor+0xe4>)
 80041b4:	00e1      	lsls	r1, r4, #3
 80041b6:	1841      	adds	r1, r0, r1
 80041b8:	600a      	str	r2, [r1, #0]
 80041ba:	604b      	str	r3, [r1, #4]
	iteration++;
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <statechart_readSensor+0xd0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <statechart_readSensor+0xd0>)
 80041c4:	601a      	str	r2, [r3, #0]
	if(iteration == 5){
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <statechart_readSensor+0xd0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d102      	bne.n	80041d4 <statechart_readSensor+0xbc>
		iteration = 0;
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <statechart_readSensor+0xd0>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
	}

}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b003      	add	sp, #12
 80041da:	bd90      	pop	{r4, r7, pc}
 80041dc:	20000688 	.word	0x20000688
 80041e0:	20000530 	.word	0x20000530
 80041e4:	40668000 	.word	0x40668000
 80041e8:	20000788 	.word	0x20000788
 80041ec:	fc8b007a 	.word	0xfc8b007a
 80041f0:	400921fa 	.word	0x400921fa
 80041f4:	200006f8 	.word	0x200006f8
 80041f8:	20000720 	.word	0x20000720
 80041fc:	20000748 	.word	0x20000748

08004200 <statechart_calculateAverage>:
void statechart_calculateAverage( Statechart* handle){
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++){
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e032      	b.n	8004274 <statechart_calculateAverage+0x74>
		Average_Acc_X += Acc_X[i];
 800420e:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <statechart_calculateAverage+0x100>)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <statechart_calculateAverage+0x104>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f7fc fc6c 	bl	8000afc <__aeabi_dadd>
 8004224:	0002      	movs	r2, r0
 8004226:	000b      	movs	r3, r1
 8004228:	4936      	ldr	r1, [pc, #216]	; (8004304 <statechart_calculateAverage+0x104>)
 800422a:	600a      	str	r2, [r1, #0]
 800422c:	604b      	str	r3, [r1, #4]
		Average_Acc_Y += Acc_Y[i];
 800422e:	4a36      	ldr	r2, [pc, #216]	; (8004308 <statechart_calculateAverage+0x108>)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	18d3      	adds	r3, r2, r3
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	4b34      	ldr	r3, [pc, #208]	; (800430c <statechart_calculateAverage+0x10c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f7fc fc5c 	bl	8000afc <__aeabi_dadd>
 8004244:	0002      	movs	r2, r0
 8004246:	000b      	movs	r3, r1
 8004248:	4930      	ldr	r1, [pc, #192]	; (800430c <statechart_calculateAverage+0x10c>)
 800424a:	600a      	str	r2, [r1, #0]
 800424c:	604b      	str	r3, [r1, #4]
		Average_Acc_Z += Acc_Z[i];
 800424e:	4a30      	ldr	r2, [pc, #192]	; (8004310 <statechart_calculateAverage+0x110>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	18d3      	adds	r3, r2, r3
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <statechart_calculateAverage+0x114>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f7fc fc4c 	bl	8000afc <__aeabi_dadd>
 8004264:	0002      	movs	r2, r0
 8004266:	000b      	movs	r3, r1
 8004268:	492a      	ldr	r1, [pc, #168]	; (8004314 <statechart_calculateAverage+0x114>)
 800426a:	600a      	str	r2, [r1, #0]
 800426c:	604b      	str	r3, [r1, #4]
	for(int i=0;i<5;i++){
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b04      	cmp	r3, #4
 8004278:	ddc9      	ble.n	800420e <statechart_calculateAverage+0xe>
	}
	Average_Acc_X = (Average_Acc_X/5) - Initial_Acc_X;
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <statechart_calculateAverage+0x104>)
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <statechart_calculateAverage+0x118>)
 8004284:	f7fc ff9a 	bl	80011bc <__aeabi_ddiv>
 8004288:	0002      	movs	r2, r0
 800428a:	000b      	movs	r3, r1
 800428c:	0010      	movs	r0, r2
 800428e:	0019      	movs	r1, r3
 8004290:	4b22      	ldr	r3, [pc, #136]	; (800431c <statechart_calculateAverage+0x11c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f7fd fe4d 	bl	8001f34 <__aeabi_dsub>
 800429a:	0002      	movs	r2, r0
 800429c:	000b      	movs	r3, r1
 800429e:	4919      	ldr	r1, [pc, #100]	; (8004304 <statechart_calculateAverage+0x104>)
 80042a0:	600a      	str	r2, [r1, #0]
 80042a2:	604b      	str	r3, [r1, #4]
	Average_Acc_Y = (Average_Acc_Y/5) - Initial_Acc_Y;
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <statechart_calculateAverage+0x10c>)
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <statechart_calculateAverage+0x118>)
 80042ae:	f7fc ff85 	bl	80011bc <__aeabi_ddiv>
 80042b2:	0002      	movs	r2, r0
 80042b4:	000b      	movs	r3, r1
 80042b6:	0010      	movs	r0, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <statechart_calculateAverage+0x120>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f7fd fe38 	bl	8001f34 <__aeabi_dsub>
 80042c4:	0002      	movs	r2, r0
 80042c6:	000b      	movs	r3, r1
 80042c8:	4910      	ldr	r1, [pc, #64]	; (800430c <statechart_calculateAverage+0x10c>)
 80042ca:	600a      	str	r2, [r1, #0]
 80042cc:	604b      	str	r3, [r1, #4]
	Average_Acc_Z = (Average_Acc_Z/5) - Initial_Acc_Z;
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <statechart_calculateAverage+0x114>)
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <statechart_calculateAverage+0x118>)
 80042d8:	f7fc ff70 	bl	80011bc <__aeabi_ddiv>
 80042dc:	0002      	movs	r2, r0
 80042de:	000b      	movs	r3, r1
 80042e0:	0010      	movs	r0, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <statechart_calculateAverage+0x124>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f7fd fe23 	bl	8001f34 <__aeabi_dsub>
 80042ee:	0002      	movs	r2, r0
 80042f0:	000b      	movs	r3, r1
 80042f2:	4908      	ldr	r1, [pc, #32]	; (8004314 <statechart_calculateAverage+0x114>)
 80042f4:	600a      	str	r2, [r1, #0]
 80042f6:	604b      	str	r3, [r1, #4]
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b004      	add	sp, #16
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200006f8 	.word	0x200006f8
 8004304:	20000770 	.word	0x20000770
 8004308:	20000720 	.word	0x20000720
 800430c:	20000778 	.word	0x20000778
 8004310:	20000748 	.word	0x20000748
 8004314:	20000780 	.word	0x20000780
 8004318:	40140000 	.word	0x40140000
 800431c:	200006e0 	.word	0x200006e0
 8004320:	200006e8 	.word	0x200006e8
 8004324:	200006f0 	.word	0x200006f0

08004328 <statechart_display>:
void statechart_display( Statechart* handle){
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b08b      	sub	sp, #44	; 0x2c
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

	char number[5];
	int X_Coord1 = 40;
 8004330:	2328      	movs	r3, #40	; 0x28
 8004332:	61bb      	str	r3, [r7, #24]
	int X_Coord2 = 60;
 8004334:	233c      	movs	r3, #60	; 0x3c
 8004336:	617b      	str	r3, [r7, #20]
	int Y_Coord = 10;
 8004338:	230a      	movs	r3, #10
 800433a:	613b      	str	r3, [r7, #16]

	ssd1306_Fill(Black);
 800433c:	2000      	movs	r0, #0
 800433e:	f7ff fa3b 	bl	80037b8 <ssd1306_Fill>

	ssd1306_SetCursor(X_Coord1,Y_Coord);
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	0011      	movs	r1, r2
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff fba1 	bl	8003a94 <ssd1306_SetCursor>
	ssd1306_WriteString("X: ", Font_7x10, White);
 8004352:	4a6c      	ldr	r2, [pc, #432]	; (8004504 <statechart_display+0x1dc>)
 8004354:	486c      	ldr	r0, [pc, #432]	; (8004508 <statechart_display+0x1e0>)
 8004356:	2301      	movs	r3, #1
 8004358:	6811      	ldr	r1, [r2, #0]
 800435a:	6852      	ldr	r2, [r2, #4]
 800435c:	f7ff fb70 	bl	8003a40 <ssd1306_WriteString>
	snprintf(number,5, "%d", (int)Average_Acc_X);
 8004360:	4b6a      	ldr	r3, [pc, #424]	; (800450c <statechart_display+0x1e4>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0010      	movs	r0, r2
 8004368:	0019      	movs	r1, r3
 800436a:	f7fe f983 	bl	8002674 <__aeabi_d2iz>
 800436e:	0003      	movs	r3, r0
 8004370:	4a67      	ldr	r2, [pc, #412]	; (8004510 <statechart_display+0x1e8>)
 8004372:	2408      	movs	r4, #8
 8004374:	1938      	adds	r0, r7, r4
 8004376:	2105      	movs	r1, #5
 8004378:	f003 fb86 	bl	8007a88 <sniprintf>
	ssd1306_SetCursor(X_Coord2,Y_Coord);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	0011      	movs	r1, r2
 8004386:	0018      	movs	r0, r3
 8004388:	f7ff fb84 	bl	8003a94 <ssd1306_SetCursor>
	ssd1306_WriteString(number, Font_7x10, White);
 800438c:	4a5d      	ldr	r2, [pc, #372]	; (8004504 <statechart_display+0x1dc>)
 800438e:	1938      	adds	r0, r7, r4
 8004390:	2301      	movs	r3, #1
 8004392:	6811      	ldr	r1, [r2, #0]
 8004394:	6852      	ldr	r2, [r2, #4]
 8004396:	f7ff fb53 	bl	8003a40 <ssd1306_WriteString>
	for(int i = 0; i < 5;i++){
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	e008      	b.n	80043b2 <statechart_display+0x8a>
		number[i] = '\0';
 80043a0:	2308      	movs	r3, #8
 80043a2:	18fa      	adds	r2, r7, r3
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5;i++){
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	3301      	adds	r3, #1
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	ddf3      	ble.n	80043a0 <statechart_display+0x78>
	}


	ssd1306_SetCursor(X_Coord1,Y_Coord + 15);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	330f      	adds	r3, #15
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	0019      	movs	r1, r3
 80043c6:	0010      	movs	r0, r2
 80043c8:	f7ff fb64 	bl	8003a94 <ssd1306_SetCursor>
	ssd1306_WriteString("Y: ", Font_7x10, White);
 80043cc:	4a4d      	ldr	r2, [pc, #308]	; (8004504 <statechart_display+0x1dc>)
 80043ce:	4851      	ldr	r0, [pc, #324]	; (8004514 <statechart_display+0x1ec>)
 80043d0:	2301      	movs	r3, #1
 80043d2:	6811      	ldr	r1, [r2, #0]
 80043d4:	6852      	ldr	r2, [r2, #4]
 80043d6:	f7ff fb33 	bl	8003a40 <ssd1306_WriteString>
	snprintf(number,5, "%d", (int)Average_Acc_Y);
 80043da:	4b4f      	ldr	r3, [pc, #316]	; (8004518 <statechart_display+0x1f0>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	0010      	movs	r0, r2
 80043e2:	0019      	movs	r1, r3
 80043e4:	f7fe f946 	bl	8002674 <__aeabi_d2iz>
 80043e8:	0003      	movs	r3, r0
 80043ea:	4a49      	ldr	r2, [pc, #292]	; (8004510 <statechart_display+0x1e8>)
 80043ec:	2408      	movs	r4, #8
 80043ee:	1938      	adds	r0, r7, r4
 80043f0:	2105      	movs	r1, #5
 80043f2:	f003 fb49 	bl	8007a88 <sniprintf>
	ssd1306_SetCursor(X_Coord2,Y_Coord + 15);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	330f      	adds	r3, #15
 8004400:	b2db      	uxtb	r3, r3
 8004402:	0019      	movs	r1, r3
 8004404:	0010      	movs	r0, r2
 8004406:	f7ff fb45 	bl	8003a94 <ssd1306_SetCursor>
	ssd1306_WriteString(number, Font_7x10, White);
 800440a:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <statechart_display+0x1dc>)
 800440c:	1938      	adds	r0, r7, r4
 800440e:	2301      	movs	r3, #1
 8004410:	6811      	ldr	r1, [r2, #0]
 8004412:	6852      	ldr	r2, [r2, #4]
 8004414:	f7ff fb14 	bl	8003a40 <ssd1306_WriteString>
	for(int i = 0; i < 5;i++){
 8004418:	2300      	movs	r3, #0
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	e008      	b.n	8004430 <statechart_display+0x108>
		number[i] = '\0';
 800441e:	2308      	movs	r3, #8
 8004420:	18fa      	adds	r2, r7, r3
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5;i++){
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	3301      	adds	r3, #1
 800442e:	623b      	str	r3, [r7, #32]
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	2b04      	cmp	r3, #4
 8004434:	ddf3      	ble.n	800441e <statechart_display+0xf6>
	}


	ssd1306_SetCursor(X_Coord1,Y_Coord + 30);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	331e      	adds	r3, #30
 8004440:	b2db      	uxtb	r3, r3
 8004442:	0019      	movs	r1, r3
 8004444:	0010      	movs	r0, r2
 8004446:	f7ff fb25 	bl	8003a94 <ssd1306_SetCursor>
	ssd1306_WriteString("Y: ", Font_7x10, White);
 800444a:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <statechart_display+0x1dc>)
 800444c:	4831      	ldr	r0, [pc, #196]	; (8004514 <statechart_display+0x1ec>)
 800444e:	2301      	movs	r3, #1
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	6852      	ldr	r2, [r2, #4]
 8004454:	f7ff faf4 	bl	8003a40 <ssd1306_WriteString>
	snprintf(number,5, "%d", (int)Average_Acc_Z);
 8004458:	4b30      	ldr	r3, [pc, #192]	; (800451c <statechart_display+0x1f4>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	0010      	movs	r0, r2
 8004460:	0019      	movs	r1, r3
 8004462:	f7fe f907 	bl	8002674 <__aeabi_d2iz>
 8004466:	0003      	movs	r3, r0
 8004468:	4a29      	ldr	r2, [pc, #164]	; (8004510 <statechart_display+0x1e8>)
 800446a:	2408      	movs	r4, #8
 800446c:	1938      	adds	r0, r7, r4
 800446e:	2105      	movs	r1, #5
 8004470:	f003 fb0a 	bl	8007a88 <sniprintf>
	ssd1306_SetCursor(X_Coord2,Y_Coord + 30);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	331e      	adds	r3, #30
 800447e:	b2db      	uxtb	r3, r3
 8004480:	0019      	movs	r1, r3
 8004482:	0010      	movs	r0, r2
 8004484:	f7ff fb06 	bl	8003a94 <ssd1306_SetCursor>
	ssd1306_WriteString(number, Font_7x10, White);
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <statechart_display+0x1dc>)
 800448a:	1938      	adds	r0, r7, r4
 800448c:	2301      	movs	r3, #1
 800448e:	6811      	ldr	r1, [r2, #0]
 8004490:	6852      	ldr	r2, [r2, #4]
 8004492:	f7ff fad5 	bl	8003a40 <ssd1306_WriteString>
	for(int i = 0; i < 5;i++){
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e008      	b.n	80044ae <statechart_display+0x186>
		number[i] = '\0';
 800449c:	2308      	movs	r3, #8
 800449e:	18fa      	adds	r2, r7, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	18d3      	adds	r3, r2, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5;i++){
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	ddf3      	ble.n	800449c <statechart_display+0x174>
	}

	ssd1306_UpdateScreen();
 80044b4:	f7ff f99a 	bl	80037ec <ssd1306_UpdateScreen>

	Last_Data[0] = Average_Acc_X;
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <statechart_display+0x1e4>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4918      	ldr	r1, [pc, #96]	; (8004520 <statechart_display+0x1f8>)
 80044c0:	600a      	str	r2, [r1, #0]
 80044c2:	604b      	str	r3, [r1, #4]
	Last_Data[1] = Average_Acc_Y;
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <statechart_display+0x1f0>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4915      	ldr	r1, [pc, #84]	; (8004520 <statechart_display+0x1f8>)
 80044cc:	608a      	str	r2, [r1, #8]
 80044ce:	60cb      	str	r3, [r1, #12]
	Last_Data[2] = Average_Acc_Z;
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <statechart_display+0x1f4>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4912      	ldr	r1, [pc, #72]	; (8004520 <statechart_display+0x1f8>)
 80044d8:	610a      	str	r2, [r1, #16]
 80044da:	614b      	str	r3, [r1, #20]

	Average_Acc_X = 0;
 80044dc:	490b      	ldr	r1, [pc, #44]	; (800450c <statechart_display+0x1e4>)
 80044de:	2200      	movs	r2, #0
 80044e0:	2300      	movs	r3, #0
 80044e2:	600a      	str	r2, [r1, #0]
 80044e4:	604b      	str	r3, [r1, #4]
	Average_Acc_Y = 0;
 80044e6:	490c      	ldr	r1, [pc, #48]	; (8004518 <statechart_display+0x1f0>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	2300      	movs	r3, #0
 80044ec:	600a      	str	r2, [r1, #0]
 80044ee:	604b      	str	r3, [r1, #4]
	Average_Acc_Z = 0;
 80044f0:	490a      	ldr	r1, [pc, #40]	; (800451c <statechart_display+0x1f4>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	2300      	movs	r3, #0
 80044f6:	600a      	str	r2, [r1, #0]
 80044f8:	604b      	str	r3, [r1, #4]


}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b00b      	add	sp, #44	; 0x2c
 8004500:	bd90      	pop	{r4, r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	20000090 	.word	0x20000090
 8004508:	08008aa0 	.word	0x08008aa0
 800450c:	20000770 	.word	0x20000770
 8004510:	08008ac8 	.word	0x08008ac8
 8004514:	08008ab0 	.word	0x08008ab0
 8004518:	20000778 	.word	0x20000778
 800451c:	20000780 	.word	0x20000780
 8004520:	20000790 	.word	0x20000790

08004524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004528:	b672      	cpsid	i
}
 800452a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800452c:	e7fe      	b.n	800452c <Error_Handler+0x8>
	...

08004530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <HAL_MspInit+0x24>)
 8004536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_MspInit+0x24>)
 800453a:	2101      	movs	r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_MspInit+0x24>)
 8004542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_MspInit+0x24>)
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	0549      	lsls	r1, r1, #21
 800454a:	430a      	orrs	r2, r1
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000

08004558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	240c      	movs	r4, #12
 8004562:	193b      	adds	r3, r7, r4
 8004564:	0018      	movs	r0, r3
 8004566:	2314      	movs	r3, #20
 8004568:	001a      	movs	r2, r3
 800456a:	2100      	movs	r1, #0
 800456c:	f003 fac0 	bl	8007af0 <memset>
  if(hi2c->Instance==I2C1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_I2C_MspInit+0x80>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d12a      	bne.n	80045d0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <HAL_I2C_MspInit+0x84>)
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <HAL_I2C_MspInit+0x84>)
 8004580:	2101      	movs	r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_I2C_MspInit+0x84>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004592:	193b      	adds	r3, r7, r4
 8004594:	22c0      	movs	r2, #192	; 0xc0
 8004596:	00d2      	lsls	r2, r2, #3
 8004598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800459a:	0021      	movs	r1, r4
 800459c:	187b      	adds	r3, r7, r1
 800459e:	2212      	movs	r2, #18
 80045a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2200      	movs	r2, #0
 80045a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	2203      	movs	r2, #3
 80045ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80045ae:	187b      	adds	r3, r7, r1
 80045b0:	2206      	movs	r2, #6
 80045b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	187a      	adds	r2, r7, r1
 80045b6:	23a0      	movs	r3, #160	; 0xa0
 80045b8:	05db      	lsls	r3, r3, #23
 80045ba:	0011      	movs	r1, r2
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fa79 	bl	8004ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_I2C_MspInit+0x84>)
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_I2C_MspInit+0x84>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0389      	lsls	r1, r1, #14
 80045cc:	430a      	orrs	r2, r1
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b009      	add	sp, #36	; 0x24
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	40005400 	.word	0x40005400
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <HAL_TIM_Base_MspInit+0x38>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_TIM_Base_MspInit+0x3c>)
 80045f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_TIM_Base_MspInit+0x3c>)
 80045f8:	2120      	movs	r1, #32
 80045fa:	430a      	orrs	r2, r1
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2100      	movs	r1, #0
 8004602:	2012      	movs	r0, #18
 8004604:	f000 fa24 	bl	8004a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004608:	2012      	movs	r0, #18
 800460a:	f000 fa36 	bl	8004a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	40001400 	.word	0x40001400
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	240c      	movs	r4, #12
 800462a:	193b      	adds	r3, r7, r4
 800462c:	0018      	movs	r0, r3
 800462e:	2314      	movs	r3, #20
 8004630:	001a      	movs	r2, r3
 8004632:	2100      	movs	r1, #0
 8004634:	f003 fa5c 	bl	8007af0 <memset>
  if(huart->Instance==USART2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <HAL_UART_MspInit+0x80>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d129      	bne.n	8004696 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <HAL_UART_MspInit+0x84>)
 8004644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004646:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <HAL_UART_MspInit+0x84>)
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	0289      	lsls	r1, r1, #10
 800464c:	430a      	orrs	r2, r1
 800464e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004650:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_UART_MspInit+0x84>)
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_UART_MspInit+0x84>)
 8004656:	2101      	movs	r1, #1
 8004658:	430a      	orrs	r2, r1
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_UART_MspInit+0x84>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	2201      	movs	r2, #1
 8004662:	4013      	ands	r3, r2
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004668:	0021      	movs	r1, r4
 800466a:	187b      	adds	r3, r7, r1
 800466c:	220c      	movs	r2, #12
 800466e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2202      	movs	r2, #2
 8004674:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	187b      	adds	r3, r7, r1
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467c:	187b      	adds	r3, r7, r1
 800467e:	2203      	movs	r2, #3
 8004680:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004682:	187b      	adds	r3, r7, r1
 8004684:	2204      	movs	r2, #4
 8004686:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004688:	187a      	adds	r2, r7, r1
 800468a:	23a0      	movs	r3, #160	; 0xa0
 800468c:	05db      	lsls	r3, r3, #23
 800468e:	0011      	movs	r1, r2
 8004690:	0018      	movs	r0, r3
 8004692:	f000 fa0f 	bl	8004ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b009      	add	sp, #36	; 0x24
 800469c:	bd90      	pop	{r4, r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	40004400 	.word	0x40004400
 80046a4:	40021000 	.word	0x40021000

080046a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046ac:	e7fe      	b.n	80046ac <NMI_Handler+0x4>

080046ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046b2:	e7fe      	b.n	80046b2 <HardFault_Handler+0x4>

080046b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046cc:	f000 f8d4 	bl	8004878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fb84 	bl	8004dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <TIM7_IRQHandler+0x14>)
 80046f2:	0018      	movs	r0, r3
 80046f4:	f002 fa48 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	20000584 	.word	0x20000584

08004704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <_sbrk+0x5c>)
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <_sbrk+0x60>)
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <_sbrk+0x64>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <_sbrk+0x64>)
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <_sbrk+0x68>)
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <_sbrk+0x64>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	429a      	cmp	r2, r3
 8004732:	d207      	bcs.n	8004744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004734:	f003 f9e4 	bl	8007b00 <__errno>
 8004738:	0003      	movs	r3, r0
 800473a:	220c      	movs	r2, #12
 800473c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800473e:	2301      	movs	r3, #1
 8004740:	425b      	negs	r3, r3
 8004742:	e009      	b.n	8004758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004744:	4b08      	ldr	r3, [pc, #32]	; (8004768 <_sbrk+0x64>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <_sbrk+0x64>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	18d2      	adds	r2, r2, r3
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <_sbrk+0x64>)
 8004754:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b006      	add	sp, #24
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20005000 	.word	0x20005000
 8004764:	00000400 	.word	0x00000400
 8004768:	200007a8 	.word	0x200007a8
 800476c:	200008f8 	.word	0x200008f8

08004770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800477c:	480d      	ldr	r0, [pc, #52]	; (80047b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800477e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004780:	f7ff fff6 	bl	8004770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004784:	480c      	ldr	r0, [pc, #48]	; (80047b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004786:	490d      	ldr	r1, [pc, #52]	; (80047bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004788:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <LoopForever+0xe>)
  movs r3, #0
 800478a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800478c:	e002      	b.n	8004794 <LoopCopyDataInit>

0800478e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800478e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004792:	3304      	adds	r3, #4

08004794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004798:	d3f9      	bcc.n	800478e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800479c:	4c0a      	ldr	r4, [pc, #40]	; (80047c8 <LoopForever+0x16>)
  movs r3, #0
 800479e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047a0:	e001      	b.n	80047a6 <LoopFillZerobss>

080047a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047a4:	3204      	adds	r2, #4

080047a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a8:	d3fb      	bcc.n	80047a2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80047aa:	f003 f9af 	bl	8007b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ae:	f7ff f9c9 	bl	8003b44 <main>

080047b2 <LoopForever>:

LoopForever:
    b LoopForever
 80047b2:	e7fe      	b.n	80047b2 <LoopForever>
   ldr   r0, =_estack
 80047b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80047b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047bc:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80047c0:	08009418 	.word	0x08009418
  ldr r2, =_sbss
 80047c4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80047c8:	200008f8 	.word	0x200008f8

080047cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047cc:	e7fe      	b.n	80047cc <ADC1_COMP_IRQHandler>
	...

080047d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047d6:	1dfb      	adds	r3, r7, #7
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_Init+0x3c>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_Init+0x3c>)
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047e8:	2000      	movs	r0, #0
 80047ea:	f000 f811 	bl	8004810 <HAL_InitTick>
 80047ee:	1e03      	subs	r3, r0, #0
 80047f0:	d003      	beq.n	80047fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80047f2:	1dfb      	adds	r3, r7, #7
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	e001      	b.n	80047fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047fa:	f7ff fe99 	bl	8004530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047fe:	1dfb      	adds	r3, r7, #7
 8004800:	781b      	ldrb	r3, [r3, #0]
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	40022000 	.word	0x40022000

08004810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_InitTick+0x5c>)
 800481a:	681c      	ldr	r4, [r3, #0]
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <HAL_InitTick+0x60>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	0019      	movs	r1, r3
 8004822:	23fa      	movs	r3, #250	; 0xfa
 8004824:	0098      	lsls	r0, r3, #2
 8004826:	f7fb fc79 	bl	800011c <__udivsi3>
 800482a:	0003      	movs	r3, r0
 800482c:	0019      	movs	r1, r3
 800482e:	0020      	movs	r0, r4
 8004830:	f7fb fc74 	bl	800011c <__udivsi3>
 8004834:	0003      	movs	r3, r0
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f92f 	bl	8004a9a <HAL_SYSTICK_Config>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d001      	beq.n	8004844 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e00f      	b.n	8004864 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b03      	cmp	r3, #3
 8004848:	d80b      	bhi.n	8004862 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	2301      	movs	r3, #1
 800484e:	425b      	negs	r3, r3
 8004850:	2200      	movs	r2, #0
 8004852:	0018      	movs	r0, r3
 8004854:	f000 f8fc 	bl	8004a50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_InitTick+0x64>)
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b003      	add	sp, #12
 800486a:	bd90      	pop	{r4, r7, pc}
 800486c:	20000098 	.word	0x20000098
 8004870:	200000a0 	.word	0x200000a0
 8004874:	2000009c 	.word	0x2000009c

08004878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_IncTick+0x1c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	001a      	movs	r2, r3
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_IncTick+0x20>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	18d2      	adds	r2, r2, r3
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_IncTick+0x20>)
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	200000a0 	.word	0x200000a0
 8004898:	200007ac 	.word	0x200007ac

0800489c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  return uwTick;
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <HAL_GetTick+0x10>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	200007ac 	.word	0x200007ac

080048b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048b8:	f7ff fff0 	bl	800489c <HAL_GetTick>
 80048bc:	0003      	movs	r3, r0
 80048be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	d005      	beq.n	80048d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_Delay+0x44>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	001a      	movs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	f7ff ffe0 	bl	800489c <HAL_GetTick>
 80048dc:	0002      	movs	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d8f7      	bhi.n	80048d8 <HAL_Delay+0x28>
  {
  }
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b004      	add	sp, #16
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	200000a0 	.word	0x200000a0

080048f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	0002      	movs	r2, r0
 8004900:	1dfb      	adds	r3, r7, #7
 8004902:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004904:	1dfb      	adds	r3, r7, #7
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b7f      	cmp	r3, #127	; 0x7f
 800490a:	d809      	bhi.n	8004920 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490c:	1dfb      	adds	r3, r7, #7
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	001a      	movs	r2, r3
 8004912:	231f      	movs	r3, #31
 8004914:	401a      	ands	r2, r3
 8004916:	4b04      	ldr	r3, [pc, #16]	; (8004928 <__NVIC_EnableIRQ+0x30>)
 8004918:	2101      	movs	r1, #1
 800491a:	4091      	lsls	r1, r2
 800491c:	000a      	movs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
  }
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000e100 	.word	0xe000e100

0800492c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	0002      	movs	r2, r0
 8004934:	6039      	str	r1, [r7, #0]
 8004936:	1dfb      	adds	r3, r7, #7
 8004938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800493a:	1dfb      	adds	r3, r7, #7
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b7f      	cmp	r3, #127	; 0x7f
 8004940:	d828      	bhi.n	8004994 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004942:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <__NVIC_SetPriority+0xd4>)
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b25b      	sxtb	r3, r3
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	33c0      	adds	r3, #192	; 0xc0
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	589b      	ldr	r3, [r3, r2]
 8004952:	1dfa      	adds	r2, r7, #7
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	0011      	movs	r1, r2
 8004958:	2203      	movs	r2, #3
 800495a:	400a      	ands	r2, r1
 800495c:	00d2      	lsls	r2, r2, #3
 800495e:	21ff      	movs	r1, #255	; 0xff
 8004960:	4091      	lsls	r1, r2
 8004962:	000a      	movs	r2, r1
 8004964:	43d2      	mvns	r2, r2
 8004966:	401a      	ands	r2, r3
 8004968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	401a      	ands	r2, r3
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	0018      	movs	r0, r3
 8004978:	2303      	movs	r3, #3
 800497a:	4003      	ands	r3, r0
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004980:	481f      	ldr	r0, [pc, #124]	; (8004a00 <__NVIC_SetPriority+0xd4>)
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b25b      	sxtb	r3, r3
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	430a      	orrs	r2, r1
 800498c:	33c0      	adds	r3, #192	; 0xc0
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004992:	e031      	b.n	80049f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004994:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <__NVIC_SetPriority+0xd8>)
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	0019      	movs	r1, r3
 800499c:	230f      	movs	r3, #15
 800499e:	400b      	ands	r3, r1
 80049a0:	3b08      	subs	r3, #8
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3306      	adds	r3, #6
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	18d3      	adds	r3, r2, r3
 80049aa:	3304      	adds	r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1dfa      	adds	r2, r7, #7
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	0011      	movs	r1, r2
 80049b4:	2203      	movs	r2, #3
 80049b6:	400a      	ands	r2, r1
 80049b8:	00d2      	lsls	r2, r2, #3
 80049ba:	21ff      	movs	r1, #255	; 0xff
 80049bc:	4091      	lsls	r1, r2
 80049be:	000a      	movs	r2, r1
 80049c0:	43d2      	mvns	r2, r2
 80049c2:	401a      	ands	r2, r3
 80049c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	019b      	lsls	r3, r3, #6
 80049ca:	22ff      	movs	r2, #255	; 0xff
 80049cc:	401a      	ands	r2, r3
 80049ce:	1dfb      	adds	r3, r7, #7
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	0018      	movs	r0, r3
 80049d4:	2303      	movs	r3, #3
 80049d6:	4003      	ands	r3, r0
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049dc:	4809      	ldr	r0, [pc, #36]	; (8004a04 <__NVIC_SetPriority+0xd8>)
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	001c      	movs	r4, r3
 80049e4:	230f      	movs	r3, #15
 80049e6:	4023      	ands	r3, r4
 80049e8:	3b08      	subs	r3, #8
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	430a      	orrs	r2, r1
 80049ee:	3306      	adds	r3, #6
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	18c3      	adds	r3, r0, r3
 80049f4:	3304      	adds	r3, #4
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b003      	add	sp, #12
 80049fe:	bd90      	pop	{r4, r7, pc}
 8004a00:	e000e100 	.word	0xe000e100
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	1e5a      	subs	r2, r3, #1
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	045b      	lsls	r3, r3, #17
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d301      	bcc.n	8004a20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e010      	b.n	8004a42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <SysTick_Config+0x44>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	3a01      	subs	r2, #1
 8004a26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a28:	2301      	movs	r3, #1
 8004a2a:	425b      	negs	r3, r3
 8004a2c:	2103      	movs	r1, #3
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7ff ff7c 	bl	800492c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <SysTick_Config+0x44>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <SysTick_Config+0x44>)
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	e000e010 	.word	0xe000e010

08004a50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	210f      	movs	r1, #15
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	1c02      	adds	r2, r0, #0
 8004a60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff ff5d 	bl	800492c <__NVIC_SetPriority>
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	0002      	movs	r2, r0
 8004a82:	1dfb      	adds	r3, r7, #7
 8004a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a86:	1dfb      	adds	r3, r7, #7
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7ff ff33 	bl	80048f8 <__NVIC_EnableIRQ>
}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff ffaf 	bl	8004a08 <SysTick_Config>
 8004aaa:	0003      	movs	r3, r0
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004aca:	e155      	b.n	8004d78 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4091      	lsls	r1, r2
 8004ad6:	000a      	movs	r2, r1
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d100      	bne.n	8004ae4 <HAL_GPIO_Init+0x30>
 8004ae2:	e146      	b.n	8004d72 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d005      	beq.n	8004afc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2203      	movs	r2, #3
 8004af6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d130      	bne.n	8004b5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2203      	movs	r2, #3
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	0013      	movs	r3, r2
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	0013      	movs	r3, r2
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b32:	2201      	movs	r2, #1
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	409a      	lsls	r2, r3
 8004b38:	0013      	movs	r3, r2
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	2201      	movs	r2, #1
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	0013      	movs	r3, r2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2203      	movs	r2, #3
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d017      	beq.n	8004b9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2203      	movs	r2, #3
 8004b76:	409a      	lsls	r2, r3
 8004b78:	0013      	movs	r3, r2
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	0013      	movs	r3, r2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d123      	bne.n	8004bee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	08da      	lsrs	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3208      	adds	r2, #8
 8004bae:	0092      	lsls	r2, r2, #2
 8004bb0:	58d3      	ldr	r3, [r2, r3]
 8004bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2207      	movs	r2, #7
 8004bb8:	4013      	ands	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	0013      	movs	r3, r2
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2107      	movs	r1, #7
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	0013      	movs	r3, r2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	08da      	lsrs	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3208      	adds	r2, #8
 8004be8:	0092      	lsls	r2, r2, #2
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	409a      	lsls	r2, r3
 8004c14:	0013      	movs	r3, r2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	23c0      	movs	r3, #192	; 0xc0
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d100      	bne.n	8004c30 <HAL_GPIO_Init+0x17c>
 8004c2e:	e0a0      	b.n	8004d72 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c30:	4b57      	ldr	r3, [pc, #348]	; (8004d90 <HAL_GPIO_Init+0x2dc>)
 8004c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c34:	4b56      	ldr	r3, [pc, #344]	; (8004d90 <HAL_GPIO_Init+0x2dc>)
 8004c36:	2101      	movs	r1, #1
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c3c:	4a55      	ldr	r2, [pc, #340]	; (8004d94 <HAL_GPIO_Init+0x2e0>)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	589b      	ldr	r3, [r3, r2]
 8004c48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	4013      	ands	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	220f      	movs	r2, #15
 8004c54:	409a      	lsls	r2, r3
 8004c56:	0013      	movs	r3, r2
 8004c58:	43da      	mvns	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	23a0      	movs	r3, #160	; 0xa0
 8004c64:	05db      	lsls	r3, r3, #23
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d01f      	beq.n	8004caa <HAL_GPIO_Init+0x1f6>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a4a      	ldr	r2, [pc, #296]	; (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d019      	beq.n	8004ca6 <HAL_GPIO_Init+0x1f2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a49      	ldr	r2, [pc, #292]	; (8004d9c <HAL_GPIO_Init+0x2e8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_GPIO_Init+0x1ee>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a48      	ldr	r2, [pc, #288]	; (8004da0 <HAL_GPIO_Init+0x2ec>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00d      	beq.n	8004c9e <HAL_GPIO_Init+0x1ea>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a47      	ldr	r2, [pc, #284]	; (8004da4 <HAL_GPIO_Init+0x2f0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <HAL_GPIO_Init+0x1e6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a46      	ldr	r2, [pc, #280]	; (8004da8 <HAL_GPIO_Init+0x2f4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_GPIO_Init+0x1e2>
 8004c92:	2305      	movs	r3, #5
 8004c94:	e00a      	b.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004c96:	2306      	movs	r3, #6
 8004c98:	e008      	b.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	e006      	b.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e004      	b.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e002      	b.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004caa:	2300      	movs	r3, #0
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	2103      	movs	r1, #3
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	0092      	lsls	r2, r2, #2
 8004cb4:	4093      	lsls	r3, r2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cbc:	4935      	ldr	r1, [pc, #212]	; (8004d94 <HAL_GPIO_Init+0x2e0>)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	089b      	lsrs	r3, r3, #2
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cca:	4b38      	ldr	r3, [pc, #224]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	035b      	lsls	r3, r3, #13
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004cee:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	43da      	mvns	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	039b      	lsls	r3, r3, #14
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d18:	4b24      	ldr	r3, [pc, #144]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	43da      	mvns	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	4013      	ands	r3, r2
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	43da      	mvns	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4013      	ands	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	025b      	lsls	r3, r3, #9
 8004d60:	4013      	ands	r3, r2
 8004d62:	d003      	beq.n	8004d6c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_GPIO_Init+0x2f8>)
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	3301      	adds	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	40da      	lsrs	r2, r3
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	d000      	beq.n	8004d86 <HAL_GPIO_Init+0x2d2>
 8004d84:	e6a2      	b.n	8004acc <HAL_GPIO_Init+0x18>
  }
}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b006      	add	sp, #24
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40010000 	.word	0x40010000
 8004d98:	50000400 	.word	0x50000400
 8004d9c:	50000800 	.word	0x50000800
 8004da0:	50000c00 	.word	0x50000c00
 8004da4:	50001000 	.word	0x50001000
 8004da8:	50001c00 	.word	0x50001c00
 8004dac:	40010400 	.word	0x40010400

08004db0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	0008      	movs	r0, r1
 8004dba:	0011      	movs	r1, r2
 8004dbc:	1cbb      	adds	r3, r7, #2
 8004dbe:	1c02      	adds	r2, r0, #0
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	1c7b      	adds	r3, r7, #1
 8004dc4:	1c0a      	adds	r2, r1, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dc8:	1c7b      	adds	r3, r7, #1
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dd0:	1cbb      	adds	r3, r7, #2
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004dd8:	e003      	b.n	8004de2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004dda:	1cbb      	adds	r3, r7, #2
 8004ddc:	881a      	ldrh	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	0002      	movs	r2, r0
 8004df4:	1dbb      	adds	r3, r7, #6
 8004df6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	1dba      	adds	r2, r7, #6
 8004dfe:	8812      	ldrh	r2, [r2, #0]
 8004e00:	4013      	ands	r3, r2
 8004e02:	d008      	beq.n	8004e16 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004e06:	1dba      	adds	r2, r7, #6
 8004e08:	8812      	ldrh	r2, [r2, #0]
 8004e0a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e0c:	1dbb      	adds	r3, r7, #6
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff f847 	bl	8003ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b002      	add	sp, #8
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	40010400 	.word	0x40010400

08004e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e082      	b.n	8004f3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2241      	movs	r2, #65	; 0x41
 8004e3a:	5c9b      	ldrb	r3, [r3, r2]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d107      	bne.n	8004e52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2240      	movs	r2, #64	; 0x40
 8004e46:	2100      	movs	r1, #0
 8004e48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7ff fb83 	bl	8004558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2241      	movs	r2, #65	; 0x41
 8004e56:	2124      	movs	r1, #36	; 0x24
 8004e58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2101      	movs	r1, #1
 8004e66:	438a      	bics	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4934      	ldr	r1, [pc, #208]	; (8004f44 <HAL_I2C_Init+0x120>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4931      	ldr	r1, [pc, #196]	; (8004f48 <HAL_I2C_Init+0x124>)
 8004e84:	400a      	ands	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d108      	bne.n	8004ea2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	0209      	lsls	r1, r1, #8
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	e007      	b.n	8004eb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2184      	movs	r1, #132	; 0x84
 8004eac:	0209      	lsls	r1, r1, #8
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d104      	bne.n	8004ec4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	0112      	lsls	r2, r2, #4
 8004ec2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	491f      	ldr	r1, [pc, #124]	; (8004f4c <HAL_I2C_Init+0x128>)
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	491a      	ldr	r1, [pc, #104]	; (8004f48 <HAL_I2C_Init+0x124>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69d9      	ldr	r1, [r3, #28]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2241      	movs	r2, #65	; 0x41
 8004f28:	2120      	movs	r1, #32
 8004f2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2242      	movs	r2, #66	; 0x42
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	f0ffffff 	.word	0xf0ffffff
 8004f48:	ffff7fff 	.word	0xffff7fff
 8004f4c:	02008000 	.word	0x02008000

08004f50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	000c      	movs	r4, r1
 8004f5a:	0010      	movs	r0, r2
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	230a      	movs	r3, #10
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	1c22      	adds	r2, r4, #0
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	2308      	movs	r3, #8
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	1c02      	adds	r2, r0, #0
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	1dbb      	adds	r3, r7, #6
 8004f70:	1c0a      	adds	r2, r1, #0
 8004f72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2241      	movs	r2, #65	; 0x41
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d000      	beq.n	8004f82 <HAL_I2C_Mem_Write+0x32>
 8004f80:	e10c      	b.n	800519c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_I2C_Mem_Write+0x42>
 8004f88:	232c      	movs	r3, #44	; 0x2c
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2280      	movs	r2, #128	; 0x80
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0ff      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2240      	movs	r2, #64	; 0x40
 8004fa2:	5c9b      	ldrb	r3, [r3, r2]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_I2C_Mem_Write+0x5c>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e0f8      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2240      	movs	r2, #64	; 0x40
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fb4:	f7ff fc72 	bl	800489c <HAL_GetTick>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	0219      	lsls	r1, r3, #8
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2319      	movs	r3, #25
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f000 fb0b 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e0e3      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2241      	movs	r2, #65	; 0x41
 8004fda:	2121      	movs	r1, #33	; 0x21
 8004fdc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2242      	movs	r2, #66	; 0x42
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	222c      	movs	r2, #44	; 0x2c
 8004ff6:	18ba      	adds	r2, r7, r2
 8004ff8:	8812      	ldrh	r2, [r2, #0]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005002:	1dbb      	adds	r3, r7, #6
 8005004:	881c      	ldrh	r4, [r3, #0]
 8005006:	2308      	movs	r3, #8
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	881a      	ldrh	r2, [r3, #0]
 800500c:	230a      	movs	r3, #10
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	8819      	ldrh	r1, [r3, #0]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	0023      	movs	r3, r4
 800501e:	f000 f9f9 	bl	8005414 <I2C_RequestMemoryWrite>
 8005022:	1e03      	subs	r3, r0, #0
 8005024:	d005      	beq.n	8005032 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2240      	movs	r2, #64	; 0x40
 800502a:	2100      	movs	r1, #0
 800502c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0b5      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	2bff      	cmp	r3, #255	; 0xff
 800503a:	d911      	bls.n	8005060 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005046:	b2da      	uxtb	r2, r3
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	045c      	lsls	r4, r3, #17
 800504c:	230a      	movs	r3, #10
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	8819      	ldrh	r1, [r3, #0]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	2300      	movs	r3, #0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	0023      	movs	r3, r4
 800505a:	f000 fc9b 	bl	8005994 <I2C_TransferConfig>
 800505e:	e012      	b.n	8005086 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	b2da      	uxtb	r2, r3
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	049c      	lsls	r4, r3, #18
 8005074:	230a      	movs	r3, #10
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	8819      	ldrh	r1, [r3, #0]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	f000 fc87 	bl	8005994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	0018      	movs	r0, r3
 800508e:	f000 faf7 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e081      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d03a      	beq.n	800514a <HAL_I2C_Mem_Write+0x1fa>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d136      	bne.n	800514a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	0013      	movs	r3, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	f000 fa7b 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e053      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2bff      	cmp	r3, #255	; 0xff
 80050fe:	d911      	bls.n	8005124 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	22ff      	movs	r2, #255	; 0xff
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	b2da      	uxtb	r2, r3
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	045c      	lsls	r4, r3, #17
 8005110:	230a      	movs	r3, #10
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	8819      	ldrh	r1, [r3, #0]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	0023      	movs	r3, r4
 800511e:	f000 fc39 	bl	8005994 <I2C_TransferConfig>
 8005122:	e012      	b.n	800514a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	049c      	lsls	r4, r3, #18
 8005138:	230a      	movs	r3, #10
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	8819      	ldrh	r1, [r3, #0]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	2300      	movs	r3, #0
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	0023      	movs	r3, r4
 8005146:	f000 fc25 	bl	8005994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d198      	bne.n	8005086 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	0018      	movs	r0, r3
 800515c:	f000 fad6 	bl	800570c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e01a      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2220      	movs	r2, #32
 800516e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	490b      	ldr	r1, [pc, #44]	; (80051a8 <HAL_I2C_Mem_Write+0x258>)
 800517c:	400a      	ands	r2, r1
 800517e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2241      	movs	r2, #65	; 0x41
 8005184:	2120      	movs	r1, #32
 8005186:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2242      	movs	r2, #66	; 0x42
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2240      	movs	r2, #64	; 0x40
 8005194:	2100      	movs	r1, #0
 8005196:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b007      	add	sp, #28
 80051a4:	bd90      	pop	{r4, r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	fe00e800 	.word	0xfe00e800

080051ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b089      	sub	sp, #36	; 0x24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	000c      	movs	r4, r1
 80051b6:	0010      	movs	r0, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	230a      	movs	r3, #10
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	1c22      	adds	r2, r4, #0
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	2308      	movs	r3, #8
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	1c02      	adds	r2, r0, #0
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	1dbb      	adds	r3, r7, #6
 80051cc:	1c0a      	adds	r2, r1, #0
 80051ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2241      	movs	r2, #65	; 0x41
 80051d4:	5c9b      	ldrb	r3, [r3, r2]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d000      	beq.n	80051de <HAL_I2C_Mem_Read+0x32>
 80051dc:	e110      	b.n	8005400 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <HAL_I2C_Mem_Read+0x42>
 80051e4:	232c      	movs	r3, #44	; 0x2c
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d105      	bne.n	80051fa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2280      	movs	r2, #128	; 0x80
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e103      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2240      	movs	r2, #64	; 0x40
 80051fe:	5c9b      	ldrb	r3, [r3, r2]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_I2C_Mem_Read+0x5c>
 8005204:	2302      	movs	r3, #2
 8005206:	e0fc      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	2101      	movs	r1, #1
 800520e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005210:	f7ff fb44 	bl	800489c <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	0219      	lsls	r1, r3, #8
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2319      	movs	r3, #25
 8005224:	2201      	movs	r2, #1
 8005226:	f000 f9dd 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 800522a:	1e03      	subs	r3, r0, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0e7      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2241      	movs	r2, #65	; 0x41
 8005236:	2122      	movs	r1, #34	; 0x22
 8005238:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2242      	movs	r2, #66	; 0x42
 800523e:	2140      	movs	r1, #64	; 0x40
 8005240:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	222c      	movs	r2, #44	; 0x2c
 8005252:	18ba      	adds	r2, r7, r2
 8005254:	8812      	ldrh	r2, [r2, #0]
 8005256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800525e:	1dbb      	adds	r3, r7, #6
 8005260:	881c      	ldrh	r4, [r3, #0]
 8005262:	2308      	movs	r3, #8
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	881a      	ldrh	r2, [r3, #0]
 8005268:	230a      	movs	r3, #10
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	8819      	ldrh	r1, [r3, #0]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	0023      	movs	r3, r4
 800527a:	f000 f92f 	bl	80054dc <I2C_RequestMemoryRead>
 800527e:	1e03      	subs	r3, r0, #0
 8005280:	d005      	beq.n	800528e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2240      	movs	r2, #64	; 0x40
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0b9      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2bff      	cmp	r3, #255	; 0xff
 8005296:	d911      	bls.n	80052bc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	22ff      	movs	r2, #255	; 0xff
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	045c      	lsls	r4, r3, #17
 80052a8:	230a      	movs	r3, #10
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	8819      	ldrh	r1, [r3, #0]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_I2C_Mem_Read+0x260>)
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	0023      	movs	r3, r4
 80052b6:	f000 fb6d 	bl	8005994 <I2C_TransferConfig>
 80052ba:	e012      	b.n	80052e2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	049c      	lsls	r4, r3, #18
 80052d0:	230a      	movs	r3, #10
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	8819      	ldrh	r1, [r3, #0]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	4b4c      	ldr	r3, [pc, #304]	; (800540c <HAL_I2C_Mem_Read+0x260>)
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	0023      	movs	r3, r4
 80052de:	f000 fb59 	bl	8005994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	0013      	movs	r3, r2
 80052ec:	2200      	movs	r2, #0
 80052ee:	2104      	movs	r1, #4
 80052f0:	f000 f978 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 80052f4:	1e03      	subs	r3, r0, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e082      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03a      	beq.n	80053ae <HAL_I2C_Mem_Read+0x202>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d136      	bne.n	80053ae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	0013      	movs	r3, r2
 800534a:	2200      	movs	r2, #0
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	f000 f949 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8005352:	1e03      	subs	r3, r0, #0
 8005354:	d001      	beq.n	800535a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e053      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2bff      	cmp	r3, #255	; 0xff
 8005362:	d911      	bls.n	8005388 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	22ff      	movs	r2, #255	; 0xff
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	b2da      	uxtb	r2, r3
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	045c      	lsls	r4, r3, #17
 8005374:	230a      	movs	r3, #10
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	8819      	ldrh	r1, [r3, #0]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	2300      	movs	r3, #0
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	0023      	movs	r3, r4
 8005382:	f000 fb07 	bl	8005994 <I2C_TransferConfig>
 8005386:	e012      	b.n	80053ae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	b2da      	uxtb	r2, r3
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	049c      	lsls	r4, r3, #18
 800539c:	230a      	movs	r3, #10
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	8819      	ldrh	r1, [r3, #0]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	2300      	movs	r3, #0
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	0023      	movs	r3, r4
 80053aa:	f000 faf3 	bl	8005994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d194      	bne.n	80052e2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f9a4 	bl	800570c <I2C_WaitOnSTOPFlagUntilTimeout>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d001      	beq.n	80053cc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e01a      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2220      	movs	r2, #32
 80053d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	490c      	ldr	r1, [pc, #48]	; (8005410 <HAL_I2C_Mem_Read+0x264>)
 80053e0:	400a      	ands	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2241      	movs	r2, #65	; 0x41
 80053e8:	2120      	movs	r1, #32
 80053ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2242      	movs	r2, #66	; 0x42
 80053f0:	2100      	movs	r1, #0
 80053f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2240      	movs	r2, #64	; 0x40
 80053f8:	2100      	movs	r1, #0
 80053fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e000      	b.n	8005402 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005400:	2302      	movs	r3, #2
  }
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b007      	add	sp, #28
 8005408:	bd90      	pop	{r4, r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	80002400 	.word	0x80002400
 8005410:	fe00e800 	.word	0xfe00e800

08005414 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005414:	b5b0      	push	{r4, r5, r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	000c      	movs	r4, r1
 800541e:	0010      	movs	r0, r2
 8005420:	0019      	movs	r1, r3
 8005422:	250a      	movs	r5, #10
 8005424:	197b      	adds	r3, r7, r5
 8005426:	1c22      	adds	r2, r4, #0
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	2308      	movs	r3, #8
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	1c02      	adds	r2, r0, #0
 8005430:	801a      	strh	r2, [r3, #0]
 8005432:	1dbb      	adds	r3, r7, #6
 8005434:	1c0a      	adds	r2, r1, #0
 8005436:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005438:	1dbb      	adds	r3, r7, #6
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	045c      	lsls	r4, r3, #17
 8005442:	197b      	adds	r3, r7, r5
 8005444:	8819      	ldrh	r1, [r3, #0]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <I2C_RequestMemoryWrite+0xc4>)
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	0023      	movs	r3, r4
 800544e:	f000 faa1 	bl	8005994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	6a39      	ldr	r1, [r7, #32]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 f911 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 800545e:	1e03      	subs	r3, r0, #0
 8005460:	d001      	beq.n	8005466 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e033      	b.n	80054ce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005466:	1dbb      	adds	r3, r7, #6
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800546e:	2308      	movs	r3, #8
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
 800547c:	e019      	b.n	80054b2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800547e:	2308      	movs	r3, #8
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	b29b      	uxth	r3, r3
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	6a39      	ldr	r1, [r7, #32]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 f8f2 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 800549c:	1e03      	subs	r3, r0, #0
 800549e:	d001      	beq.n	80054a4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e014      	b.n	80054ce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054a4:	2308      	movs	r3, #8
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054b2:	6a3a      	ldr	r2, [r7, #32]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	0013      	movs	r3, r2
 80054bc:	2200      	movs	r2, #0
 80054be:	2180      	movs	r1, #128	; 0x80
 80054c0:	f000 f890 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d001      	beq.n	80054cc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b004      	add	sp, #16
 80054d4:	bdb0      	pop	{r4, r5, r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	80002000 	.word	0x80002000

080054dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	000c      	movs	r4, r1
 80054e6:	0010      	movs	r0, r2
 80054e8:	0019      	movs	r1, r3
 80054ea:	250a      	movs	r5, #10
 80054ec:	197b      	adds	r3, r7, r5
 80054ee:	1c22      	adds	r2, r4, #0
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	2308      	movs	r3, #8
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	1c02      	adds	r2, r0, #0
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	1dbb      	adds	r3, r7, #6
 80054fc:	1c0a      	adds	r2, r1, #0
 80054fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005500:	1dbb      	adds	r3, r7, #6
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	197b      	adds	r3, r7, r5
 8005508:	8819      	ldrh	r1, [r3, #0]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	4b23      	ldr	r3, [pc, #140]	; (800559c <I2C_RequestMemoryRead+0xc0>)
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2300      	movs	r3, #0
 8005512:	f000 fa3f 	bl	8005994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	6a39      	ldr	r1, [r7, #32]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	0018      	movs	r0, r3
 800551e:	f000 f8af 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d001      	beq.n	800552a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e033      	b.n	8005592 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800552a:	1dbb      	adds	r3, r7, #6
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005532:	2308      	movs	r3, #8
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
 8005540:	e019      	b.n	8005576 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005542:	2308      	movs	r3, #8
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	b29b      	uxth	r3, r3
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	6a39      	ldr	r1, [r7, #32]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	0018      	movs	r0, r3
 800555c:	f000 f890 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 8005560:	1e03      	subs	r3, r0, #0
 8005562:	d001      	beq.n	8005568 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e014      	b.n	8005592 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005568:	2308      	movs	r3, #8
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	0013      	movs	r3, r2
 8005580:	2200      	movs	r2, #0
 8005582:	2140      	movs	r1, #64	; 0x40
 8005584:	f000 f82e 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8005588:	1e03      	subs	r3, r0, #0
 800558a:	d001      	beq.n	8005590 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b004      	add	sp, #16
 8005598:	bdb0      	pop	{r4, r5, r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	80002000 	.word	0x80002000

080055a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2202      	movs	r2, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d103      	bne.n	80055be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2201      	movs	r2, #1
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d007      	beq.n	80055dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2101      	movs	r1, #1
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
  }
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	1dfb      	adds	r3, r7, #7
 80055f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f4:	e030      	b.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	d02d      	beq.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fc:	f7ff f94e 	bl	800489c <HAL_GetTick>
 8005600:	0002      	movs	r2, r0
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d302      	bcc.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d122      	bne.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	425a      	negs	r2, r3
 8005622:	4153      	adcs	r3, r2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	001a      	movs	r2, r3
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d113      	bne.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	2220      	movs	r2, #32
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2241      	movs	r2, #65	; 0x41
 8005640:	2120      	movs	r1, #32
 8005642:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2242      	movs	r2, #66	; 0x42
 8005648:	2100      	movs	r1, #0
 800564a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e00f      	b.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	425a      	negs	r2, r3
 8005668:	4153      	adcs	r3, r2
 800566a:	b2db      	uxtb	r3, r3
 800566c:	001a      	movs	r2, r3
 800566e:	1dfb      	adds	r3, r7, #7
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d0bf      	beq.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b004      	add	sp, #16
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800568c:	e032      	b.n	80056f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0018      	movs	r0, r3
 8005696:	f000 f87d 	bl	8005794 <I2C_IsErrorOccurred>
 800569a:	1e03      	subs	r3, r0, #0
 800569c:	d001      	beq.n	80056a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e030      	b.n	8005704 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3301      	adds	r3, #1
 80056a6:	d025      	beq.n	80056f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7ff f8f8 	bl	800489c <HAL_GetTick>
 80056ac:	0002      	movs	r2, r0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11a      	bne.n	80056f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2202      	movs	r2, #2
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d013      	beq.n	80056f4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d0:	2220      	movs	r2, #32
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2241      	movs	r2, #65	; 0x41
 80056dc:	2120      	movs	r1, #32
 80056de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2242      	movs	r2, #66	; 0x42
 80056e4:	2100      	movs	r1, #0
 80056e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	2100      	movs	r1, #0
 80056ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e007      	b.n	8005704 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2202      	movs	r2, #2
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d1c5      	bne.n	800568e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	0018      	movs	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	b004      	add	sp, #16
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005718:	e02f      	b.n	800577a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 f837 	bl	8005794 <I2C_IsErrorOccurred>
 8005726:	1e03      	subs	r3, r0, #0
 8005728:	d001      	beq.n	800572e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e02d      	b.n	800578a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7ff f8b5 	bl	800489c <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11a      	bne.n	800577a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2220      	movs	r2, #32
 800574c:	4013      	ands	r3, r2
 800574e:	2b20      	cmp	r3, #32
 8005750:	d013      	beq.n	800577a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	2220      	movs	r2, #32
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2241      	movs	r2, #65	; 0x41
 8005762:	2120      	movs	r1, #32
 8005764:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2242      	movs	r2, #66	; 0x42
 800576a:	2100      	movs	r1, #0
 800576c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	2100      	movs	r1, #0
 8005774:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e007      	b.n	800578a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	2220      	movs	r2, #32
 8005782:	4013      	ands	r3, r2
 8005784:	2b20      	cmp	r3, #32
 8005786:	d1c8      	bne.n	800571a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	0018      	movs	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	b004      	add	sp, #16
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b08b      	sub	sp, #44	; 0x2c
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2327      	movs	r3, #39	; 0x27
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2210      	movs	r2, #16
 80057bc:	4013      	ands	r3, r2
 80057be:	d100      	bne.n	80057c2 <I2C_IsErrorOccurred+0x2e>
 80057c0:	e082      	b.n	80058c8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2210      	movs	r2, #16
 80057c8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057ca:	e060      	b.n	800588e <I2C_IsErrorOccurred+0xfa>
 80057cc:	2427      	movs	r4, #39	; 0x27
 80057ce:	193b      	adds	r3, r7, r4
 80057d0:	193a      	adds	r2, r7, r4
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	d058      	beq.n	800588e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057dc:	f7ff f85e 	bl	800489c <HAL_GetTick>
 80057e0:	0002      	movs	r2, r0
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d306      	bcc.n	80057fa <I2C_IsErrorOccurred+0x66>
 80057ec:	193b      	adds	r3, r7, r4
 80057ee:	193a      	adds	r2, r7, r4
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d149      	bne.n	800588e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	01db      	lsls	r3, r3, #7
 8005804:	4013      	ands	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005808:	2013      	movs	r0, #19
 800580a:	183b      	adds	r3, r7, r0
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	2142      	movs	r1, #66	; 0x42
 8005810:	5c52      	ldrb	r2, [r2, r1]
 8005812:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	401a      	ands	r2, r3
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	429a      	cmp	r2, r3
 8005826:	d126      	bne.n	8005876 <I2C_IsErrorOccurred+0xe2>
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	429a      	cmp	r2, r3
 8005830:	d021      	beq.n	8005876 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005832:	183b      	adds	r3, r7, r0
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b20      	cmp	r3, #32
 8005838:	d01d      	beq.n	8005876 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	01c9      	lsls	r1, r1, #7
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800584c:	f7ff f826 	bl	800489c <HAL_GetTick>
 8005850:	0003      	movs	r3, r0
 8005852:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005854:	e00f      	b.n	8005876 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005856:	f7ff f821 	bl	800489c <HAL_GetTick>
 800585a:	0002      	movs	r2, r0
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b19      	cmp	r3, #25
 8005862:	d908      	bls.n	8005876 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	2220      	movs	r2, #32
 8005868:	4313      	orrs	r3, r2
 800586a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800586c:	2327      	movs	r3, #39	; 0x27
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]

              break;
 8005874:	e00b      	b.n	800588e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2220      	movs	r2, #32
 800587e:	4013      	ands	r3, r2
 8005880:	2127      	movs	r1, #39	; 0x27
 8005882:	187a      	adds	r2, r7, r1
 8005884:	1879      	adds	r1, r7, r1
 8005886:	7809      	ldrb	r1, [r1, #0]
 8005888:	7011      	strb	r1, [r2, #0]
 800588a:	2b20      	cmp	r3, #32
 800588c:	d1e3      	bne.n	8005856 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	2220      	movs	r2, #32
 8005896:	4013      	ands	r3, r2
 8005898:	2b20      	cmp	r3, #32
 800589a:	d004      	beq.n	80058a6 <I2C_IsErrorOccurred+0x112>
 800589c:	2327      	movs	r3, #39	; 0x27
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d092      	beq.n	80057cc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058a6:	2327      	movs	r3, #39	; 0x27
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2220      	movs	r2, #32
 80058b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2204      	movs	r2, #4
 80058bc:	4313      	orrs	r3, r2
 80058be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058c0:	2327      	movs	r3, #39	; 0x27
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	4013      	ands	r3, r2
 80058d8:	d00c      	beq.n	80058f4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2201      	movs	r2, #1
 80058de:	4313      	orrs	r3, r2
 80058e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	0052      	lsls	r2, r2, #1
 80058ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058ec:	2327      	movs	r3, #39	; 0x27
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4013      	ands	r3, r2
 80058fc:	d00c      	beq.n	8005918 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2208      	movs	r2, #8
 8005902:	4313      	orrs	r3, r2
 8005904:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	00d2      	lsls	r2, r2, #3
 800590e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005910:	2327      	movs	r3, #39	; 0x27
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4013      	ands	r3, r2
 8005920:	d00c      	beq.n	800593c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2202      	movs	r2, #2
 8005926:	4313      	orrs	r3, r2
 8005928:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2280      	movs	r2, #128	; 0x80
 8005930:	0092      	lsls	r2, r2, #2
 8005932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005934:	2327      	movs	r3, #39	; 0x27
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800593c:	2327      	movs	r3, #39	; 0x27
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01d      	beq.n	8005982 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0018      	movs	r0, r3
 800594a:	f7ff fe29 	bl	80055a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	490d      	ldr	r1, [pc, #52]	; (8005990 <I2C_IsErrorOccurred+0x1fc>)
 800595a:	400a      	ands	r2, r1
 800595c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2241      	movs	r2, #65	; 0x41
 800596e:	2120      	movs	r1, #32
 8005970:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2242      	movs	r2, #66	; 0x42
 8005976:	2100      	movs	r1, #0
 8005978:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2240      	movs	r2, #64	; 0x40
 800597e:	2100      	movs	r1, #0
 8005980:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005982:	2327      	movs	r3, #39	; 0x27
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	781b      	ldrb	r3, [r3, #0]
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b00b      	add	sp, #44	; 0x2c
 800598e:	bd90      	pop	{r4, r7, pc}
 8005990:	fe00e800 	.word	0xfe00e800

08005994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	0008      	movs	r0, r1
 800599e:	0011      	movs	r1, r2
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	240a      	movs	r4, #10
 80059a4:	193b      	adds	r3, r7, r4
 80059a6:	1c02      	adds	r2, r0, #0
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	2009      	movs	r0, #9
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	1c0a      	adds	r2, r1, #0
 80059b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059b2:	193b      	adds	r3, r7, r4
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	059b      	lsls	r3, r3, #22
 80059b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059ba:	183b      	adds	r3, r7, r0
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	0419      	lsls	r1, r3, #16
 80059c0:	23ff      	movs	r3, #255	; 0xff
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	4313      	orrs	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059de:	0d51      	lsrs	r1, r2, #21
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	00d2      	lsls	r2, r2, #3
 80059e4:	400a      	ands	r2, r1
 80059e6:	4907      	ldr	r1, [pc, #28]	; (8005a04 <I2C_TransferConfig+0x70>)
 80059e8:	430a      	orrs	r2, r1
 80059ea:	43d2      	mvns	r2, r2
 80059ec:	401a      	ands	r2, r3
 80059ee:	0011      	movs	r1, r2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b007      	add	sp, #28
 8005a00:	bd90      	pop	{r4, r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	03ff63ff 	.word	0x03ff63ff

08005a08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2241      	movs	r2, #65	; 0x41
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d138      	bne.n	8005a90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2240      	movs	r2, #64	; 0x40
 8005a22:	5c9b      	ldrb	r3, [r3, r2]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e032      	b.n	8005a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	2101      	movs	r1, #1
 8005a32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2241      	movs	r2, #65	; 0x41
 8005a38:	2124      	movs	r1, #36	; 0x24
 8005a3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2101      	movs	r1, #1
 8005a48:	438a      	bics	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4911      	ldr	r1, [pc, #68]	; (8005a9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a58:	400a      	ands	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2101      	movs	r1, #1
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2241      	movs	r2, #65	; 0x41
 8005a80:	2120      	movs	r1, #32
 8005a82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2240      	movs	r2, #64	; 0x40
 8005a88:	2100      	movs	r1, #0
 8005a8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e000      	b.n	8005a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
  }
}
 8005a92:	0018      	movs	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b002      	add	sp, #8
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	ffffefff 	.word	0xffffefff

08005aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2241      	movs	r2, #65	; 0x41
 8005aae:	5c9b      	ldrb	r3, [r3, r2]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d139      	bne.n	8005b2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2240      	movs	r2, #64	; 0x40
 8005aba:	5c9b      	ldrb	r3, [r3, r2]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e033      	b.n	8005b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	2101      	movs	r1, #1
 8005aca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2241      	movs	r2, #65	; 0x41
 8005ad0:	2124      	movs	r1, #36	; 0x24
 8005ad2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2101      	movs	r1, #1
 8005ae0:	438a      	bics	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2101      	movs	r1, #1
 8005b12:	430a      	orrs	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2241      	movs	r2, #65	; 0x41
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2240      	movs	r2, #64	; 0x40
 8005b22:	2100      	movs	r1, #0
 8005b24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
  }
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b004      	add	sp, #16
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	fffff0ff 	.word	0xfffff0ff

08005b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b38:	b5b0      	push	{r4, r5, r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f000 fbbf 	bl	80062ca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4c:	4bc9      	ldr	r3, [pc, #804]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	220c      	movs	r2, #12
 8005b52:	4013      	ands	r3, r2
 8005b54:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b56:	4bc7      	ldr	r3, [pc, #796]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	025b      	lsls	r3, r3, #9
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <HAL_RCC_OscConfig+0x36>
 8005b6c:	e07e      	b.n	8005c6c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d007      	beq.n	8005b84 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b0c      	cmp	r3, #12
 8005b78:	d112      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x68>
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	025b      	lsls	r3, r3, #9
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d10d      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	4bbb      	ldr	r3, [pc, #748]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	029b      	lsls	r3, r3, #10
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d100      	bne.n	8005b92 <HAL_RCC_OscConfig+0x5a>
 8005b90:	e06b      	b.n	8005c6a <HAL_RCC_OscConfig+0x132>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d167      	bne.n	8005c6a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f000 fb95 	bl	80062ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_OscConfig+0x84>
 8005bac:	4bb1      	ldr	r3, [pc, #708]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4bb0      	ldr	r3, [pc, #704]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	0249      	lsls	r1, r1, #9
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e027      	b.n	8005c0c <HAL_RCC_OscConfig+0xd4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	23a0      	movs	r3, #160	; 0xa0
 8005bc2:	02db      	lsls	r3, r3, #11
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d10e      	bne.n	8005be6 <HAL_RCC_OscConfig+0xae>
 8005bc8:	4baa      	ldr	r3, [pc, #680]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4ba9      	ldr	r3, [pc, #676]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	02c9      	lsls	r1, r1, #11
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	4ba7      	ldr	r3, [pc, #668]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4ba6      	ldr	r3, [pc, #664]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	0249      	lsls	r1, r1, #9
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e012      	b.n	8005c0c <HAL_RCC_OscConfig+0xd4>
 8005be6:	4ba3      	ldr	r3, [pc, #652]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4ba2      	ldr	r3, [pc, #648]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bec:	49a2      	ldr	r1, [pc, #648]	; (8005e78 <HAL_RCC_OscConfig+0x340>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	4ba0      	ldr	r3, [pc, #640]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	025b      	lsls	r3, r3, #9
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4b9c      	ldr	r3, [pc, #624]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b9b      	ldr	r3, [pc, #620]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005c06:	499d      	ldr	r1, [pc, #628]	; (8005e7c <HAL_RCC_OscConfig+0x344>)
 8005c08:	400a      	ands	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fe fe42 	bl	800489c <HAL_GetTick>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c1c:	e009      	b.n	8005c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c1e:	f7fe fe3d 	bl	800489c <HAL_GetTick>
 8005c22:	0002      	movs	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b64      	cmp	r3, #100	; 0x64
 8005c2a:	d902      	bls.n	8005c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	f000 fb4c 	bl	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c32:	4b90      	ldr	r3, [pc, #576]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d0ef      	beq.n	8005c1e <HAL_RCC_OscConfig+0xe6>
 8005c3e:	e015      	b.n	8005c6c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c40:	f7fe fe2c 	bl	800489c <HAL_GetTick>
 8005c44:	0003      	movs	r3, r0
 8005c46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c4a:	f7fe fe27 	bl	800489c <HAL_GetTick>
 8005c4e:	0002      	movs	r2, r0
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b64      	cmp	r3, #100	; 0x64
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e336      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c5c:	4b85      	ldr	r3, [pc, #532]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	4013      	ands	r3, r2
 8005c66:	d1f0      	bne.n	8005c4a <HAL_RCC_OscConfig+0x112>
 8005c68:	e000      	b.n	8005c6c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2202      	movs	r2, #2
 8005c72:	4013      	ands	r3, r2
 8005c74:	d100      	bne.n	8005c78 <HAL_RCC_OscConfig+0x140>
 8005c76:	e099      	b.n	8005dac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2220      	movs	r2, #32
 8005c82:	4013      	ands	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005c86:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005c8c:	2120      	movs	r1, #32
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	2220      	movs	r2, #32
 8005c96:	4393      	bics	r3, r2
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d13e      	bne.n	8005d24 <HAL_RCC_OscConfig+0x1ec>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d13b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005cac:	4b71      	ldr	r3, [pc, #452]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x188>
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e304      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4a6e      	ldr	r2, [pc, #440]	; (8005e80 <HAL_RCC_OscConfig+0x348>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	0019      	movs	r1, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cd6:	4b67      	ldr	r3, [pc, #412]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2209      	movs	r2, #9
 8005cdc:	4393      	bics	r3, r2
 8005cde:	0019      	movs	r1, r3
 8005ce0:	4b64      	ldr	r3, [pc, #400]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ce8:	f000 fc42 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 8005cec:	0001      	movs	r1, r0
 8005cee:	4b61      	ldr	r3, [pc, #388]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	220f      	movs	r2, #15
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	4a62      	ldr	r2, [pc, #392]	; (8005e84 <HAL_RCC_OscConfig+0x34c>)
 8005cfa:	5cd3      	ldrb	r3, [r2, r3]
 8005cfc:	000a      	movs	r2, r1
 8005cfe:	40da      	lsrs	r2, r3
 8005d00:	4b61      	ldr	r3, [pc, #388]	; (8005e88 <HAL_RCC_OscConfig+0x350>)
 8005d02:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005d04:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <HAL_RCC_OscConfig+0x354>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2513      	movs	r5, #19
 8005d0a:	197c      	adds	r4, r7, r5
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7fe fd7f 	bl	8004810 <HAL_InitTick>
 8005d12:	0003      	movs	r3, r0
 8005d14:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005d16:	197b      	adds	r3, r7, r5
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d046      	beq.n	8005dac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005d1e:	197b      	adds	r3, r7, r5
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	e2d2      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d027      	beq.n	8005d7a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005d2a:	4b52      	ldr	r3, [pc, #328]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2209      	movs	r2, #9
 8005d30:	4393      	bics	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7fe fdae 	bl	800489c <HAL_GetTick>
 8005d40:	0003      	movs	r3, r0
 8005d42:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d46:	f7fe fda9 	bl	800489c <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e2b8      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d58:	4b46      	ldr	r3, [pc, #280]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d0f1      	beq.n	8005d46 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d62:	4b44      	ldr	r3, [pc, #272]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4a46      	ldr	r2, [pc, #280]	; (8005e80 <HAL_RCC_OscConfig+0x348>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	4b40      	ldr	r3, [pc, #256]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	e018      	b.n	8005dac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005d80:	2101      	movs	r1, #1
 8005d82:	438a      	bics	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d86:	f7fe fd89 	bl	800489c <HAL_GetTick>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d90:	f7fe fd84 	bl	800489c <HAL_GetTick>
 8005d94:	0002      	movs	r2, r0
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e293      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005da2:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2204      	movs	r2, #4
 8005da8:	4013      	ands	r3, r2
 8005daa:	d1f1      	bne.n	8005d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	4013      	ands	r3, r2
 8005db4:	d100      	bne.n	8005db8 <HAL_RCC_OscConfig+0x280>
 8005db6:	e0a2      	b.n	8005efe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d140      	bne.n	8005e40 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dbe:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d005      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x29e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e279      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dd6:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4a2d      	ldr	r2, [pc, #180]	; (8005e90 <HAL_RCC_OscConfig+0x358>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	0019      	movs	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de4:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dea:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	0a19      	lsrs	r1, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	061a      	lsls	r2, r3, #24
 8005df8:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	0b5b      	lsrs	r3, r3, #13
 8005e04:	3301      	adds	r3, #1
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	0212      	lsls	r2, r2, #8
 8005e0a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005e0c:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	210f      	movs	r1, #15
 8005e14:	400b      	ands	r3, r1
 8005e16:	491b      	ldr	r1, [pc, #108]	; (8005e84 <HAL_RCC_OscConfig+0x34c>)
 8005e18:	5ccb      	ldrb	r3, [r1, r3]
 8005e1a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_RCC_OscConfig+0x350>)
 8005e1e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005e20:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <HAL_RCC_OscConfig+0x354>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2513      	movs	r5, #19
 8005e26:	197c      	adds	r4, r7, r5
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7fe fcf1 	bl	8004810 <HAL_InitTick>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005e32:	197b      	adds	r3, r7, r5
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d061      	beq.n	8005efe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005e3a:	197b      	adds	r3, r7, r5
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	e244      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d040      	beq.n	8005eca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_OscConfig+0x33c>)
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	0049      	lsls	r1, r1, #1
 8005e52:	430a      	orrs	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fe fd21 	bl	800489c <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e5e:	e019      	b.n	8005e94 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e60:	f7fe fd1c 	bl	800489c <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d912      	bls.n	8005e94 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e22b      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	40021000 	.word	0x40021000
 8005e78:	fffeffff 	.word	0xfffeffff
 8005e7c:	fffbffff 	.word	0xfffbffff
 8005e80:	ffffe0ff 	.word	0xffffe0ff
 8005e84:	080092f8 	.word	0x080092f8
 8005e88:	20000098 	.word	0x20000098
 8005e8c:	2000009c 	.word	0x2000009c
 8005e90:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e94:	4bca      	ldr	r3, [pc, #808]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d0df      	beq.n	8005e60 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ea0:	4bc7      	ldr	r3, [pc, #796]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4ac7      	ldr	r2, [pc, #796]	; (80061c4 <HAL_RCC_OscConfig+0x68c>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	0019      	movs	r1, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eae:	4bc4      	ldr	r3, [pc, #784]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eb4:	4bc2      	ldr	r3, [pc, #776]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	0a19      	lsrs	r1, r3, #8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	061a      	lsls	r2, r3, #24
 8005ec2:	4bbf      	ldr	r3, [pc, #764]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	e019      	b.n	8005efe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eca:	4bbd      	ldr	r3, [pc, #756]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4bbc      	ldr	r3, [pc, #752]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ed0:	49bd      	ldr	r1, [pc, #756]	; (80061c8 <HAL_RCC_OscConfig+0x690>)
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fe fce1 	bl	800489c <HAL_GetTick>
 8005eda:	0003      	movs	r3, r0
 8005edc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ee0:	f7fe fcdc 	bl	800489c <HAL_GetTick>
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e1eb      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ef2:	4bb3      	ldr	r3, [pc, #716]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4013      	ands	r3, r2
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2208      	movs	r2, #8
 8005f04:	4013      	ands	r3, r2
 8005f06:	d036      	beq.n	8005f76 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d019      	beq.n	8005f44 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f10:	4bab      	ldr	r3, [pc, #684]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f14:	4baa      	ldr	r3, [pc, #680]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f16:	2101      	movs	r1, #1
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1c:	f7fe fcbe 	bl	800489c <HAL_GetTick>
 8005f20:	0003      	movs	r3, r0
 8005f22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f26:	f7fe fcb9 	bl	800489c <HAL_GetTick>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e1c8      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f38:	4ba1      	ldr	r3, [pc, #644]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d0f1      	beq.n	8005f26 <HAL_RCC_OscConfig+0x3ee>
 8005f42:	e018      	b.n	8005f76 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f44:	4b9e      	ldr	r3, [pc, #632]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f48:	4b9d      	ldr	r3, [pc, #628]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	438a      	bics	r2, r1
 8005f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f50:	f7fe fca4 	bl	800489c <HAL_GetTick>
 8005f54:	0003      	movs	r3, r0
 8005f56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f5a:	f7fe fc9f 	bl	800489c <HAL_GetTick>
 8005f5e:	0002      	movs	r2, r0
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1ae      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f6c:	4b94      	ldr	r3, [pc, #592]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d1f1      	bne.n	8005f5a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d100      	bne.n	8005f82 <HAL_RCC_OscConfig+0x44a>
 8005f80:	e0ae      	b.n	80060e0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f82:	2023      	movs	r0, #35	; 0x23
 8005f84:	183b      	adds	r3, r7, r0
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8a:	4b8d      	ldr	r3, [pc, #564]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	055b      	lsls	r3, r3, #21
 8005f92:	4013      	ands	r3, r2
 8005f94:	d109      	bne.n	8005faa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	4b8a      	ldr	r3, [pc, #552]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	4b89      	ldr	r3, [pc, #548]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005f9c:	2180      	movs	r1, #128	; 0x80
 8005f9e:	0549      	lsls	r1, r1, #21
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005fa4:	183b      	adds	r3, r7, r0
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005faa:	4b88      	ldr	r3, [pc, #544]	; (80061cc <HAL_RCC_OscConfig+0x694>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d11a      	bne.n	8005fec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fb6:	4b85      	ldr	r3, [pc, #532]	; (80061cc <HAL_RCC_OscConfig+0x694>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b84      	ldr	r3, [pc, #528]	; (80061cc <HAL_RCC_OscConfig+0x694>)
 8005fbc:	2180      	movs	r1, #128	; 0x80
 8005fbe:	0049      	lsls	r1, r1, #1
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc4:	f7fe fc6a 	bl	800489c <HAL_GetTick>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fce:	f7fe fc65 	bl	800489c <HAL_GetTick>
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b64      	cmp	r3, #100	; 0x64
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e174      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe0:	4b7a      	ldr	r3, [pc, #488]	; (80061cc <HAL_RCC_OscConfig+0x694>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_OscConfig+0x4d0>
 8005ff8:	4b71      	ldr	r3, [pc, #452]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ffc:	4b70      	ldr	r3, [pc, #448]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	0049      	lsls	r1, r1, #1
 8006002:	430a      	orrs	r2, r1
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
 8006006:	e031      	b.n	800606c <HAL_RCC_OscConfig+0x534>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10c      	bne.n	800602a <HAL_RCC_OscConfig+0x4f2>
 8006010:	4b6b      	ldr	r3, [pc, #428]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006014:	4b6a      	ldr	r3, [pc, #424]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006016:	496c      	ldr	r1, [pc, #432]	; (80061c8 <HAL_RCC_OscConfig+0x690>)
 8006018:	400a      	ands	r2, r1
 800601a:	651a      	str	r2, [r3, #80]	; 0x50
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 800601e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006020:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006022:	496b      	ldr	r1, [pc, #428]	; (80061d0 <HAL_RCC_OscConfig+0x698>)
 8006024:	400a      	ands	r2, r1
 8006026:	651a      	str	r2, [r3, #80]	; 0x50
 8006028:	e020      	b.n	800606c <HAL_RCC_OscConfig+0x534>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	23a0      	movs	r3, #160	; 0xa0
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	429a      	cmp	r2, r3
 8006034:	d10e      	bne.n	8006054 <HAL_RCC_OscConfig+0x51c>
 8006036:	4b62      	ldr	r3, [pc, #392]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800603a:	4b61      	ldr	r3, [pc, #388]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 800603c:	2180      	movs	r1, #128	; 0x80
 800603e:	00c9      	lsls	r1, r1, #3
 8006040:	430a      	orrs	r2, r1
 8006042:	651a      	str	r2, [r3, #80]	; 0x50
 8006044:	4b5e      	ldr	r3, [pc, #376]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006048:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	0049      	lsls	r1, r1, #1
 800604e:	430a      	orrs	r2, r1
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
 8006052:	e00b      	b.n	800606c <HAL_RCC_OscConfig+0x534>
 8006054:	4b5a      	ldr	r3, [pc, #360]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006058:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 800605a:	495b      	ldr	r1, [pc, #364]	; (80061c8 <HAL_RCC_OscConfig+0x690>)
 800605c:	400a      	ands	r2, r1
 800605e:	651a      	str	r2, [r3, #80]	; 0x50
 8006060:	4b57      	ldr	r3, [pc, #348]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006064:	4b56      	ldr	r3, [pc, #344]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006066:	495a      	ldr	r1, [pc, #360]	; (80061d0 <HAL_RCC_OscConfig+0x698>)
 8006068:	400a      	ands	r2, r1
 800606a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006074:	f7fe fc12 	bl	800489c <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800607c:	e009      	b.n	8006092 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fe fc0d 	bl	800489c <HAL_GetTick>
 8006082:	0002      	movs	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	4a52      	ldr	r2, [pc, #328]	; (80061d4 <HAL_RCC_OscConfig+0x69c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e11b      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006092:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4013      	ands	r3, r2
 800609c:	d0ef      	beq.n	800607e <HAL_RCC_OscConfig+0x546>
 800609e:	e014      	b.n	80060ca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a0:	f7fe fbfc 	bl	800489c <HAL_GetTick>
 80060a4:	0003      	movs	r3, r0
 80060a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060a8:	e009      	b.n	80060be <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fe fbf7 	bl	800489c <HAL_GetTick>
 80060ae:	0002      	movs	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	4a47      	ldr	r2, [pc, #284]	; (80061d4 <HAL_RCC_OscConfig+0x69c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e105      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 80060c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4013      	ands	r3, r2
 80060c8:	d1ef      	bne.n	80060aa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060ca:	2323      	movs	r3, #35	; 0x23
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d105      	bne.n	80060e0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d4:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 80060d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d8:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 80060da:	493f      	ldr	r1, [pc, #252]	; (80061d8 <HAL_RCC_OscConfig+0x6a0>)
 80060dc:	400a      	ands	r2, r1
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2220      	movs	r2, #32
 80060e6:	4013      	ands	r3, r2
 80060e8:	d049      	beq.n	800617e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d026      	beq.n	8006140 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80060f2:	4b33      	ldr	r3, [pc, #204]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	4b32      	ldr	r3, [pc, #200]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 80060f8:	2101      	movs	r1, #1
 80060fa:	430a      	orrs	r2, r1
 80060fc:	609a      	str	r2, [r3, #8]
 80060fe:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006102:	4b2f      	ldr	r3, [pc, #188]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006104:	2101      	movs	r1, #1
 8006106:	430a      	orrs	r2, r1
 8006108:	635a      	str	r2, [r3, #52]	; 0x34
 800610a:	4b34      	ldr	r3, [pc, #208]	; (80061dc <HAL_RCC_OscConfig+0x6a4>)
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	4b33      	ldr	r3, [pc, #204]	; (80061dc <HAL_RCC_OscConfig+0x6a4>)
 8006110:	2180      	movs	r1, #128	; 0x80
 8006112:	0189      	lsls	r1, r1, #6
 8006114:	430a      	orrs	r2, r1
 8006116:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006118:	f7fe fbc0 	bl	800489c <HAL_GetTick>
 800611c:	0003      	movs	r3, r0
 800611e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006122:	f7fe fbbb 	bl	800489c <HAL_GetTick>
 8006126:	0002      	movs	r2, r0
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e0ca      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006134:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2202      	movs	r2, #2
 800613a:	4013      	ands	r3, r2
 800613c:	d0f1      	beq.n	8006122 <HAL_RCC_OscConfig+0x5ea>
 800613e:	e01e      	b.n	800617e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006140:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006146:	2101      	movs	r1, #1
 8006148:	438a      	bics	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <HAL_RCC_OscConfig+0x6a4>)
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_RCC_OscConfig+0x6a4>)
 8006152:	4923      	ldr	r1, [pc, #140]	; (80061e0 <HAL_RCC_OscConfig+0x6a8>)
 8006154:	400a      	ands	r2, r1
 8006156:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fe fba0 	bl	800489c <HAL_GetTick>
 800615c:	0003      	movs	r3, r0
 800615e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006162:	f7fe fb9b 	bl	800489c <HAL_GetTick>
 8006166:	0002      	movs	r2, r0
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0aa      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2202      	movs	r2, #2
 800617a:	4013      	ands	r3, r2
 800617c:	d1f1      	bne.n	8006162 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d100      	bne.n	8006188 <HAL_RCC_OscConfig+0x650>
 8006186:	e09f      	b.n	80062c8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b0c      	cmp	r3, #12
 800618c:	d100      	bne.n	8006190 <HAL_RCC_OscConfig+0x658>
 800618e:	e078      	b.n	8006282 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	2b02      	cmp	r3, #2
 8006196:	d159      	bne.n	800624c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <HAL_RCC_OscConfig+0x688>)
 800619e:	4911      	ldr	r1, [pc, #68]	; (80061e4 <HAL_RCC_OscConfig+0x6ac>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fe fb7a 	bl	800489c <HAL_GetTick>
 80061a8:	0003      	movs	r3, r0
 80061aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061ac:	e01c      	b.n	80061e8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fe fb75 	bl	800489c <HAL_GetTick>
 80061b2:	0002      	movs	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d915      	bls.n	80061e8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e084      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
 80061c0:	40021000 	.word	0x40021000
 80061c4:	ffff1fff 	.word	0xffff1fff
 80061c8:	fffffeff 	.word	0xfffffeff
 80061cc:	40007000 	.word	0x40007000
 80061d0:	fffffbff 	.word	0xfffffbff
 80061d4:	00001388 	.word	0x00001388
 80061d8:	efffffff 	.word	0xefffffff
 80061dc:	40010000 	.word	0x40010000
 80061e0:	ffffdfff 	.word	0xffffdfff
 80061e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061e8:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	049b      	lsls	r3, r3, #18
 80061f0:	4013      	ands	r3, r2
 80061f2:	d1dc      	bne.n	80061ae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f4:	4b37      	ldr	r3, [pc, #220]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a37      	ldr	r2, [pc, #220]	; (80062d8 <HAL_RCC_OscConfig+0x7a0>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	0019      	movs	r1, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	431a      	orrs	r2, r3
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 8006210:	430a      	orrs	r2, r1
 8006212:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006214:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	0449      	lsls	r1, r1, #17
 800621e:	430a      	orrs	r2, r1
 8006220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006222:	f7fe fb3b 	bl	800489c <HAL_GetTick>
 8006226:	0003      	movs	r3, r0
 8006228:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622c:	f7fe fb36 	bl	800489c <HAL_GetTick>
 8006230:	0002      	movs	r2, r0
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e045      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	049b      	lsls	r3, r3, #18
 8006246:	4013      	ands	r3, r2
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x6f4>
 800624a:	e03d      	b.n	80062c8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624c:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 8006252:	4922      	ldr	r1, [pc, #136]	; (80062dc <HAL_RCC_OscConfig+0x7a4>)
 8006254:	400a      	ands	r2, r1
 8006256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fe fb20 	bl	800489c <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006262:	f7fe fb1b 	bl	800489c <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e02a      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	049b      	lsls	r3, r3, #18
 800627c:	4013      	ands	r3, r2
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0x72a>
 8006280:	e022      	b.n	80062c8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e01d      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <HAL_RCC_OscConfig+0x79c>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	2380      	movs	r3, #128	; 0x80
 8006298:	025b      	lsls	r3, r3, #9
 800629a:	401a      	ands	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d10f      	bne.n	80062c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	23f0      	movs	r3, #240	; 0xf0
 80062a8:	039b      	lsls	r3, r3, #14
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	23c0      	movs	r3, #192	; 0xc0
 80062b8:	041b      	lsls	r3, r3, #16
 80062ba:	401a      	ands	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	0018      	movs	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b00a      	add	sp, #40	; 0x28
 80062d0:	bdb0      	pop	{r4, r5, r7, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	40021000 	.word	0x40021000
 80062d8:	ff02ffff 	.word	0xff02ffff
 80062dc:	feffffff 	.word	0xfeffffff

080062e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e0:	b5b0      	push	{r4, r5, r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e128      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f4:	4b96      	ldr	r3, [pc, #600]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	4013      	ands	r3, r2
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d91e      	bls.n	8006340 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b93      	ldr	r3, [pc, #588]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2201      	movs	r2, #1
 8006308:	4393      	bics	r3, r2
 800630a:	0019      	movs	r1, r3
 800630c:	4b90      	ldr	r3, [pc, #576]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006314:	f7fe fac2 	bl	800489c <HAL_GetTick>
 8006318:	0003      	movs	r3, r0
 800631a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800631c:	e009      	b.n	8006332 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631e:	f7fe fabd 	bl	800489c <HAL_GetTick>
 8006322:	0002      	movs	r2, r0
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	4a8a      	ldr	r2, [pc, #552]	; (8006554 <HAL_RCC_ClockConfig+0x274>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e109      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b87      	ldr	r3, [pc, #540]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2201      	movs	r2, #1
 8006338:	4013      	ands	r3, r2
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d1ee      	bne.n	800631e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2202      	movs	r2, #2
 8006346:	4013      	ands	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800634a:	4b83      	ldr	r3, [pc, #524]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	22f0      	movs	r2, #240	; 0xf0
 8006350:	4393      	bics	r3, r2
 8006352:	0019      	movs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	4b7f      	ldr	r3, [pc, #508]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 800635a:	430a      	orrs	r2, r1
 800635c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	4013      	ands	r3, r2
 8006366:	d100      	bne.n	800636a <HAL_RCC_ClockConfig+0x8a>
 8006368:	e089      	b.n	800647e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d107      	bne.n	8006382 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006372:	4b79      	ldr	r3, [pc, #484]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	2380      	movs	r3, #128	; 0x80
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	4013      	ands	r3, r2
 800637c:	d120      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0e1      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800638a:	4b73      	ldr	r3, [pc, #460]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	049b      	lsls	r3, r3, #18
 8006392:	4013      	ands	r3, r2
 8006394:	d114      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e0d5      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a2:	4b6d      	ldr	r3, [pc, #436]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2204      	movs	r2, #4
 80063a8:	4013      	ands	r3, r2
 80063aa:	d109      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0ca      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80063b0:	4b69      	ldr	r3, [pc, #420]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4013      	ands	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0c2      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c0:	4b65      	ldr	r3, [pc, #404]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2203      	movs	r2, #3
 80063c6:	4393      	bics	r3, r2
 80063c8:	0019      	movs	r1, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	4b62      	ldr	r3, [pc, #392]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80063d0:	430a      	orrs	r2, r1
 80063d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d4:	f7fe fa62 	bl	800489c <HAL_GetTick>
 80063d8:	0003      	movs	r3, r0
 80063da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d111      	bne.n	8006408 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e4:	e009      	b.n	80063fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e6:	f7fe fa59 	bl	800489c <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	4a58      	ldr	r2, [pc, #352]	; (8006554 <HAL_RCC_ClockConfig+0x274>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e0a5      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063fa:	4b57      	ldr	r3, [pc, #348]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	220c      	movs	r2, #12
 8006400:	4013      	ands	r3, r2
 8006402:	2b08      	cmp	r3, #8
 8006404:	d1ef      	bne.n	80063e6 <HAL_RCC_ClockConfig+0x106>
 8006406:	e03a      	b.n	800647e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d111      	bne.n	8006434 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006410:	e009      	b.n	8006426 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006412:	f7fe fa43 	bl	800489c <HAL_GetTick>
 8006416:	0002      	movs	r2, r0
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	4a4d      	ldr	r2, [pc, #308]	; (8006554 <HAL_RCC_ClockConfig+0x274>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e08f      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006426:	4b4c      	ldr	r3, [pc, #304]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	220c      	movs	r2, #12
 800642c:	4013      	ands	r3, r2
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d1ef      	bne.n	8006412 <HAL_RCC_ClockConfig+0x132>
 8006432:	e024      	b.n	800647e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d11b      	bne.n	8006474 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800643c:	e009      	b.n	8006452 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800643e:	f7fe fa2d 	bl	800489c <HAL_GetTick>
 8006442:	0002      	movs	r2, r0
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	4a42      	ldr	r2, [pc, #264]	; (8006554 <HAL_RCC_ClockConfig+0x274>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e079      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006452:	4b41      	ldr	r3, [pc, #260]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	220c      	movs	r2, #12
 8006458:	4013      	ands	r3, r2
 800645a:	2b04      	cmp	r3, #4
 800645c:	d1ef      	bne.n	800643e <HAL_RCC_ClockConfig+0x15e>
 800645e:	e00e      	b.n	800647e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006460:	f7fe fa1c 	bl	800489c <HAL_GetTick>
 8006464:	0002      	movs	r2, r0
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	4a3a      	ldr	r2, [pc, #232]	; (8006554 <HAL_RCC_ClockConfig+0x274>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e068      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006474:	4b38      	ldr	r3, [pc, #224]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	220c      	movs	r2, #12
 800647a:	4013      	ands	r3, r2
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800647e:	4b34      	ldr	r3, [pc, #208]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2201      	movs	r2, #1
 8006484:	4013      	ands	r3, r2
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d21e      	bcs.n	80064ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648c:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	4393      	bics	r3, r2
 8006494:	0019      	movs	r1, r3
 8006496:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800649e:	f7fe f9fd 	bl	800489c <HAL_GetTick>
 80064a2:	0003      	movs	r3, r0
 80064a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	e009      	b.n	80064bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a8:	f7fe f9f8 	bl	800489c <HAL_GetTick>
 80064ac:	0002      	movs	r2, r0
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	4a28      	ldr	r2, [pc, #160]	; (8006554 <HAL_RCC_ClockConfig+0x274>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e044      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <HAL_RCC_ClockConfig+0x270>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2201      	movs	r2, #1
 80064c2:	4013      	ands	r3, r2
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d1ee      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2204      	movs	r2, #4
 80064d0:	4013      	ands	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d4:	4b20      	ldr	r3, [pc, #128]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4a20      	ldr	r2, [pc, #128]	; (800655c <HAL_RCC_ClockConfig+0x27c>)
 80064da:	4013      	ands	r3, r2
 80064dc:	0019      	movs	r1, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80064e4:	430a      	orrs	r2, r1
 80064e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2208      	movs	r2, #8
 80064ee:	4013      	ands	r3, r2
 80064f0:	d00a      	beq.n	8006508 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064f2:	4b19      	ldr	r3, [pc, #100]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_RCC_ClockConfig+0x280>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	0019      	movs	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	00da      	lsls	r2, r3, #3
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 8006504:	430a      	orrs	r2, r1
 8006506:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006508:	f000 f832 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 800650c:	0001      	movs	r1, r0
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <HAL_RCC_ClockConfig+0x278>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	220f      	movs	r2, #15
 8006516:	4013      	ands	r3, r2
 8006518:	4a12      	ldr	r2, [pc, #72]	; (8006564 <HAL_RCC_ClockConfig+0x284>)
 800651a:	5cd3      	ldrb	r3, [r2, r3]
 800651c:	000a      	movs	r2, r1
 800651e:	40da      	lsrs	r2, r3
 8006520:	4b11      	ldr	r3, [pc, #68]	; (8006568 <HAL_RCC_ClockConfig+0x288>)
 8006522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006524:	4b11      	ldr	r3, [pc, #68]	; (800656c <HAL_RCC_ClockConfig+0x28c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	250b      	movs	r5, #11
 800652a:	197c      	adds	r4, r7, r5
 800652c:	0018      	movs	r0, r3
 800652e:	f7fe f96f 	bl	8004810 <HAL_InitTick>
 8006532:	0003      	movs	r3, r0
 8006534:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006536:	197b      	adds	r3, r7, r5
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800653e:	197b      	adds	r3, r7, r5
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	e000      	b.n	8006546 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b004      	add	sp, #16
 800654c:	bdb0      	pop	{r4, r5, r7, pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	40022000 	.word	0x40022000
 8006554:	00001388 	.word	0x00001388
 8006558:	40021000 	.word	0x40021000
 800655c:	fffff8ff 	.word	0xfffff8ff
 8006560:	ffffc7ff 	.word	0xffffc7ff
 8006564:	080092f8 	.word	0x080092f8
 8006568:	20000098 	.word	0x20000098
 800656c:	2000009c 	.word	0x2000009c

08006570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006570:	b5b0      	push	{r4, r5, r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006576:	4b4c      	ldr	r3, [pc, #304]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800657c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657e:	230c      	movs	r3, #12
 8006580:	4013      	ands	r3, r2
 8006582:	2b0c      	cmp	r3, #12
 8006584:	d014      	beq.n	80065b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006586:	d900      	bls.n	800658a <HAL_RCC_GetSysClockFreq+0x1a>
 8006588:	e07b      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x112>
 800658a:	2b04      	cmp	r3, #4
 800658c:	d002      	beq.n	8006594 <HAL_RCC_GetSysClockFreq+0x24>
 800658e:	2b08      	cmp	r3, #8
 8006590:	d00b      	beq.n	80065aa <HAL_RCC_GetSysClockFreq+0x3a>
 8006592:	e076      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006594:	4b44      	ldr	r3, [pc, #272]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2210      	movs	r2, #16
 800659a:	4013      	ands	r3, r2
 800659c:	d002      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800659e:	4b43      	ldr	r3, [pc, #268]	; (80066ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80065a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80065a2:	e07c      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80065a4:	4b42      	ldr	r3, [pc, #264]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065a8:	e079      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065aa:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80065ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065ae:	e076      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	0c9a      	lsrs	r2, r3, #18
 80065b4:	230f      	movs	r3, #15
 80065b6:	401a      	ands	r2, r3
 80065b8:	4b3f      	ldr	r3, [pc, #252]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80065ba:	5c9b      	ldrb	r3, [r3, r2]
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	0d9a      	lsrs	r2, r3, #22
 80065c2:	2303      	movs	r3, #3
 80065c4:	4013      	ands	r3, r2
 80065c6:	3301      	adds	r3, #1
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ca:	4b37      	ldr	r3, [pc, #220]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	2380      	movs	r3, #128	; 0x80
 80065d0:	025b      	lsls	r3, r3, #9
 80065d2:	4013      	ands	r3, r2
 80065d4:	d01a      	beq.n	800660c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	4a35      	ldr	r2, [pc, #212]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80065e0:	2300      	movs	r3, #0
 80065e2:	69b8      	ldr	r0, [r7, #24]
 80065e4:	69f9      	ldr	r1, [r7, #28]
 80065e6:	f7f9 fe83 	bl	80002f0 <__aeabi_lmul>
 80065ea:	0002      	movs	r2, r0
 80065ec:	000b      	movs	r3, r1
 80065ee:	0010      	movs	r0, r2
 80065f0:	0019      	movs	r1, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f7f9 fe57 	bl	80002b0 <__aeabi_uldivmod>
 8006602:	0002      	movs	r2, r0
 8006604:	000b      	movs	r3, r1
 8006606:	0013      	movs	r3, r2
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
 800660a:	e037      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800660c:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2210      	movs	r2, #16
 8006612:	4013      	ands	r3, r2
 8006614:	d01a      	beq.n	800664c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	4a23      	ldr	r2, [pc, #140]	; (80066ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8006620:	2300      	movs	r3, #0
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	f7f9 fe63 	bl	80002f0 <__aeabi_lmul>
 800662a:	0002      	movs	r2, r0
 800662c:	000b      	movs	r3, r1
 800662e:	0010      	movs	r0, r2
 8006630:	0019      	movs	r1, r3
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f7f9 fe37 	bl	80002b0 <__aeabi_uldivmod>
 8006642:	0002      	movs	r2, r0
 8006644:	000b      	movs	r3, r1
 8006646:	0013      	movs	r3, r2
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
 800664a:	e017      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	0018      	movs	r0, r3
 8006650:	2300      	movs	r3, #0
 8006652:	0019      	movs	r1, r3
 8006654:	4a16      	ldr	r2, [pc, #88]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8006656:	2300      	movs	r3, #0
 8006658:	f7f9 fe4a 	bl	80002f0 <__aeabi_lmul>
 800665c:	0002      	movs	r2, r0
 800665e:	000b      	movs	r3, r1
 8006660:	0010      	movs	r0, r2
 8006662:	0019      	movs	r1, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	001c      	movs	r4, r3
 8006668:	2300      	movs	r3, #0
 800666a:	001d      	movs	r5, r3
 800666c:	0022      	movs	r2, r4
 800666e:	002b      	movs	r3, r5
 8006670:	f7f9 fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8006674:	0002      	movs	r2, r0
 8006676:	000b      	movs	r3, r1
 8006678:	0013      	movs	r3, r2
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006680:	e00d      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	0b5b      	lsrs	r3, r3, #13
 8006688:	2207      	movs	r2, #7
 800668a:	4013      	ands	r3, r2
 800668c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	3301      	adds	r3, #1
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	0212      	lsls	r2, r2, #8
 8006696:	409a      	lsls	r2, r3
 8006698:	0013      	movs	r3, r2
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800669c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b00e      	add	sp, #56	; 0x38
 80066a6:	bdb0      	pop	{r4, r5, r7, pc}
 80066a8:	40021000 	.word	0x40021000
 80066ac:	003d0900 	.word	0x003d0900
 80066b0:	00f42400 	.word	0x00f42400
 80066b4:	007a1200 	.word	0x007a1200
 80066b8:	08009310 	.word	0x08009310

080066bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <HAL_RCC_GetHCLKFreq+0x10>)
 80066c2:	681b      	ldr	r3, [r3, #0]
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	20000098 	.word	0x20000098

080066d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066d4:	f7ff fff2 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 80066d8:	0001      	movs	r1, r0
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	2207      	movs	r2, #7
 80066e2:	4013      	ands	r3, r2
 80066e4:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066e6:	5cd3      	ldrb	r3, [r2, r3]
 80066e8:	40d9      	lsrs	r1, r3
 80066ea:	000b      	movs	r3, r1
}
 80066ec:	0018      	movs	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	40021000 	.word	0x40021000
 80066f8:	08009308 	.word	0x08009308

080066fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006700:	f7ff ffdc 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 8006704:	0001      	movs	r1, r0
 8006706:	4b06      	ldr	r3, [pc, #24]	; (8006720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	0adb      	lsrs	r3, r3, #11
 800670c:	2207      	movs	r2, #7
 800670e:	4013      	ands	r3, r2
 8006710:	4a04      	ldr	r2, [pc, #16]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006712:	5cd3      	ldrb	r3, [r2, r3]
 8006714:	40d9      	lsrs	r1, r3
 8006716:	000b      	movs	r3, r1
}
 8006718:	0018      	movs	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	40021000 	.word	0x40021000
 8006724:	08009308 	.word	0x08009308

08006728 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006730:	2317      	movs	r3, #23
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2220      	movs	r2, #32
 800673e:	4013      	ands	r3, r2
 8006740:	d106      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	4013      	ands	r3, r2
 800674c:	d100      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800674e:	e104      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006750:	4bb9      	ldr	r3, [pc, #740]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006754:	2380      	movs	r3, #128	; 0x80
 8006756:	055b      	lsls	r3, r3, #21
 8006758:	4013      	ands	r3, r2
 800675a:	d10a      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800675c:	4bb6      	ldr	r3, [pc, #728]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800675e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006760:	4bb5      	ldr	r3, [pc, #724]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	0549      	lsls	r1, r1, #21
 8006766:	430a      	orrs	r2, r1
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800676a:	2317      	movs	r3, #23
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006772:	4bb2      	ldr	r3, [pc, #712]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	4013      	ands	r3, r2
 800677c:	d11a      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800677e:	4baf      	ldr	r3, [pc, #700]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4bae      	ldr	r3, [pc, #696]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	0049      	lsls	r1, r1, #1
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678c:	f7fe f886 	bl	800489c <HAL_GetTick>
 8006790:	0003      	movs	r3, r0
 8006792:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006794:	e008      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006796:	f7fe f881 	bl	800489c <HAL_GetTick>
 800679a:	0002      	movs	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b64      	cmp	r3, #100	; 0x64
 80067a2:	d901      	bls.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e143      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a8:	4ba4      	ldr	r3, [pc, #656]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	4013      	ands	r3, r2
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80067b4:	4ba0      	ldr	r3, [pc, #640]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	23c0      	movs	r3, #192	; 0xc0
 80067ba:	039b      	lsls	r3, r3, #14
 80067bc:	4013      	ands	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	23c0      	movs	r3, #192	; 0xc0
 80067c6:	039b      	lsls	r3, r3, #14
 80067c8:	4013      	ands	r3, r2
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d107      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	23c0      	movs	r3, #192	; 0xc0
 80067d6:	039b      	lsls	r3, r3, #14
 80067d8:	4013      	ands	r3, r2
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d013      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	23c0      	movs	r3, #192	; 0xc0
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	401a      	ands	r2, r3
 80067ea:	23c0      	movs	r3, #192	; 0xc0
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d10a      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067f2:	4b91      	ldr	r3, [pc, #580]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	2380      	movs	r3, #128	; 0x80
 80067f8:	029b      	lsls	r3, r3, #10
 80067fa:	401a      	ands	r2, r3
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	429a      	cmp	r2, r3
 8006802:	d101      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e113      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006808:	4b8b      	ldr	r3, [pc, #556]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800680a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800680c:	23c0      	movs	r3, #192	; 0xc0
 800680e:	029b      	lsls	r3, r3, #10
 8006810:	4013      	ands	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d049      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	23c0      	movs	r3, #192	; 0xc0
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	4013      	ands	r3, r2
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d004      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2220      	movs	r2, #32
 8006830:	4013      	ands	r3, r2
 8006832:	d10d      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	23c0      	movs	r3, #192	; 0xc0
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	4013      	ands	r3, r2
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	429a      	cmp	r2, r3
 8006842:	d034      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4013      	ands	r3, r2
 800684e:	d02e      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006850:	4b79      	ldr	r3, [pc, #484]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006854:	4a7a      	ldr	r2, [pc, #488]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006856:	4013      	ands	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800685a:	4b77      	ldr	r3, [pc, #476]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800685c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800685e:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	0309      	lsls	r1, r1, #12
 8006864:	430a      	orrs	r2, r1
 8006866:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006868:	4b73      	ldr	r3, [pc, #460]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800686a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800686c:	4b72      	ldr	r3, [pc, #456]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800686e:	4975      	ldr	r1, [pc, #468]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006870:	400a      	ands	r2, r1
 8006872:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006874:	4b70      	ldr	r3, [pc, #448]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4013      	ands	r3, r2
 8006882:	d014      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006884:	f7fe f80a 	bl	800489c <HAL_GetTick>
 8006888:	0003      	movs	r3, r0
 800688a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800688c:	e009      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800688e:	f7fe f805 	bl	800489c <HAL_GetTick>
 8006892:	0002      	movs	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	4a6b      	ldr	r2, [pc, #428]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d901      	bls.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e0c6      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068a2:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4013      	ands	r3, r2
 80068ac:	d0ef      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	4013      	ands	r3, r2
 80068b8:	d01f      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	23c0      	movs	r3, #192	; 0xc0
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	401a      	ands	r2, r3
 80068c4:	23c0      	movs	r3, #192	; 0xc0
 80068c6:	029b      	lsls	r3, r3, #10
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d10c      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80068cc:	4b5a      	ldr	r3, [pc, #360]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a5e      	ldr	r2, [pc, #376]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	0019      	movs	r1, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	23c0      	movs	r3, #192	; 0xc0
 80068dc:	039b      	lsls	r3, r3, #14
 80068de:	401a      	ands	r2, r3
 80068e0:	4b55      	ldr	r3, [pc, #340]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068e2:	430a      	orrs	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	4b54      	ldr	r3, [pc, #336]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	23c0      	movs	r3, #192	; 0xc0
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	401a      	ands	r2, r3
 80068f4:	4b50      	ldr	r3, [pc, #320]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2220      	movs	r2, #32
 8006900:	4013      	ands	r3, r2
 8006902:	d01f      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	23c0      	movs	r3, #192	; 0xc0
 800690a:	029b      	lsls	r3, r3, #10
 800690c:	401a      	ands	r2, r3
 800690e:	23c0      	movs	r3, #192	; 0xc0
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	429a      	cmp	r2, r3
 8006914:	d10c      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006916:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a4c      	ldr	r2, [pc, #304]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800691c:	4013      	ands	r3, r2
 800691e:	0019      	movs	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	23c0      	movs	r3, #192	; 0xc0
 8006926:	039b      	lsls	r3, r3, #14
 8006928:	401a      	ands	r2, r3
 800692a:	4b43      	ldr	r3, [pc, #268]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006932:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	23c0      	movs	r3, #192	; 0xc0
 800693a:	029b      	lsls	r3, r3, #10
 800693c:	401a      	ands	r2, r3
 800693e:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006940:	430a      	orrs	r2, r1
 8006942:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006944:	2317      	movs	r3, #23
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d105      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694e:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006954:	493e      	ldr	r1, [pc, #248]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006956:	400a      	ands	r2, r1
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	4013      	ands	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006964:	4b34      	ldr	r3, [pc, #208]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006968:	2203      	movs	r2, #3
 800696a:	4393      	bics	r3, r2
 800696c:	0019      	movs	r1, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006974:	430a      	orrs	r2, r1
 8006976:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2202      	movs	r2, #2
 800697e:	4013      	ands	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006982:	4b2d      	ldr	r3, [pc, #180]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006986:	220c      	movs	r2, #12
 8006988:	4393      	bics	r3, r2
 800698a:	0019      	movs	r1, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	4b29      	ldr	r3, [pc, #164]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006992:	430a      	orrs	r2, r1
 8006994:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2204      	movs	r2, #4
 800699c:	4013      	ands	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069a0:	4b25      	ldr	r3, [pc, #148]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a4:	4a2b      	ldr	r2, [pc, #172]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	0019      	movs	r1, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069b0:	430a      	orrs	r2, r1
 80069b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2208      	movs	r2, #8
 80069ba:	4013      	ands	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069be:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	0019      	movs	r1, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069ce:	430a      	orrs	r2, r1
 80069d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4013      	ands	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069de:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	0019      	movs	r1, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069ee:	430a      	orrs	r2, r1
 80069f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	4013      	ands	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069fc:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a00:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	0019      	movs	r1, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2280      	movs	r2, #128	; 0x80
 8006a16:	4013      	ands	r3, r2
 8006a18:	d009      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1e:	4a10      	ldr	r2, [pc, #64]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	0019      	movs	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b006      	add	sp, #24
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40007000 	.word	0x40007000
 8006a40:	fffcffff 	.word	0xfffcffff
 8006a44:	fff7ffff 	.word	0xfff7ffff
 8006a48:	00001388 	.word	0x00001388
 8006a4c:	ffcfffff 	.word	0xffcfffff
 8006a50:	efffffff 	.word	0xefffffff
 8006a54:	fffff3ff 	.word	0xfffff3ff
 8006a58:	ffffcfff 	.word	0xffffcfff
 8006a5c:	fbffffff 	.word	0xfbffffff
 8006a60:	fff3ffff 	.word	0xfff3ffff

08006a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e032      	b.n	8006adc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2239      	movs	r2, #57	; 0x39
 8006a7a:	5c9b      	ldrb	r3, [r3, r2]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d107      	bne.n	8006a92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2238      	movs	r2, #56	; 0x38
 8006a86:	2100      	movs	r1, #0
 8006a88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7fd fda7 	bl	80045e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2239      	movs	r2, #57	; 0x39
 8006a96:	2102      	movs	r1, #2
 8006a98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	0010      	movs	r0, r2
 8006aa6:	f000 f977 	bl	8006d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	223e      	movs	r2, #62	; 0x3e
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	223a      	movs	r2, #58	; 0x3a
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	5499      	strb	r1, [r3, r2]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	223b      	movs	r2, #59	; 0x3b
 8006abe:	2101      	movs	r1, #1
 8006ac0:	5499      	strb	r1, [r3, r2]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	223c      	movs	r2, #60	; 0x3c
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	5499      	strb	r1, [r3, r2]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	223d      	movs	r2, #61	; 0x3d
 8006ace:	2101      	movs	r1, #1
 8006ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2239      	movs	r2, #57	; 0x39
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2239      	movs	r2, #57	; 0x39
 8006af0:	5c9b      	ldrb	r3, [r3, r2]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d001      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e03b      	b.n	8006b74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2239      	movs	r2, #57	; 0x39
 8006b00:	2102      	movs	r1, #2
 8006b02:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2101      	movs	r1, #1
 8006b10:	430a      	orrs	r2, r1
 8006b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	05db      	lsls	r3, r3, #23
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d00e      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x5a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <HAL_TIM_Base_Start_IT+0x98>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x5a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x5a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a12      	ldr	r2, [pc, #72]	; (8006b84 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d111      	bne.n	8006b62 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2207      	movs	r2, #7
 8006b46:	4013      	ands	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b06      	cmp	r3, #6
 8006b4e:	d010      	beq.n	8006b72 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b60:	e007      	b.n	8006b72 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b004      	add	sp, #16
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40010800 	.word	0x40010800
 8006b84:	40011400 	.word	0x40011400

08006b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2202      	movs	r2, #2
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d124      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d11d      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	4252      	negs	r2, r2
 8006bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f000 f8cc 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006bd0:	e007      	b.n	8006be2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 f8bf 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 f8cb 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d125      	bne.n	8006c42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d11e      	bne.n	8006c42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2205      	movs	r2, #5
 8006c0a:	4252      	negs	r2, r2
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	23c0      	movs	r3, #192	; 0xc0
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 f89f 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006c2a:	e007      	b.n	8006c3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 f892 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 f89e 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d124      	bne.n	8006c9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2208      	movs	r2, #8
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d11d      	bne.n	8006c9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2209      	movs	r2, #9
 8006c64:	4252      	negs	r2, r2
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	2203      	movs	r2, #3
 8006c76:	4013      	ands	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 f873 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006c82:	e007      	b.n	8006c94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	0018      	movs	r0, r3
 8006c88:	f000 f866 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 f872 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2210      	movs	r2, #16
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d125      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2210      	movs	r2, #16
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d11e      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2211      	movs	r2, #17
 8006cbc:	4252      	negs	r2, r2
 8006cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	23c0      	movs	r3, #192	; 0xc0
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 f846 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e007      	b.n	8006cee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 f839 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 f845 	bl	8006d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10f      	bne.n	8006d22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d108      	bne.n	8006d22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2202      	movs	r2, #2
 8006d16:	4252      	negs	r2, r2
 8006d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7fd f8ad 	bl	8003e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2240      	movs	r2, #64	; 0x40
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d10f      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d108      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2241      	movs	r2, #65	; 0x41
 8006d44:	4252      	negs	r2, r2
 8006d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f000 f81c 	bl	8006d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d50:	46c0      	nop			; (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b002      	add	sp, #8
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d60:	46c0      	nop			; (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d70:	46c0      	nop			; (mov r8, r8)
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b002      	add	sp, #8
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d80:	46c0      	nop			; (mov r8, r8)
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b002      	add	sp, #8
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d90:	46c0      	nop			; (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b002      	add	sp, #8
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	05db      	lsls	r3, r3, #23
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d00b      	beq.n	8006dca <TIM_Base_SetConfig+0x32>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a23      	ldr	r2, [pc, #140]	; (8006e44 <TIM_Base_SetConfig+0xac>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_Base_SetConfig+0x32>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <TIM_Base_SetConfig+0xb0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_Base_SetConfig+0x32>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <TIM_Base_SetConfig+0xb4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d108      	bne.n	8006ddc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2270      	movs	r2, #112	; 0x70
 8006dce:	4393      	bics	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	2380      	movs	r3, #128	; 0x80
 8006de0:	05db      	lsls	r3, r3, #23
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d00b      	beq.n	8006dfe <TIM_Base_SetConfig+0x66>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <TIM_Base_SetConfig+0xac>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <TIM_Base_SetConfig+0x66>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <TIM_Base_SetConfig+0xb0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0x66>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a14      	ldr	r2, [pc, #80]	; (8006e4c <TIM_Base_SetConfig+0xb4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <TIM_Base_SetConfig+0xb8>)
 8006e02:	4013      	ands	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	4393      	bics	r3, r2
 8006e16:	001a      	movs	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	615a      	str	r2, [r3, #20]
}
 8006e3c:	46c0      	nop			; (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b004      	add	sp, #16
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40010800 	.word	0x40010800
 8006e4c:	40011400 	.word	0x40011400
 8006e50:	fffffcff 	.word	0xfffffcff

08006e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2238      	movs	r2, #56	; 0x38
 8006e62:	5c9b      	ldrb	r3, [r3, r2]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e047      	b.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2238      	movs	r2, #56	; 0x38
 8006e70:	2101      	movs	r1, #1
 8006e72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2239      	movs	r2, #57	; 0x39
 8006e78:	2102      	movs	r1, #2
 8006e7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2270      	movs	r2, #112	; 0x70
 8006e90:	4393      	bics	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	2380      	movs	r3, #128	; 0x80
 8006eac:	05db      	lsls	r3, r3, #23
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d00e      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a13      	ldr	r2, [pc, #76]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a11      	ldr	r2, [pc, #68]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a10      	ldr	r2, [pc, #64]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10c      	bne.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2280      	movs	r2, #128	; 0x80
 8006ed4:	4393      	bics	r3, r2
 8006ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2239      	movs	r2, #57	; 0x39
 8006eee:	2101      	movs	r1, #1
 8006ef0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2238      	movs	r2, #56	; 0x38
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	0018      	movs	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b004      	add	sp, #16
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40010800 	.word	0x40010800
 8006f0c:	40011400 	.word	0x40011400

08006f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e044      	b.n	8006fac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2278      	movs	r2, #120	; 0x78
 8006f2e:	2100      	movs	r1, #0
 8006f30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7fd fb73 	bl	8004620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2224      	movs	r2, #36	; 0x24
 8006f3e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	438a      	bics	r2, r1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	0018      	movs	r0, r3
 8006f54:	f000 f8d0 	bl	80070f8 <UART_SetConfig>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e024      	b.n	8006fac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f000 fb61 	bl	8007634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	490d      	ldr	r1, [pc, #52]	; (8006fb4 <HAL_UART_Init+0xa4>)
 8006f7e:	400a      	ands	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	212a      	movs	r1, #42	; 0x2a
 8006f8e:	438a      	bics	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f000 fbf9 	bl	800779c <UART_CheckIdleState>
 8006faa:	0003      	movs	r3, r0
}
 8006fac:	0018      	movs	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b002      	add	sp, #8
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	ffffb7ff 	.word	0xffffb7ff

08006fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08a      	sub	sp, #40	; 0x28
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	1dbb      	adds	r3, r7, #6
 8006fc6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d000      	beq.n	8006fd2 <HAL_UART_Transmit+0x1a>
 8006fd0:	e08c      	b.n	80070ec <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_UART_Transmit+0x28>
 8006fd8:	1dbb      	adds	r3, r7, #6
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e084      	b.n	80070ee <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	2380      	movs	r3, #128	; 0x80
 8006fea:	015b      	lsls	r3, r3, #5
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d109      	bne.n	8007004 <HAL_UART_Transmit+0x4c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	d001      	beq.n	8007004 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e074      	b.n	80070ee <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2284      	movs	r2, #132	; 0x84
 8007008:	2100      	movs	r1, #0
 800700a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2221      	movs	r2, #33	; 0x21
 8007010:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007012:	f7fd fc43 	bl	800489c <HAL_GetTick>
 8007016:	0003      	movs	r3, r0
 8007018:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1dba      	adds	r2, r7, #6
 800701e:	2150      	movs	r1, #80	; 0x50
 8007020:	8812      	ldrh	r2, [r2, #0]
 8007022:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1dba      	adds	r2, r7, #6
 8007028:	2152      	movs	r1, #82	; 0x52
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	2380      	movs	r3, #128	; 0x80
 8007034:	015b      	lsls	r3, r3, #5
 8007036:	429a      	cmp	r2, r3
 8007038:	d108      	bne.n	800704c <HAL_UART_Transmit+0x94>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e003      	b.n	8007054 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007054:	e02f      	b.n	80070b6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	0013      	movs	r3, r2
 8007060:	2200      	movs	r2, #0
 8007062:	2180      	movs	r1, #128	; 0x80
 8007064:	f000 fc42 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 8007068:	1e03      	subs	r3, r0, #0
 800706a:	d004      	beq.n	8007076 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e03b      	b.n	80070ee <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	001a      	movs	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	05d2      	lsls	r2, r2, #23
 8007088:	0dd2      	lsrs	r2, r2, #23
 800708a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	3302      	adds	r3, #2
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e007      	b.n	80070a4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2252      	movs	r2, #82	; 0x52
 80070a8:	5a9b      	ldrh	r3, [r3, r2]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b299      	uxth	r1, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2252      	movs	r2, #82	; 0x52
 80070b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2252      	movs	r2, #82	; 0x52
 80070ba:	5a9b      	ldrh	r3, [r3, r2]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1c9      	bne.n	8007056 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	0013      	movs	r3, r2
 80070cc:	2200      	movs	r2, #0
 80070ce:	2140      	movs	r1, #64	; 0x40
 80070d0:	f000 fc0c 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 80070d4:	1e03      	subs	r3, r0, #0
 80070d6:	d004      	beq.n	80070e2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e005      	b.n	80070ee <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b008      	add	sp, #32
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f8:	b5b0      	push	{r4, r5, r7, lr}
 80070fa:	b08e      	sub	sp, #56	; 0x38
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007100:	231a      	movs	r3, #26
 8007102:	2218      	movs	r2, #24
 8007104:	189b      	adds	r3, r3, r2
 8007106:	19db      	adds	r3, r3, r7
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	431a      	orrs	r2, r3
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	431a      	orrs	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4313      	orrs	r3, r2
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4ac3      	ldr	r2, [pc, #780]	; (8007438 <UART_SetConfig+0x340>)
 800712c:	4013      	ands	r3, r2
 800712e:	0019      	movs	r1, r3
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007136:	430a      	orrs	r2, r1
 8007138:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	4abe      	ldr	r2, [pc, #760]	; (800743c <UART_SetConfig+0x344>)
 8007142:	4013      	ands	r3, r2
 8007144:	0019      	movs	r1, r3
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4ab8      	ldr	r2, [pc, #736]	; (8007440 <UART_SetConfig+0x348>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007168:	4313      	orrs	r3, r2
 800716a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	4ab4      	ldr	r2, [pc, #720]	; (8007444 <UART_SetConfig+0x34c>)
 8007174:	4013      	ands	r3, r2
 8007176:	0019      	movs	r1, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800717e:	430a      	orrs	r2, r1
 8007180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4ab0      	ldr	r2, [pc, #704]	; (8007448 <UART_SetConfig+0x350>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d131      	bne.n	80071f0 <UART_SetConfig+0xf8>
 800718c:	4baf      	ldr	r3, [pc, #700]	; (800744c <UART_SetConfig+0x354>)
 800718e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007190:	2203      	movs	r2, #3
 8007192:	4013      	ands	r3, r2
 8007194:	2b03      	cmp	r3, #3
 8007196:	d01d      	beq.n	80071d4 <UART_SetConfig+0xdc>
 8007198:	d823      	bhi.n	80071e2 <UART_SetConfig+0xea>
 800719a:	2b02      	cmp	r3, #2
 800719c:	d00c      	beq.n	80071b8 <UART_SetConfig+0xc0>
 800719e:	d820      	bhi.n	80071e2 <UART_SetConfig+0xea>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <UART_SetConfig+0xb2>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d00e      	beq.n	80071c6 <UART_SetConfig+0xce>
 80071a8:	e01b      	b.n	80071e2 <UART_SetConfig+0xea>
 80071aa:	231b      	movs	r3, #27
 80071ac:	2218      	movs	r2, #24
 80071ae:	189b      	adds	r3, r3, r2
 80071b0:	19db      	adds	r3, r3, r7
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e0b4      	b.n	8007322 <UART_SetConfig+0x22a>
 80071b8:	231b      	movs	r3, #27
 80071ba:	2218      	movs	r2, #24
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	19db      	adds	r3, r3, r7
 80071c0:	2202      	movs	r2, #2
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e0ad      	b.n	8007322 <UART_SetConfig+0x22a>
 80071c6:	231b      	movs	r3, #27
 80071c8:	2218      	movs	r2, #24
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	19db      	adds	r3, r3, r7
 80071ce:	2204      	movs	r2, #4
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e0a6      	b.n	8007322 <UART_SetConfig+0x22a>
 80071d4:	231b      	movs	r3, #27
 80071d6:	2218      	movs	r2, #24
 80071d8:	189b      	adds	r3, r3, r2
 80071da:	19db      	adds	r3, r3, r7
 80071dc:	2208      	movs	r2, #8
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e09f      	b.n	8007322 <UART_SetConfig+0x22a>
 80071e2:	231b      	movs	r3, #27
 80071e4:	2218      	movs	r2, #24
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	19db      	adds	r3, r3, r7
 80071ea:	2210      	movs	r2, #16
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	e098      	b.n	8007322 <UART_SetConfig+0x22a>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a96      	ldr	r2, [pc, #600]	; (8007450 <UART_SetConfig+0x358>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d131      	bne.n	800725e <UART_SetConfig+0x166>
 80071fa:	4b94      	ldr	r3, [pc, #592]	; (800744c <UART_SetConfig+0x354>)
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	220c      	movs	r2, #12
 8007200:	4013      	ands	r3, r2
 8007202:	2b0c      	cmp	r3, #12
 8007204:	d01d      	beq.n	8007242 <UART_SetConfig+0x14a>
 8007206:	d823      	bhi.n	8007250 <UART_SetConfig+0x158>
 8007208:	2b08      	cmp	r3, #8
 800720a:	d00c      	beq.n	8007226 <UART_SetConfig+0x12e>
 800720c:	d820      	bhi.n	8007250 <UART_SetConfig+0x158>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <UART_SetConfig+0x120>
 8007212:	2b04      	cmp	r3, #4
 8007214:	d00e      	beq.n	8007234 <UART_SetConfig+0x13c>
 8007216:	e01b      	b.n	8007250 <UART_SetConfig+0x158>
 8007218:	231b      	movs	r3, #27
 800721a:	2218      	movs	r2, #24
 800721c:	189b      	adds	r3, r3, r2
 800721e:	19db      	adds	r3, r3, r7
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e07d      	b.n	8007322 <UART_SetConfig+0x22a>
 8007226:	231b      	movs	r3, #27
 8007228:	2218      	movs	r2, #24
 800722a:	189b      	adds	r3, r3, r2
 800722c:	19db      	adds	r3, r3, r7
 800722e:	2202      	movs	r2, #2
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	e076      	b.n	8007322 <UART_SetConfig+0x22a>
 8007234:	231b      	movs	r3, #27
 8007236:	2218      	movs	r2, #24
 8007238:	189b      	adds	r3, r3, r2
 800723a:	19db      	adds	r3, r3, r7
 800723c:	2204      	movs	r2, #4
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e06f      	b.n	8007322 <UART_SetConfig+0x22a>
 8007242:	231b      	movs	r3, #27
 8007244:	2218      	movs	r2, #24
 8007246:	189b      	adds	r3, r3, r2
 8007248:	19db      	adds	r3, r3, r7
 800724a:	2208      	movs	r2, #8
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e068      	b.n	8007322 <UART_SetConfig+0x22a>
 8007250:	231b      	movs	r3, #27
 8007252:	2218      	movs	r2, #24
 8007254:	189b      	adds	r3, r3, r2
 8007256:	19db      	adds	r3, r3, r7
 8007258:	2210      	movs	r2, #16
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e061      	b.n	8007322 <UART_SetConfig+0x22a>
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7c      	ldr	r2, [pc, #496]	; (8007454 <UART_SetConfig+0x35c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d106      	bne.n	8007276 <UART_SetConfig+0x17e>
 8007268:	231b      	movs	r3, #27
 800726a:	2218      	movs	r2, #24
 800726c:	189b      	adds	r3, r3, r2
 800726e:	19db      	adds	r3, r3, r7
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e055      	b.n	8007322 <UART_SetConfig+0x22a>
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a77      	ldr	r2, [pc, #476]	; (8007458 <UART_SetConfig+0x360>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d106      	bne.n	800728e <UART_SetConfig+0x196>
 8007280:	231b      	movs	r3, #27
 8007282:	2218      	movs	r2, #24
 8007284:	189b      	adds	r3, r3, r2
 8007286:	19db      	adds	r3, r3, r7
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	e049      	b.n	8007322 <UART_SetConfig+0x22a>
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a6b      	ldr	r2, [pc, #428]	; (8007440 <UART_SetConfig+0x348>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d13e      	bne.n	8007316 <UART_SetConfig+0x21e>
 8007298:	4b6c      	ldr	r3, [pc, #432]	; (800744c <UART_SetConfig+0x354>)
 800729a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800729c:	23c0      	movs	r3, #192	; 0xc0
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	4013      	ands	r3, r2
 80072a2:	22c0      	movs	r2, #192	; 0xc0
 80072a4:	0112      	lsls	r2, r2, #4
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d027      	beq.n	80072fa <UART_SetConfig+0x202>
 80072aa:	22c0      	movs	r2, #192	; 0xc0
 80072ac:	0112      	lsls	r2, r2, #4
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d82a      	bhi.n	8007308 <UART_SetConfig+0x210>
 80072b2:	2280      	movs	r2, #128	; 0x80
 80072b4:	0112      	lsls	r2, r2, #4
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d011      	beq.n	80072de <UART_SetConfig+0x1e6>
 80072ba:	2280      	movs	r2, #128	; 0x80
 80072bc:	0112      	lsls	r2, r2, #4
 80072be:	4293      	cmp	r3, r2
 80072c0:	d822      	bhi.n	8007308 <UART_SetConfig+0x210>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <UART_SetConfig+0x1d8>
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	00d2      	lsls	r2, r2, #3
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00e      	beq.n	80072ec <UART_SetConfig+0x1f4>
 80072ce:	e01b      	b.n	8007308 <UART_SetConfig+0x210>
 80072d0:	231b      	movs	r3, #27
 80072d2:	2218      	movs	r2, #24
 80072d4:	189b      	adds	r3, r3, r2
 80072d6:	19db      	adds	r3, r3, r7
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e021      	b.n	8007322 <UART_SetConfig+0x22a>
 80072de:	231b      	movs	r3, #27
 80072e0:	2218      	movs	r2, #24
 80072e2:	189b      	adds	r3, r3, r2
 80072e4:	19db      	adds	r3, r3, r7
 80072e6:	2202      	movs	r2, #2
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	e01a      	b.n	8007322 <UART_SetConfig+0x22a>
 80072ec:	231b      	movs	r3, #27
 80072ee:	2218      	movs	r2, #24
 80072f0:	189b      	adds	r3, r3, r2
 80072f2:	19db      	adds	r3, r3, r7
 80072f4:	2204      	movs	r2, #4
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e013      	b.n	8007322 <UART_SetConfig+0x22a>
 80072fa:	231b      	movs	r3, #27
 80072fc:	2218      	movs	r2, #24
 80072fe:	189b      	adds	r3, r3, r2
 8007300:	19db      	adds	r3, r3, r7
 8007302:	2208      	movs	r2, #8
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e00c      	b.n	8007322 <UART_SetConfig+0x22a>
 8007308:	231b      	movs	r3, #27
 800730a:	2218      	movs	r2, #24
 800730c:	189b      	adds	r3, r3, r2
 800730e:	19db      	adds	r3, r3, r7
 8007310:	2210      	movs	r2, #16
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	e005      	b.n	8007322 <UART_SetConfig+0x22a>
 8007316:	231b      	movs	r3, #27
 8007318:	2218      	movs	r2, #24
 800731a:	189b      	adds	r3, r3, r2
 800731c:	19db      	adds	r3, r3, r7
 800731e:	2210      	movs	r2, #16
 8007320:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a46      	ldr	r2, [pc, #280]	; (8007440 <UART_SetConfig+0x348>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d000      	beq.n	800732e <UART_SetConfig+0x236>
 800732c:	e09a      	b.n	8007464 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800732e:	231b      	movs	r3, #27
 8007330:	2218      	movs	r2, #24
 8007332:	189b      	adds	r3, r3, r2
 8007334:	19db      	adds	r3, r3, r7
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b08      	cmp	r3, #8
 800733a:	d01d      	beq.n	8007378 <UART_SetConfig+0x280>
 800733c:	dc20      	bgt.n	8007380 <UART_SetConfig+0x288>
 800733e:	2b04      	cmp	r3, #4
 8007340:	d015      	beq.n	800736e <UART_SetConfig+0x276>
 8007342:	dc1d      	bgt.n	8007380 <UART_SetConfig+0x288>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <UART_SetConfig+0x256>
 8007348:	2b02      	cmp	r3, #2
 800734a:	d005      	beq.n	8007358 <UART_SetConfig+0x260>
 800734c:	e018      	b.n	8007380 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734e:	f7ff f9bf 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8007352:	0003      	movs	r3, r0
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007356:	e01c      	b.n	8007392 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007358:	4b3c      	ldr	r3, [pc, #240]	; (800744c <UART_SetConfig+0x354>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2210      	movs	r2, #16
 800735e:	4013      	ands	r3, r2
 8007360:	d002      	beq.n	8007368 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007362:	4b3e      	ldr	r3, [pc, #248]	; (800745c <UART_SetConfig+0x364>)
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007366:	e014      	b.n	8007392 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007368:	4b3d      	ldr	r3, [pc, #244]	; (8007460 <UART_SetConfig+0x368>)
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800736c:	e011      	b.n	8007392 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736e:	f7ff f8ff 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 8007372:	0003      	movs	r3, r0
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007376:	e00c      	b.n	8007392 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800737e:	e008      	b.n	8007392 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007384:	231a      	movs	r3, #26
 8007386:	2218      	movs	r2, #24
 8007388:	189b      	adds	r3, r3, r2
 800738a:	19db      	adds	r3, r3, r7
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
        break;
 8007390:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d100      	bne.n	800739a <UART_SetConfig+0x2a2>
 8007398:	e133      	b.n	8007602 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	0013      	movs	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d305      	bcc.n	80073b6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d906      	bls.n	80073c4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80073b6:	231a      	movs	r3, #26
 80073b8:	2218      	movs	r2, #24
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	19db      	adds	r3, r3, r7
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e11e      	b.n	8007602 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	6939      	ldr	r1, [r7, #16]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	000b      	movs	r3, r1
 80073d2:	0e1b      	lsrs	r3, r3, #24
 80073d4:	0010      	movs	r0, r2
 80073d6:	0205      	lsls	r5, r0, #8
 80073d8:	431d      	orrs	r5, r3
 80073da:	000b      	movs	r3, r1
 80073dc:	021c      	lsls	r4, r3, #8
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68b8      	ldr	r0, [r7, #8]
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	1900      	adds	r0, r0, r4
 80073f0:	4169      	adcs	r1, r5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f7f8 ff56 	bl	80002b0 <__aeabi_uldivmod>
 8007404:	0002      	movs	r2, r0
 8007406:	000b      	movs	r3, r1
 8007408:	0013      	movs	r3, r2
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800740c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740e:	23c0      	movs	r3, #192	; 0xc0
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	429a      	cmp	r2, r3
 8007414:	d309      	bcc.n	800742a <UART_SetConfig+0x332>
 8007416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	035b      	lsls	r3, r3, #13
 800741c:	429a      	cmp	r2, r3
 800741e:	d204      	bcs.n	800742a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007426:	60da      	str	r2, [r3, #12]
 8007428:	e0eb      	b.n	8007602 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800742a:	231a      	movs	r3, #26
 800742c:	2218      	movs	r2, #24
 800742e:	189b      	adds	r3, r3, r2
 8007430:	19db      	adds	r3, r3, r7
 8007432:	2201      	movs	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e0e4      	b.n	8007602 <UART_SetConfig+0x50a>
 8007438:	efff69f3 	.word	0xefff69f3
 800743c:	ffffcfff 	.word	0xffffcfff
 8007440:	40004800 	.word	0x40004800
 8007444:	fffff4ff 	.word	0xfffff4ff
 8007448:	40013800 	.word	0x40013800
 800744c:	40021000 	.word	0x40021000
 8007450:	40004400 	.word	0x40004400
 8007454:	40004c00 	.word	0x40004c00
 8007458:	40005000 	.word	0x40005000
 800745c:	003d0900 	.word	0x003d0900
 8007460:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	2380      	movs	r3, #128	; 0x80
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	429a      	cmp	r2, r3
 800746e:	d000      	beq.n	8007472 <UART_SetConfig+0x37a>
 8007470:	e070      	b.n	8007554 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007472:	231b      	movs	r3, #27
 8007474:	2218      	movs	r2, #24
 8007476:	189b      	adds	r3, r3, r2
 8007478:	19db      	adds	r3, r3, r7
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d822      	bhi.n	80074c6 <UART_SetConfig+0x3ce>
 8007480:	009a      	lsls	r2, r3, #2
 8007482:	4b67      	ldr	r3, [pc, #412]	; (8007620 <UART_SetConfig+0x528>)
 8007484:	18d3      	adds	r3, r2, r3
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748a:	f7ff f921 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 800748e:	0003      	movs	r3, r0
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007492:	e021      	b.n	80074d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007494:	f7ff f932 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 8007498:	0003      	movs	r3, r0
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800749c:	e01c      	b.n	80074d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749e:	4b61      	ldr	r3, [pc, #388]	; (8007624 <UART_SetConfig+0x52c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2210      	movs	r2, #16
 80074a4:	4013      	ands	r3, r2
 80074a6:	d002      	beq.n	80074ae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80074a8:	4b5f      	ldr	r3, [pc, #380]	; (8007628 <UART_SetConfig+0x530>)
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074ac:	e014      	b.n	80074d8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80074ae:	4b5f      	ldr	r3, [pc, #380]	; (800762c <UART_SetConfig+0x534>)
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074b2:	e011      	b.n	80074d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b4:	f7ff f85c 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 80074b8:	0003      	movs	r3, r0
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074bc:	e00c      	b.n	80074d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074be:	2380      	movs	r3, #128	; 0x80
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074c4:	e008      	b.n	80074d8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80074ca:	231a      	movs	r3, #26
 80074cc:	2218      	movs	r2, #24
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	19db      	adds	r3, r3, r7
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
        break;
 80074d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d100      	bne.n	80074e0 <UART_SetConfig+0x3e8>
 80074de:	e090      	b.n	8007602 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	005a      	lsls	r2, r3, #1
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	18d2      	adds	r2, r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	0019      	movs	r1, r3
 80074f2:	0010      	movs	r0, r2
 80074f4:	f7f8 fe12 	bl	800011c <__udivsi3>
 80074f8:	0003      	movs	r3, r0
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	2b0f      	cmp	r3, #15
 8007500:	d921      	bls.n	8007546 <UART_SetConfig+0x44e>
 8007502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007504:	2380      	movs	r3, #128	; 0x80
 8007506:	025b      	lsls	r3, r3, #9
 8007508:	429a      	cmp	r2, r3
 800750a:	d21c      	bcs.n	8007546 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	b29a      	uxth	r2, r3
 8007510:	200e      	movs	r0, #14
 8007512:	2418      	movs	r4, #24
 8007514:	1903      	adds	r3, r0, r4
 8007516:	19db      	adds	r3, r3, r7
 8007518:	210f      	movs	r1, #15
 800751a:	438a      	bics	r2, r1
 800751c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	085b      	lsrs	r3, r3, #1
 8007522:	b29b      	uxth	r3, r3
 8007524:	2207      	movs	r2, #7
 8007526:	4013      	ands	r3, r2
 8007528:	b299      	uxth	r1, r3
 800752a:	1903      	adds	r3, r0, r4
 800752c:	19db      	adds	r3, r3, r7
 800752e:	1902      	adds	r2, r0, r4
 8007530:	19d2      	adds	r2, r2, r7
 8007532:	8812      	ldrh	r2, [r2, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	1902      	adds	r2, r0, r4
 800753e:	19d2      	adds	r2, r2, r7
 8007540:	8812      	ldrh	r2, [r2, #0]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e05d      	b.n	8007602 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007546:	231a      	movs	r3, #26
 8007548:	2218      	movs	r2, #24
 800754a:	189b      	adds	r3, r3, r2
 800754c:	19db      	adds	r3, r3, r7
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e056      	b.n	8007602 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007554:	231b      	movs	r3, #27
 8007556:	2218      	movs	r2, #24
 8007558:	189b      	adds	r3, r3, r2
 800755a:	19db      	adds	r3, r3, r7
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b08      	cmp	r3, #8
 8007560:	d822      	bhi.n	80075a8 <UART_SetConfig+0x4b0>
 8007562:	009a      	lsls	r2, r3, #2
 8007564:	4b32      	ldr	r3, [pc, #200]	; (8007630 <UART_SetConfig+0x538>)
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800756c:	f7ff f8b0 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8007570:	0003      	movs	r3, r0
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007574:	e021      	b.n	80075ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007576:	f7ff f8c1 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 800757a:	0003      	movs	r3, r0
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800757e:	e01c      	b.n	80075ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <UART_SetConfig+0x52c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2210      	movs	r2, #16
 8007586:	4013      	ands	r3, r2
 8007588:	d002      	beq.n	8007590 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800758a:	4b27      	ldr	r3, [pc, #156]	; (8007628 <UART_SetConfig+0x530>)
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800758e:	e014      	b.n	80075ba <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007590:	4b26      	ldr	r3, [pc, #152]	; (800762c <UART_SetConfig+0x534>)
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007594:	e011      	b.n	80075ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007596:	f7fe ffeb 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 800759a:	0003      	movs	r3, r0
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800759e:	e00c      	b.n	80075ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a0:	2380      	movs	r3, #128	; 0x80
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075a6:	e008      	b.n	80075ba <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80075ac:	231a      	movs	r3, #26
 80075ae:	2218      	movs	r2, #24
 80075b0:	189b      	adds	r3, r3, r2
 80075b2:	19db      	adds	r3, r3, r7
 80075b4:	2201      	movs	r2, #1
 80075b6:	701a      	strb	r2, [r3, #0]
        break;
 80075b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d020      	beq.n	8007602 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	085a      	lsrs	r2, r3, #1
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	18d2      	adds	r2, r2, r3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	0019      	movs	r1, r3
 80075d0:	0010      	movs	r0, r2
 80075d2:	f7f8 fda3 	bl	800011c <__udivsi3>
 80075d6:	0003      	movs	r3, r0
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2b0f      	cmp	r3, #15
 80075de:	d90a      	bls.n	80075f6 <UART_SetConfig+0x4fe>
 80075e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e2:	2380      	movs	r3, #128	; 0x80
 80075e4:	025b      	lsls	r3, r3, #9
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d205      	bcs.n	80075f6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60da      	str	r2, [r3, #12]
 80075f4:	e005      	b.n	8007602 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80075f6:	231a      	movs	r3, #26
 80075f8:	2218      	movs	r2, #24
 80075fa:	189b      	adds	r3, r3, r2
 80075fc:	19db      	adds	r3, r3, r7
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2200      	movs	r2, #0
 8007606:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2200      	movs	r2, #0
 800760c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800760e:	231a      	movs	r3, #26
 8007610:	2218      	movs	r2, #24
 8007612:	189b      	adds	r3, r3, r2
 8007614:	19db      	adds	r3, r3, r7
 8007616:	781b      	ldrb	r3, [r3, #0]
}
 8007618:	0018      	movs	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	b00e      	add	sp, #56	; 0x38
 800761e:	bdb0      	pop	{r4, r5, r7, pc}
 8007620:	0800931c 	.word	0x0800931c
 8007624:	40021000 	.word	0x40021000
 8007628:	003d0900 	.word	0x003d0900
 800762c:	00f42400 	.word	0x00f42400
 8007630:	08009340 	.word	0x08009340

08007634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2201      	movs	r2, #1
 8007642:	4013      	ands	r3, r2
 8007644:	d00b      	beq.n	800765e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a4a      	ldr	r2, [pc, #296]	; (8007778 <UART_AdvFeatureConfig+0x144>)
 800764e:	4013      	ands	r3, r2
 8007650:	0019      	movs	r1, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2202      	movs	r2, #2
 8007664:	4013      	ands	r3, r2
 8007666:	d00b      	beq.n	8007680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	4a43      	ldr	r2, [pc, #268]	; (800777c <UART_AdvFeatureConfig+0x148>)
 8007670:	4013      	ands	r3, r2
 8007672:	0019      	movs	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2204      	movs	r2, #4
 8007686:	4013      	ands	r3, r2
 8007688:	d00b      	beq.n	80076a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4a3b      	ldr	r2, [pc, #236]	; (8007780 <UART_AdvFeatureConfig+0x14c>)
 8007692:	4013      	ands	r3, r2
 8007694:	0019      	movs	r1, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2208      	movs	r2, #8
 80076a8:	4013      	ands	r3, r2
 80076aa:	d00b      	beq.n	80076c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4a34      	ldr	r2, [pc, #208]	; (8007784 <UART_AdvFeatureConfig+0x150>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	0019      	movs	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2210      	movs	r2, #16
 80076ca:	4013      	ands	r3, r2
 80076cc:	d00b      	beq.n	80076e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4a2c      	ldr	r2, [pc, #176]	; (8007788 <UART_AdvFeatureConfig+0x154>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	0019      	movs	r1, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2220      	movs	r2, #32
 80076ec:	4013      	ands	r3, r2
 80076ee:	d00b      	beq.n	8007708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4a25      	ldr	r2, [pc, #148]	; (800778c <UART_AdvFeatureConfig+0x158>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	0019      	movs	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2240      	movs	r2, #64	; 0x40
 800770e:	4013      	ands	r3, r2
 8007710:	d01d      	beq.n	800774e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <UART_AdvFeatureConfig+0x15c>)
 800771a:	4013      	ands	r3, r2
 800771c:	0019      	movs	r1, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800772e:	2380      	movs	r3, #128	; 0x80
 8007730:	035b      	lsls	r3, r3, #13
 8007732:	429a      	cmp	r2, r3
 8007734:	d10b      	bne.n	800774e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <UART_AdvFeatureConfig+0x160>)
 800773e:	4013      	ands	r3, r2
 8007740:	0019      	movs	r1, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2280      	movs	r2, #128	; 0x80
 8007754:	4013      	ands	r3, r2
 8007756:	d00b      	beq.n	8007770 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	4a0e      	ldr	r2, [pc, #56]	; (8007798 <UART_AdvFeatureConfig+0x164>)
 8007760:	4013      	ands	r3, r2
 8007762:	0019      	movs	r1, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
  }
}
 8007770:	46c0      	nop			; (mov r8, r8)
 8007772:	46bd      	mov	sp, r7
 8007774:	b002      	add	sp, #8
 8007776:	bd80      	pop	{r7, pc}
 8007778:	fffdffff 	.word	0xfffdffff
 800777c:	fffeffff 	.word	0xfffeffff
 8007780:	fffbffff 	.word	0xfffbffff
 8007784:	ffff7fff 	.word	0xffff7fff
 8007788:	ffffefff 	.word	0xffffefff
 800778c:	ffffdfff 	.word	0xffffdfff
 8007790:	ffefffff 	.word	0xffefffff
 8007794:	ff9fffff 	.word	0xff9fffff
 8007798:	fff7ffff 	.word	0xfff7ffff

0800779c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b092      	sub	sp, #72	; 0x48
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2284      	movs	r2, #132	; 0x84
 80077a8:	2100      	movs	r1, #0
 80077aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077ac:	f7fd f876 	bl	800489c <HAL_GetTick>
 80077b0:	0003      	movs	r3, r0
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2208      	movs	r2, #8
 80077bc:	4013      	ands	r3, r2
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d12c      	bne.n	800781c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c4:	2280      	movs	r2, #128	; 0x80
 80077c6:	0391      	lsls	r1, r2, #14
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4a46      	ldr	r2, [pc, #280]	; (80078e4 <UART_CheckIdleState+0x148>)
 80077cc:	9200      	str	r2, [sp, #0]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f000 f88c 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 80077d4:	1e03      	subs	r3, r0, #0
 80077d6:	d021      	beq.n	800781c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d8:	f3ef 8310 	mrs	r3, PRIMASK
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077e2:	2301      	movs	r3, #1
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	f383 8810 	msr	PRIMASK, r3
}
 80077ec:	46c0      	nop			; (mov r8, r8)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2180      	movs	r1, #128	; 0x80
 80077fa:	438a      	bics	r2, r1
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	f383 8810 	msr	PRIMASK, r3
}
 8007808:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2278      	movs	r2, #120	; 0x78
 8007814:	2100      	movs	r1, #0
 8007816:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e05f      	b.n	80078dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	4013      	ands	r3, r2
 8007826:	2b04      	cmp	r3, #4
 8007828:	d146      	bne.n	80078b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800782a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782c:	2280      	movs	r2, #128	; 0x80
 800782e:	03d1      	lsls	r1, r2, #15
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4a2c      	ldr	r2, [pc, #176]	; (80078e4 <UART_CheckIdleState+0x148>)
 8007834:	9200      	str	r2, [sp, #0]
 8007836:	2200      	movs	r2, #0
 8007838:	f000 f858 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 800783c:	1e03      	subs	r3, r0, #0
 800783e:	d03b      	beq.n	80078b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007840:	f3ef 8310 	mrs	r3, PRIMASK
 8007844:	60fb      	str	r3, [r7, #12]
  return(result);
 8007846:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
 800784a:	2301      	movs	r3, #1
 800784c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4921      	ldr	r1, [pc, #132]	; (80078e8 <UART_CheckIdleState+0x14c>)
 8007862:	400a      	ands	r2, r1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f383 8810 	msr	PRIMASK, r3
}
 8007870:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007872:	f3ef 8310 	mrs	r3, PRIMASK
 8007876:	61bb      	str	r3, [r7, #24]
  return(result);
 8007878:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
 800787c:	2301      	movs	r3, #1
 800787e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f383 8810 	msr	PRIMASK, r3
}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2101      	movs	r1, #1
 8007894:	438a      	bics	r2, r1
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	f383 8810 	msr	PRIMASK, r3
}
 80078a2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	2120      	movs	r1, #32
 80078aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2278      	movs	r2, #120	; 0x78
 80078b0:	2100      	movs	r1, #0
 80078b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e011      	b.n	80078dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	2120      	movs	r1, #32
 80078c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2278      	movs	r2, #120	; 0x78
 80078d6:	2100      	movs	r1, #0
 80078d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b010      	add	sp, #64	; 0x40
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	01ffffff 	.word	0x01ffffff
 80078e8:	fffffedf 	.word	0xfffffedf

080078ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	1dfb      	adds	r3, r7, #7
 80078fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fc:	e04b      	b.n	8007996 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	3301      	adds	r3, #1
 8007902:	d048      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007904:	f7fc ffca 	bl	800489c <HAL_GetTick>
 8007908:	0002      	movs	r2, r0
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	429a      	cmp	r2, r3
 8007912:	d302      	bcc.n	800791a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e04b      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2204      	movs	r2, #4
 8007926:	4013      	ands	r3, r2
 8007928:	d035      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2208      	movs	r2, #8
 8007932:	4013      	ands	r3, r2
 8007934:	2b08      	cmp	r3, #8
 8007936:	d111      	bne.n	800795c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	0018      	movs	r0, r3
 8007944:	f000 f83c 	bl	80079c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2284      	movs	r2, #132	; 0x84
 800794c:	2108      	movs	r1, #8
 800794e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2278      	movs	r2, #120	; 0x78
 8007954:	2100      	movs	r1, #0
 8007956:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e02c      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	2380      	movs	r3, #128	; 0x80
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	401a      	ands	r2, r3
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	429a      	cmp	r2, r3
 800796e:	d112      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2280      	movs	r2, #128	; 0x80
 8007976:	0112      	lsls	r2, r2, #4
 8007978:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0018      	movs	r0, r3
 800797e:	f000 f81f 	bl	80079c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2284      	movs	r2, #132	; 0x84
 8007986:	2120      	movs	r1, #32
 8007988:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2278      	movs	r2, #120	; 0x78
 800798e:	2100      	movs	r1, #0
 8007990:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e00f      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	425a      	negs	r2, r3
 80079a6:	4153      	adcs	r3, r2
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	001a      	movs	r2, r3
 80079ac:	1dfb      	adds	r3, r7, #7
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d0a4      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	0018      	movs	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b004      	add	sp, #16
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c8:	f3ef 8310 	mrs	r3, PRIMASK
 80079cc:	617b      	str	r3, [r7, #20]
  return(result);
 80079ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
 80079d2:	2301      	movs	r3, #1
 80079d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f383 8810 	msr	PRIMASK, r3
}
 80079dc:	46c0      	nop			; (mov r8, r8)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4926      	ldr	r1, [pc, #152]	; (8007a84 <UART_EndRxTransfer+0xc4>)
 80079ea:	400a      	ands	r2, r1
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f383 8810 	msr	PRIMASK, r3
}
 80079f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fa:	f3ef 8310 	mrs	r3, PRIMASK
 80079fe:	623b      	str	r3, [r7, #32]
  return(result);
 8007a00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
 8007a04:	2301      	movs	r3, #1
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	f383 8810 	msr	PRIMASK, r3
}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	438a      	bics	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	f383 8810 	msr	PRIMASK, r3
}
 8007a2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d118      	bne.n	8007a66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a34:	f3ef 8310 	mrs	r3, PRIMASK
 8007a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a3e:	2301      	movs	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f383 8810 	msr	PRIMASK, r3
}
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2110      	movs	r1, #16
 8007a56:	438a      	bics	r2, r1
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f383 8810 	msr	PRIMASK, r3
}
 8007a64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2280      	movs	r2, #128	; 0x80
 8007a6a:	2120      	movs	r1, #32
 8007a6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b00e      	add	sp, #56	; 0x38
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	fffffedf 	.word	0xfffffedf

08007a88 <sniprintf>:
 8007a88:	b40c      	push	{r2, r3}
 8007a8a:	b530      	push	{r4, r5, lr}
 8007a8c:	4b17      	ldr	r3, [pc, #92]	; (8007aec <sniprintf+0x64>)
 8007a8e:	000c      	movs	r4, r1
 8007a90:	681d      	ldr	r5, [r3, #0]
 8007a92:	b09d      	sub	sp, #116	; 0x74
 8007a94:	2900      	cmp	r1, #0
 8007a96:	da08      	bge.n	8007aaa <sniprintf+0x22>
 8007a98:	238b      	movs	r3, #139	; 0x8b
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	4240      	negs	r0, r0
 8007aa0:	b01d      	add	sp, #116	; 0x74
 8007aa2:	bc30      	pop	{r4, r5}
 8007aa4:	bc08      	pop	{r3}
 8007aa6:	b002      	add	sp, #8
 8007aa8:	4718      	bx	r3
 8007aaa:	2382      	movs	r3, #130	; 0x82
 8007aac:	466a      	mov	r2, sp
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	8293      	strh	r3, [r2, #20]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9002      	str	r0, [sp, #8]
 8007ab6:	9006      	str	r0, [sp, #24]
 8007ab8:	4299      	cmp	r1, r3
 8007aba:	d000      	beq.n	8007abe <sniprintf+0x36>
 8007abc:	1e4b      	subs	r3, r1, #1
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	9307      	str	r3, [sp, #28]
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	466a      	mov	r2, sp
 8007ac6:	425b      	negs	r3, r3
 8007ac8:	82d3      	strh	r3, [r2, #22]
 8007aca:	0028      	movs	r0, r5
 8007acc:	ab21      	add	r3, sp, #132	; 0x84
 8007ace:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ad0:	a902      	add	r1, sp, #8
 8007ad2:	9301      	str	r3, [sp, #4]
 8007ad4:	f000 f9aa 	bl	8007e2c <_svfiprintf_r>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	da01      	bge.n	8007ae0 <sniprintf+0x58>
 8007adc:	238b      	movs	r3, #139	; 0x8b
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	d0dd      	beq.n	8007aa0 <sniprintf+0x18>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	9b02      	ldr	r3, [sp, #8]
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e7d9      	b.n	8007aa0 <sniprintf+0x18>
 8007aec:	200000f0 	.word	0x200000f0

08007af0 <memset>:
 8007af0:	0003      	movs	r3, r0
 8007af2:	1882      	adds	r2, r0, r2
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d100      	bne.n	8007afa <memset+0xa>
 8007af8:	4770      	bx	lr
 8007afa:	7019      	strb	r1, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	e7f9      	b.n	8007af4 <memset+0x4>

08007b00 <__errno>:
 8007b00:	4b01      	ldr	r3, [pc, #4]	; (8007b08 <__errno+0x8>)
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	4770      	bx	lr
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	200000f0 	.word	0x200000f0

08007b0c <__libc_init_array>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	2600      	movs	r6, #0
 8007b10:	4c0c      	ldr	r4, [pc, #48]	; (8007b44 <__libc_init_array+0x38>)
 8007b12:	4d0d      	ldr	r5, [pc, #52]	; (8007b48 <__libc_init_array+0x3c>)
 8007b14:	1b64      	subs	r4, r4, r5
 8007b16:	10a4      	asrs	r4, r4, #2
 8007b18:	42a6      	cmp	r6, r4
 8007b1a:	d109      	bne.n	8007b30 <__libc_init_array+0x24>
 8007b1c:	2600      	movs	r6, #0
 8007b1e:	f000 ffb1 	bl	8008a84 <_init>
 8007b22:	4c0a      	ldr	r4, [pc, #40]	; (8007b4c <__libc_init_array+0x40>)
 8007b24:	4d0a      	ldr	r5, [pc, #40]	; (8007b50 <__libc_init_array+0x44>)
 8007b26:	1b64      	subs	r4, r4, r5
 8007b28:	10a4      	asrs	r4, r4, #2
 8007b2a:	42a6      	cmp	r6, r4
 8007b2c:	d105      	bne.n	8007b3a <__libc_init_array+0x2e>
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	00b3      	lsls	r3, r6, #2
 8007b32:	58eb      	ldr	r3, [r5, r3]
 8007b34:	4798      	blx	r3
 8007b36:	3601      	adds	r6, #1
 8007b38:	e7ee      	b.n	8007b18 <__libc_init_array+0xc>
 8007b3a:	00b3      	lsls	r3, r6, #2
 8007b3c:	58eb      	ldr	r3, [r5, r3]
 8007b3e:	4798      	blx	r3
 8007b40:	3601      	adds	r6, #1
 8007b42:	e7f2      	b.n	8007b2a <__libc_init_array+0x1e>
 8007b44:	08009410 	.word	0x08009410
 8007b48:	08009410 	.word	0x08009410
 8007b4c:	08009414 	.word	0x08009414
 8007b50:	08009410 	.word	0x08009410

08007b54 <__retarget_lock_acquire_recursive>:
 8007b54:	4770      	bx	lr

08007b56 <__retarget_lock_release_recursive>:
 8007b56:	4770      	bx	lr

08007b58 <memcpy>:
 8007b58:	2300      	movs	r3, #0
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d100      	bne.n	8007b62 <memcpy+0xa>
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	5ccc      	ldrb	r4, [r1, r3]
 8007b64:	54c4      	strb	r4, [r0, r3]
 8007b66:	3301      	adds	r3, #1
 8007b68:	e7f8      	b.n	8007b5c <memcpy+0x4>
	...

08007b6c <_free_r>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	0005      	movs	r5, r0
 8007b70:	2900      	cmp	r1, #0
 8007b72:	d010      	beq.n	8007b96 <_free_r+0x2a>
 8007b74:	1f0c      	subs	r4, r1, #4
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	da00      	bge.n	8007b7e <_free_r+0x12>
 8007b7c:	18e4      	adds	r4, r4, r3
 8007b7e:	0028      	movs	r0, r5
 8007b80:	f000 f8e2 	bl	8007d48 <__malloc_lock>
 8007b84:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <_free_r+0x90>)
 8007b86:	6813      	ldr	r3, [r2, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <_free_r+0x2c>
 8007b8c:	6063      	str	r3, [r4, #4]
 8007b8e:	6014      	str	r4, [r2, #0]
 8007b90:	0028      	movs	r0, r5
 8007b92:	f000 f8e1 	bl	8007d58 <__malloc_unlock>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d908      	bls.n	8007bae <_free_r+0x42>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	1821      	adds	r1, r4, r0
 8007ba0:	428b      	cmp	r3, r1
 8007ba2:	d1f3      	bne.n	8007b8c <_free_r+0x20>
 8007ba4:	6819      	ldr	r1, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	1809      	adds	r1, r1, r0
 8007baa:	6021      	str	r1, [r4, #0]
 8007bac:	e7ee      	b.n	8007b8c <_free_r+0x20>
 8007bae:	001a      	movs	r2, r3
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <_free_r+0x4e>
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	d9f9      	bls.n	8007bae <_free_r+0x42>
 8007bba:	6811      	ldr	r1, [r2, #0]
 8007bbc:	1850      	adds	r0, r2, r1
 8007bbe:	42a0      	cmp	r0, r4
 8007bc0:	d10b      	bne.n	8007bda <_free_r+0x6e>
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	1809      	adds	r1, r1, r0
 8007bc6:	1850      	adds	r0, r2, r1
 8007bc8:	6011      	str	r1, [r2, #0]
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	d1e0      	bne.n	8007b90 <_free_r+0x24>
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	1841      	adds	r1, r0, r1
 8007bd4:	6011      	str	r1, [r2, #0]
 8007bd6:	6053      	str	r3, [r2, #4]
 8007bd8:	e7da      	b.n	8007b90 <_free_r+0x24>
 8007bda:	42a0      	cmp	r0, r4
 8007bdc:	d902      	bls.n	8007be4 <_free_r+0x78>
 8007bde:	230c      	movs	r3, #12
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	e7d5      	b.n	8007b90 <_free_r+0x24>
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	1821      	adds	r1, r4, r0
 8007be8:	428b      	cmp	r3, r1
 8007bea:	d103      	bne.n	8007bf4 <_free_r+0x88>
 8007bec:	6819      	ldr	r1, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	1809      	adds	r1, r1, r0
 8007bf2:	6021      	str	r1, [r4, #0]
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6054      	str	r4, [r2, #4]
 8007bf8:	e7ca      	b.n	8007b90 <_free_r+0x24>
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	200008f0 	.word	0x200008f0

08007c00 <sbrk_aligned>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	4e0f      	ldr	r6, [pc, #60]	; (8007c40 <sbrk_aligned+0x40>)
 8007c04:	000d      	movs	r5, r1
 8007c06:	6831      	ldr	r1, [r6, #0]
 8007c08:	0004      	movs	r4, r0
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	d102      	bne.n	8007c14 <sbrk_aligned+0x14>
 8007c0e:	f000 fba1 	bl	8008354 <_sbrk_r>
 8007c12:	6030      	str	r0, [r6, #0]
 8007c14:	0029      	movs	r1, r5
 8007c16:	0020      	movs	r0, r4
 8007c18:	f000 fb9c 	bl	8008354 <_sbrk_r>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d00a      	beq.n	8007c36 <sbrk_aligned+0x36>
 8007c20:	2303      	movs	r3, #3
 8007c22:	1cc5      	adds	r5, r0, #3
 8007c24:	439d      	bics	r5, r3
 8007c26:	42a8      	cmp	r0, r5
 8007c28:	d007      	beq.n	8007c3a <sbrk_aligned+0x3a>
 8007c2a:	1a29      	subs	r1, r5, r0
 8007c2c:	0020      	movs	r0, r4
 8007c2e:	f000 fb91 	bl	8008354 <_sbrk_r>
 8007c32:	3001      	adds	r0, #1
 8007c34:	d101      	bne.n	8007c3a <sbrk_aligned+0x3a>
 8007c36:	2501      	movs	r5, #1
 8007c38:	426d      	negs	r5, r5
 8007c3a:	0028      	movs	r0, r5
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	200008f4 	.word	0x200008f4

08007c44 <_malloc_r>:
 8007c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c46:	2203      	movs	r2, #3
 8007c48:	1ccb      	adds	r3, r1, #3
 8007c4a:	4393      	bics	r3, r2
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	0006      	movs	r6, r0
 8007c50:	001f      	movs	r7, r3
 8007c52:	2b0c      	cmp	r3, #12
 8007c54:	d238      	bcs.n	8007cc8 <_malloc_r+0x84>
 8007c56:	270c      	movs	r7, #12
 8007c58:	42b9      	cmp	r1, r7
 8007c5a:	d837      	bhi.n	8007ccc <_malloc_r+0x88>
 8007c5c:	0030      	movs	r0, r6
 8007c5e:	f000 f873 	bl	8007d48 <__malloc_lock>
 8007c62:	4b38      	ldr	r3, [pc, #224]	; (8007d44 <_malloc_r+0x100>)
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	001c      	movs	r4, r3
 8007c6a:	2c00      	cmp	r4, #0
 8007c6c:	d133      	bne.n	8007cd6 <_malloc_r+0x92>
 8007c6e:	0039      	movs	r1, r7
 8007c70:	0030      	movs	r0, r6
 8007c72:	f7ff ffc5 	bl	8007c00 <sbrk_aligned>
 8007c76:	0004      	movs	r4, r0
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d15e      	bne.n	8007d3a <_malloc_r+0xf6>
 8007c7c:	9b00      	ldr	r3, [sp, #0]
 8007c7e:	681c      	ldr	r4, [r3, #0]
 8007c80:	0025      	movs	r5, r4
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	d14e      	bne.n	8007d24 <_malloc_r+0xe0>
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	d051      	beq.n	8007d2e <_malloc_r+0xea>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	0029      	movs	r1, r5
 8007c8e:	18e3      	adds	r3, r4, r3
 8007c90:	0030      	movs	r0, r6
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	f000 fb5e 	bl	8008354 <_sbrk_r>
 8007c98:	9b01      	ldr	r3, [sp, #4]
 8007c9a:	4283      	cmp	r3, r0
 8007c9c:	d147      	bne.n	8007d2e <_malloc_r+0xea>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	0030      	movs	r0, r6
 8007ca2:	1aff      	subs	r7, r7, r3
 8007ca4:	0039      	movs	r1, r7
 8007ca6:	f7ff ffab 	bl	8007c00 <sbrk_aligned>
 8007caa:	3001      	adds	r0, #1
 8007cac:	d03f      	beq.n	8007d2e <_malloc_r+0xea>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	19db      	adds	r3, r3, r7
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	9b00      	ldr	r3, [sp, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d040      	beq.n	8007d3e <_malloc_r+0xfa>
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	42a2      	cmp	r2, r4
 8007cc0:	d133      	bne.n	8007d2a <_malloc_r+0xe6>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	e014      	b.n	8007cf2 <_malloc_r+0xae>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dac5      	bge.n	8007c58 <_malloc_r+0x14>
 8007ccc:	230c      	movs	r3, #12
 8007cce:	2500      	movs	r5, #0
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	0028      	movs	r0, r5
 8007cd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cd6:	6821      	ldr	r1, [r4, #0]
 8007cd8:	1bc9      	subs	r1, r1, r7
 8007cda:	d420      	bmi.n	8007d1e <_malloc_r+0xda>
 8007cdc:	290b      	cmp	r1, #11
 8007cde:	d918      	bls.n	8007d12 <_malloc_r+0xce>
 8007ce0:	19e2      	adds	r2, r4, r7
 8007ce2:	6027      	str	r7, [r4, #0]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d112      	bne.n	8007d0e <_malloc_r+0xca>
 8007ce8:	9b00      	ldr	r3, [sp, #0]
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	6011      	str	r1, [r2, #0]
 8007cf0:	6053      	str	r3, [r2, #4]
 8007cf2:	0030      	movs	r0, r6
 8007cf4:	0025      	movs	r5, r4
 8007cf6:	f000 f82f 	bl	8007d58 <__malloc_unlock>
 8007cfa:	2207      	movs	r2, #7
 8007cfc:	350b      	adds	r5, #11
 8007cfe:	1d23      	adds	r3, r4, #4
 8007d00:	4395      	bics	r5, r2
 8007d02:	1aea      	subs	r2, r5, r3
 8007d04:	429d      	cmp	r5, r3
 8007d06:	d0e4      	beq.n	8007cd2 <_malloc_r+0x8e>
 8007d08:	1b5b      	subs	r3, r3, r5
 8007d0a:	50a3      	str	r3, [r4, r2]
 8007d0c:	e7e1      	b.n	8007cd2 <_malloc_r+0x8e>
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	e7ec      	b.n	8007cec <_malloc_r+0xa8>
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d1d5      	bne.n	8007cc4 <_malloc_r+0x80>
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e7e9      	b.n	8007cf2 <_malloc_r+0xae>
 8007d1e:	0023      	movs	r3, r4
 8007d20:	6864      	ldr	r4, [r4, #4]
 8007d22:	e7a2      	b.n	8007c6a <_malloc_r+0x26>
 8007d24:	002c      	movs	r4, r5
 8007d26:	686d      	ldr	r5, [r5, #4]
 8007d28:	e7ab      	b.n	8007c82 <_malloc_r+0x3e>
 8007d2a:	0013      	movs	r3, r2
 8007d2c:	e7c4      	b.n	8007cb8 <_malloc_r+0x74>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	0030      	movs	r0, r6
 8007d32:	6033      	str	r3, [r6, #0]
 8007d34:	f000 f810 	bl	8007d58 <__malloc_unlock>
 8007d38:	e7cb      	b.n	8007cd2 <_malloc_r+0x8e>
 8007d3a:	6027      	str	r7, [r4, #0]
 8007d3c:	e7d9      	b.n	8007cf2 <_malloc_r+0xae>
 8007d3e:	605b      	str	r3, [r3, #4]
 8007d40:	deff      	udf	#255	; 0xff
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	200008f0 	.word	0x200008f0

08007d48 <__malloc_lock>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4802      	ldr	r0, [pc, #8]	; (8007d54 <__malloc_lock+0xc>)
 8007d4c:	f7ff ff02 	bl	8007b54 <__retarget_lock_acquire_recursive>
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	200008ec 	.word	0x200008ec

08007d58 <__malloc_unlock>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	4802      	ldr	r0, [pc, #8]	; (8007d64 <__malloc_unlock+0xc>)
 8007d5c:	f7ff fefb 	bl	8007b56 <__retarget_lock_release_recursive>
 8007d60:	bd10      	pop	{r4, pc}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	200008ec 	.word	0x200008ec

08007d68 <__ssputs_r>:
 8007d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	9203      	str	r2, [sp, #12]
 8007d70:	688e      	ldr	r6, [r1, #8]
 8007d72:	9a01      	ldr	r2, [sp, #4]
 8007d74:	0007      	movs	r7, r0
 8007d76:	000c      	movs	r4, r1
 8007d78:	680b      	ldr	r3, [r1, #0]
 8007d7a:	4296      	cmp	r6, r2
 8007d7c:	d831      	bhi.n	8007de2 <__ssputs_r+0x7a>
 8007d7e:	898a      	ldrh	r2, [r1, #12]
 8007d80:	2190      	movs	r1, #144	; 0x90
 8007d82:	00c9      	lsls	r1, r1, #3
 8007d84:	420a      	tst	r2, r1
 8007d86:	d029      	beq.n	8007ddc <__ssputs_r+0x74>
 8007d88:	2003      	movs	r0, #3
 8007d8a:	6921      	ldr	r1, [r4, #16]
 8007d8c:	1a5b      	subs	r3, r3, r1
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	6963      	ldr	r3, [r4, #20]
 8007d92:	4343      	muls	r3, r0
 8007d94:	0fdd      	lsrs	r5, r3, #31
 8007d96:	18ed      	adds	r5, r5, r3
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	9802      	ldr	r0, [sp, #8]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	181b      	adds	r3, r3, r0
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	42ab      	cmp	r3, r5
 8007da4:	d900      	bls.n	8007da8 <__ssputs_r+0x40>
 8007da6:	001d      	movs	r5, r3
 8007da8:	0552      	lsls	r2, r2, #21
 8007daa:	d529      	bpl.n	8007e00 <__ssputs_r+0x98>
 8007dac:	0029      	movs	r1, r5
 8007dae:	0038      	movs	r0, r7
 8007db0:	f7ff ff48 	bl	8007c44 <_malloc_r>
 8007db4:	1e06      	subs	r6, r0, #0
 8007db6:	d02d      	beq.n	8007e14 <__ssputs_r+0xac>
 8007db8:	9a02      	ldr	r2, [sp, #8]
 8007dba:	6921      	ldr	r1, [r4, #16]
 8007dbc:	f7ff fecc 	bl	8007b58 <memcpy>
 8007dc0:	89a2      	ldrh	r2, [r4, #12]
 8007dc2:	4b19      	ldr	r3, [pc, #100]	; (8007e28 <__ssputs_r+0xc0>)
 8007dc4:	401a      	ands	r2, r3
 8007dc6:	2380      	movs	r3, #128	; 0x80
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	6126      	str	r6, [r4, #16]
 8007dd0:	18f6      	adds	r6, r6, r3
 8007dd2:	6026      	str	r6, [r4, #0]
 8007dd4:	6165      	str	r5, [r4, #20]
 8007dd6:	9e01      	ldr	r6, [sp, #4]
 8007dd8:	1aed      	subs	r5, r5, r3
 8007dda:	60a5      	str	r5, [r4, #8]
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	429e      	cmp	r6, r3
 8007de0:	d900      	bls.n	8007de4 <__ssputs_r+0x7c>
 8007de2:	9e01      	ldr	r6, [sp, #4]
 8007de4:	0032      	movs	r2, r6
 8007de6:	9903      	ldr	r1, [sp, #12]
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	f000 fa9f 	bl	800832c <memmove>
 8007dee:	2000      	movs	r0, #0
 8007df0:	68a3      	ldr	r3, [r4, #8]
 8007df2:	1b9b      	subs	r3, r3, r6
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	199b      	adds	r3, r3, r6
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	b005      	add	sp, #20
 8007dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e00:	002a      	movs	r2, r5
 8007e02:	0038      	movs	r0, r7
 8007e04:	f000 fac3 	bl	800838e <_realloc_r>
 8007e08:	1e06      	subs	r6, r0, #0
 8007e0a:	d1df      	bne.n	8007dcc <__ssputs_r+0x64>
 8007e0c:	0038      	movs	r0, r7
 8007e0e:	6921      	ldr	r1, [r4, #16]
 8007e10:	f7ff feac 	bl	8007b6c <_free_r>
 8007e14:	230c      	movs	r3, #12
 8007e16:	2001      	movs	r0, #1
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	89a2      	ldrh	r2, [r4, #12]
 8007e1c:	3334      	adds	r3, #52	; 0x34
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	4240      	negs	r0, r0
 8007e24:	e7ea      	b.n	8007dfc <__ssputs_r+0x94>
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	fffffb7f 	.word	0xfffffb7f

08007e2c <_svfiprintf_r>:
 8007e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2e:	b0a1      	sub	sp, #132	; 0x84
 8007e30:	9003      	str	r0, [sp, #12]
 8007e32:	001d      	movs	r5, r3
 8007e34:	898b      	ldrh	r3, [r1, #12]
 8007e36:	000f      	movs	r7, r1
 8007e38:	0016      	movs	r6, r2
 8007e3a:	061b      	lsls	r3, r3, #24
 8007e3c:	d511      	bpl.n	8007e62 <_svfiprintf_r+0x36>
 8007e3e:	690b      	ldr	r3, [r1, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10e      	bne.n	8007e62 <_svfiprintf_r+0x36>
 8007e44:	2140      	movs	r1, #64	; 0x40
 8007e46:	f7ff fefd 	bl	8007c44 <_malloc_r>
 8007e4a:	6038      	str	r0, [r7, #0]
 8007e4c:	6138      	str	r0, [r7, #16]
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d105      	bne.n	8007e5e <_svfiprintf_r+0x32>
 8007e52:	230c      	movs	r3, #12
 8007e54:	9a03      	ldr	r2, [sp, #12]
 8007e56:	3801      	subs	r0, #1
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	b021      	add	sp, #132	; 0x84
 8007e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5e:	2340      	movs	r3, #64	; 0x40
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	2300      	movs	r3, #0
 8007e64:	ac08      	add	r4, sp, #32
 8007e66:	6163      	str	r3, [r4, #20]
 8007e68:	3320      	adds	r3, #32
 8007e6a:	7663      	strb	r3, [r4, #25]
 8007e6c:	3310      	adds	r3, #16
 8007e6e:	76a3      	strb	r3, [r4, #26]
 8007e70:	9507      	str	r5, [sp, #28]
 8007e72:	0035      	movs	r5, r6
 8007e74:	782b      	ldrb	r3, [r5, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <_svfiprintf_r+0x52>
 8007e7a:	2b25      	cmp	r3, #37	; 0x25
 8007e7c:	d148      	bne.n	8007f10 <_svfiprintf_r+0xe4>
 8007e7e:	1bab      	subs	r3, r5, r6
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	42b5      	cmp	r5, r6
 8007e84:	d00b      	beq.n	8007e9e <_svfiprintf_r+0x72>
 8007e86:	0032      	movs	r2, r6
 8007e88:	0039      	movs	r1, r7
 8007e8a:	9803      	ldr	r0, [sp, #12]
 8007e8c:	f7ff ff6c 	bl	8007d68 <__ssputs_r>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d100      	bne.n	8007e96 <_svfiprintf_r+0x6a>
 8007e94:	e0af      	b.n	8007ff6 <_svfiprintf_r+0x1ca>
 8007e96:	6963      	ldr	r3, [r4, #20]
 8007e98:	9a05      	ldr	r2, [sp, #20]
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	6163      	str	r3, [r4, #20]
 8007e9e:	782b      	ldrb	r3, [r5, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d100      	bne.n	8007ea6 <_svfiprintf_r+0x7a>
 8007ea4:	e0a7      	b.n	8007ff6 <_svfiprintf_r+0x1ca>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4252      	negs	r2, r2
 8007eac:	6062      	str	r2, [r4, #4]
 8007eae:	a904      	add	r1, sp, #16
 8007eb0:	3254      	adds	r2, #84	; 0x54
 8007eb2:	1852      	adds	r2, r2, r1
 8007eb4:	1c6e      	adds	r6, r5, #1
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	60e3      	str	r3, [r4, #12]
 8007eba:	60a3      	str	r3, [r4, #8]
 8007ebc:	7013      	strb	r3, [r2, #0]
 8007ebe:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ec0:	4b55      	ldr	r3, [pc, #340]	; (8008018 <_svfiprintf_r+0x1ec>)
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	7831      	ldrb	r1, [r6, #0]
 8007ec8:	9305      	str	r3, [sp, #20]
 8007eca:	f000 fa55 	bl	8008378 <memchr>
 8007ece:	1c75      	adds	r5, r6, #1
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d11f      	bne.n	8007f14 <_svfiprintf_r+0xe8>
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	06d3      	lsls	r3, r2, #27
 8007ed8:	d504      	bpl.n	8007ee4 <_svfiprintf_r+0xb8>
 8007eda:	2353      	movs	r3, #83	; 0x53
 8007edc:	a904      	add	r1, sp, #16
 8007ede:	185b      	adds	r3, r3, r1
 8007ee0:	2120      	movs	r1, #32
 8007ee2:	7019      	strb	r1, [r3, #0]
 8007ee4:	0713      	lsls	r3, r2, #28
 8007ee6:	d504      	bpl.n	8007ef2 <_svfiprintf_r+0xc6>
 8007ee8:	2353      	movs	r3, #83	; 0x53
 8007eea:	a904      	add	r1, sp, #16
 8007eec:	185b      	adds	r3, r3, r1
 8007eee:	212b      	movs	r1, #43	; 0x2b
 8007ef0:	7019      	strb	r1, [r3, #0]
 8007ef2:	7833      	ldrb	r3, [r6, #0]
 8007ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef6:	d016      	beq.n	8007f26 <_svfiprintf_r+0xfa>
 8007ef8:	0035      	movs	r5, r6
 8007efa:	2100      	movs	r1, #0
 8007efc:	200a      	movs	r0, #10
 8007efe:	68e3      	ldr	r3, [r4, #12]
 8007f00:	782a      	ldrb	r2, [r5, #0]
 8007f02:	1c6e      	adds	r6, r5, #1
 8007f04:	3a30      	subs	r2, #48	; 0x30
 8007f06:	2a09      	cmp	r2, #9
 8007f08:	d94e      	bls.n	8007fa8 <_svfiprintf_r+0x17c>
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	d111      	bne.n	8007f32 <_svfiprintf_r+0x106>
 8007f0e:	e017      	b.n	8007f40 <_svfiprintf_r+0x114>
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7af      	b.n	8007e74 <_svfiprintf_r+0x48>
 8007f14:	9b05      	ldr	r3, [sp, #20]
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	1ac0      	subs	r0, r0, r3
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4083      	lsls	r3, r0
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	002e      	movs	r6, r5
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	e7cc      	b.n	8007ec0 <_svfiprintf_r+0x94>
 8007f26:	9b07      	ldr	r3, [sp, #28]
 8007f28:	1d19      	adds	r1, r3, #4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	9107      	str	r1, [sp, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	db01      	blt.n	8007f36 <_svfiprintf_r+0x10a>
 8007f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f34:	e004      	b.n	8007f40 <_svfiprintf_r+0x114>
 8007f36:	425b      	negs	r3, r3
 8007f38:	60e3      	str	r3, [r4, #12]
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	782b      	ldrb	r3, [r5, #0]
 8007f42:	2b2e      	cmp	r3, #46	; 0x2e
 8007f44:	d10a      	bne.n	8007f5c <_svfiprintf_r+0x130>
 8007f46:	786b      	ldrb	r3, [r5, #1]
 8007f48:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4a:	d135      	bne.n	8007fb8 <_svfiprintf_r+0x18c>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	3502      	adds	r5, #2
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	9207      	str	r2, [sp, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	db2b      	blt.n	8007fb2 <_svfiprintf_r+0x186>
 8007f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5c:	4e2f      	ldr	r6, [pc, #188]	; (800801c <_svfiprintf_r+0x1f0>)
 8007f5e:	2203      	movs	r2, #3
 8007f60:	0030      	movs	r0, r6
 8007f62:	7829      	ldrb	r1, [r5, #0]
 8007f64:	f000 fa08 	bl	8008378 <memchr>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d006      	beq.n	8007f7a <_svfiprintf_r+0x14e>
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	1b80      	subs	r0, r0, r6
 8007f70:	4083      	lsls	r3, r0
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	3501      	adds	r5, #1
 8007f76:	4313      	orrs	r3, r2
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	7829      	ldrb	r1, [r5, #0]
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	4828      	ldr	r0, [pc, #160]	; (8008020 <_svfiprintf_r+0x1f4>)
 8007f80:	1c6e      	adds	r6, r5, #1
 8007f82:	7621      	strb	r1, [r4, #24]
 8007f84:	f000 f9f8 	bl	8008378 <memchr>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d03c      	beq.n	8008006 <_svfiprintf_r+0x1da>
 8007f8c:	4b25      	ldr	r3, [pc, #148]	; (8008024 <_svfiprintf_r+0x1f8>)
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d125      	bne.n	8007fde <_svfiprintf_r+0x1b2>
 8007f92:	2207      	movs	r2, #7
 8007f94:	9b07      	ldr	r3, [sp, #28]
 8007f96:	3307      	adds	r3, #7
 8007f98:	4393      	bics	r3, r2
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	9307      	str	r3, [sp, #28]
 8007f9e:	6963      	ldr	r3, [r4, #20]
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	189b      	adds	r3, r3, r2
 8007fa4:	6163      	str	r3, [r4, #20]
 8007fa6:	e764      	b.n	8007e72 <_svfiprintf_r+0x46>
 8007fa8:	4343      	muls	r3, r0
 8007faa:	0035      	movs	r5, r6
 8007fac:	2101      	movs	r1, #1
 8007fae:	189b      	adds	r3, r3, r2
 8007fb0:	e7a6      	b.n	8007f00 <_svfiprintf_r+0xd4>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	e7d0      	b.n	8007f5a <_svfiprintf_r+0x12e>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	200a      	movs	r0, #10
 8007fbc:	001a      	movs	r2, r3
 8007fbe:	3501      	adds	r5, #1
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	7829      	ldrb	r1, [r5, #0]
 8007fc4:	1c6e      	adds	r6, r5, #1
 8007fc6:	3930      	subs	r1, #48	; 0x30
 8007fc8:	2909      	cmp	r1, #9
 8007fca:	d903      	bls.n	8007fd4 <_svfiprintf_r+0x1a8>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0c5      	beq.n	8007f5c <_svfiprintf_r+0x130>
 8007fd0:	9209      	str	r2, [sp, #36]	; 0x24
 8007fd2:	e7c3      	b.n	8007f5c <_svfiprintf_r+0x130>
 8007fd4:	4342      	muls	r2, r0
 8007fd6:	0035      	movs	r5, r6
 8007fd8:	2301      	movs	r3, #1
 8007fda:	1852      	adds	r2, r2, r1
 8007fdc:	e7f1      	b.n	8007fc2 <_svfiprintf_r+0x196>
 8007fde:	aa07      	add	r2, sp, #28
 8007fe0:	9200      	str	r2, [sp, #0]
 8007fe2:	0021      	movs	r1, r4
 8007fe4:	003a      	movs	r2, r7
 8007fe6:	4b10      	ldr	r3, [pc, #64]	; (8008028 <_svfiprintf_r+0x1fc>)
 8007fe8:	9803      	ldr	r0, [sp, #12]
 8007fea:	e000      	b.n	8007fee <_svfiprintf_r+0x1c2>
 8007fec:	bf00      	nop
 8007fee:	9004      	str	r0, [sp, #16]
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	d1d3      	bne.n	8007f9e <_svfiprintf_r+0x172>
 8007ff6:	89bb      	ldrh	r3, [r7, #12]
 8007ff8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ffa:	065b      	lsls	r3, r3, #25
 8007ffc:	d400      	bmi.n	8008000 <_svfiprintf_r+0x1d4>
 8007ffe:	e72c      	b.n	8007e5a <_svfiprintf_r+0x2e>
 8008000:	2001      	movs	r0, #1
 8008002:	4240      	negs	r0, r0
 8008004:	e729      	b.n	8007e5a <_svfiprintf_r+0x2e>
 8008006:	aa07      	add	r2, sp, #28
 8008008:	9200      	str	r2, [sp, #0]
 800800a:	0021      	movs	r1, r4
 800800c:	003a      	movs	r2, r7
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <_svfiprintf_r+0x1fc>)
 8008010:	9803      	ldr	r0, [sp, #12]
 8008012:	f000 f87b 	bl	800810c <_printf_i>
 8008016:	e7ea      	b.n	8007fee <_svfiprintf_r+0x1c2>
 8008018:	08009364 	.word	0x08009364
 800801c:	0800936a 	.word	0x0800936a
 8008020:	0800936e 	.word	0x0800936e
 8008024:	00000000 	.word	0x00000000
 8008028:	08007d69 	.word	0x08007d69

0800802c <_printf_common>:
 800802c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800802e:	0016      	movs	r6, r2
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	688a      	ldr	r2, [r1, #8]
 8008034:	690b      	ldr	r3, [r1, #16]
 8008036:	000c      	movs	r4, r1
 8008038:	9000      	str	r0, [sp, #0]
 800803a:	4293      	cmp	r3, r2
 800803c:	da00      	bge.n	8008040 <_printf_common+0x14>
 800803e:	0013      	movs	r3, r2
 8008040:	0022      	movs	r2, r4
 8008042:	6033      	str	r3, [r6, #0]
 8008044:	3243      	adds	r2, #67	; 0x43
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	2a00      	cmp	r2, #0
 800804a:	d001      	beq.n	8008050 <_printf_common+0x24>
 800804c:	3301      	adds	r3, #1
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	069b      	lsls	r3, r3, #26
 8008054:	d502      	bpl.n	800805c <_printf_common+0x30>
 8008056:	6833      	ldr	r3, [r6, #0]
 8008058:	3302      	adds	r3, #2
 800805a:	6033      	str	r3, [r6, #0]
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	2306      	movs	r3, #6
 8008060:	0015      	movs	r5, r2
 8008062:	401d      	ands	r5, r3
 8008064:	421a      	tst	r2, r3
 8008066:	d027      	beq.n	80080b8 <_printf_common+0x8c>
 8008068:	0023      	movs	r3, r4
 800806a:	3343      	adds	r3, #67	; 0x43
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	1e5a      	subs	r2, r3, #1
 8008070:	4193      	sbcs	r3, r2
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	0692      	lsls	r2, r2, #26
 8008076:	d430      	bmi.n	80080da <_printf_common+0xae>
 8008078:	0022      	movs	r2, r4
 800807a:	9901      	ldr	r1, [sp, #4]
 800807c:	9800      	ldr	r0, [sp, #0]
 800807e:	9d08      	ldr	r5, [sp, #32]
 8008080:	3243      	adds	r2, #67	; 0x43
 8008082:	47a8      	blx	r5
 8008084:	3001      	adds	r0, #1
 8008086:	d025      	beq.n	80080d4 <_printf_common+0xa8>
 8008088:	2206      	movs	r2, #6
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	2500      	movs	r5, #0
 800808e:	4013      	ands	r3, r2
 8008090:	2b04      	cmp	r3, #4
 8008092:	d105      	bne.n	80080a0 <_printf_common+0x74>
 8008094:	6833      	ldr	r3, [r6, #0]
 8008096:	68e5      	ldr	r5, [r4, #12]
 8008098:	1aed      	subs	r5, r5, r3
 800809a:	43eb      	mvns	r3, r5
 800809c:	17db      	asrs	r3, r3, #31
 800809e:	401d      	ands	r5, r3
 80080a0:	68a3      	ldr	r3, [r4, #8]
 80080a2:	6922      	ldr	r2, [r4, #16]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	dd01      	ble.n	80080ac <_printf_common+0x80>
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	18ed      	adds	r5, r5, r3
 80080ac:	2600      	movs	r6, #0
 80080ae:	42b5      	cmp	r5, r6
 80080b0:	d120      	bne.n	80080f4 <_printf_common+0xc8>
 80080b2:	2000      	movs	r0, #0
 80080b4:	e010      	b.n	80080d8 <_printf_common+0xac>
 80080b6:	3501      	adds	r5, #1
 80080b8:	68e3      	ldr	r3, [r4, #12]
 80080ba:	6832      	ldr	r2, [r6, #0]
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	42ab      	cmp	r3, r5
 80080c0:	ddd2      	ble.n	8008068 <_printf_common+0x3c>
 80080c2:	0022      	movs	r2, r4
 80080c4:	2301      	movs	r3, #1
 80080c6:	9901      	ldr	r1, [sp, #4]
 80080c8:	9800      	ldr	r0, [sp, #0]
 80080ca:	9f08      	ldr	r7, [sp, #32]
 80080cc:	3219      	adds	r2, #25
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1f0      	bne.n	80080b6 <_printf_common+0x8a>
 80080d4:	2001      	movs	r0, #1
 80080d6:	4240      	negs	r0, r0
 80080d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080da:	2030      	movs	r0, #48	; 0x30
 80080dc:	18e1      	adds	r1, r4, r3
 80080de:	3143      	adds	r1, #67	; 0x43
 80080e0:	7008      	strb	r0, [r1, #0]
 80080e2:	0021      	movs	r1, r4
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	3145      	adds	r1, #69	; 0x45
 80080e8:	7809      	ldrb	r1, [r1, #0]
 80080ea:	18a2      	adds	r2, r4, r2
 80080ec:	3243      	adds	r2, #67	; 0x43
 80080ee:	3302      	adds	r3, #2
 80080f0:	7011      	strb	r1, [r2, #0]
 80080f2:	e7c1      	b.n	8008078 <_printf_common+0x4c>
 80080f4:	0022      	movs	r2, r4
 80080f6:	2301      	movs	r3, #1
 80080f8:	9901      	ldr	r1, [sp, #4]
 80080fa:	9800      	ldr	r0, [sp, #0]
 80080fc:	9f08      	ldr	r7, [sp, #32]
 80080fe:	321a      	adds	r2, #26
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	d0e6      	beq.n	80080d4 <_printf_common+0xa8>
 8008106:	3601      	adds	r6, #1
 8008108:	e7d1      	b.n	80080ae <_printf_common+0x82>
	...

0800810c <_printf_i>:
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	b08b      	sub	sp, #44	; 0x2c
 8008110:	9206      	str	r2, [sp, #24]
 8008112:	000a      	movs	r2, r1
 8008114:	3243      	adds	r2, #67	; 0x43
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	9005      	str	r0, [sp, #20]
 800811a:	9204      	str	r2, [sp, #16]
 800811c:	7e0a      	ldrb	r2, [r1, #24]
 800811e:	000c      	movs	r4, r1
 8008120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008122:	2a78      	cmp	r2, #120	; 0x78
 8008124:	d809      	bhi.n	800813a <_printf_i+0x2e>
 8008126:	2a62      	cmp	r2, #98	; 0x62
 8008128:	d80b      	bhi.n	8008142 <_printf_i+0x36>
 800812a:	2a00      	cmp	r2, #0
 800812c:	d100      	bne.n	8008130 <_printf_i+0x24>
 800812e:	e0be      	b.n	80082ae <_printf_i+0x1a2>
 8008130:	497c      	ldr	r1, [pc, #496]	; (8008324 <_printf_i+0x218>)
 8008132:	9103      	str	r1, [sp, #12]
 8008134:	2a58      	cmp	r2, #88	; 0x58
 8008136:	d100      	bne.n	800813a <_printf_i+0x2e>
 8008138:	e093      	b.n	8008262 <_printf_i+0x156>
 800813a:	0026      	movs	r6, r4
 800813c:	3642      	adds	r6, #66	; 0x42
 800813e:	7032      	strb	r2, [r6, #0]
 8008140:	e022      	b.n	8008188 <_printf_i+0x7c>
 8008142:	0010      	movs	r0, r2
 8008144:	3863      	subs	r0, #99	; 0x63
 8008146:	2815      	cmp	r0, #21
 8008148:	d8f7      	bhi.n	800813a <_printf_i+0x2e>
 800814a:	f7f7 ffdd 	bl	8000108 <__gnu_thumb1_case_shi>
 800814e:	0016      	.short	0x0016
 8008150:	fff6001f 	.word	0xfff6001f
 8008154:	fff6fff6 	.word	0xfff6fff6
 8008158:	001ffff6 	.word	0x001ffff6
 800815c:	fff6fff6 	.word	0xfff6fff6
 8008160:	fff6fff6 	.word	0xfff6fff6
 8008164:	003600a3 	.word	0x003600a3
 8008168:	fff60083 	.word	0xfff60083
 800816c:	00b4fff6 	.word	0x00b4fff6
 8008170:	0036fff6 	.word	0x0036fff6
 8008174:	fff6fff6 	.word	0xfff6fff6
 8008178:	0087      	.short	0x0087
 800817a:	0026      	movs	r6, r4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	3642      	adds	r6, #66	; 0x42
 8008180:	1d11      	adds	r1, r2, #4
 8008182:	6019      	str	r1, [r3, #0]
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	7033      	strb	r3, [r6, #0]
 8008188:	2301      	movs	r3, #1
 800818a:	e0a2      	b.n	80082d2 <_printf_i+0x1c6>
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	6809      	ldr	r1, [r1, #0]
 8008190:	1d02      	adds	r2, r0, #4
 8008192:	060d      	lsls	r5, r1, #24
 8008194:	d50b      	bpl.n	80081ae <_printf_i+0xa2>
 8008196:	6805      	ldr	r5, [r0, #0]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	2d00      	cmp	r5, #0
 800819c:	da03      	bge.n	80081a6 <_printf_i+0x9a>
 800819e:	232d      	movs	r3, #45	; 0x2d
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	426d      	negs	r5, r5
 80081a4:	7013      	strb	r3, [r2, #0]
 80081a6:	4b5f      	ldr	r3, [pc, #380]	; (8008324 <_printf_i+0x218>)
 80081a8:	270a      	movs	r7, #10
 80081aa:	9303      	str	r3, [sp, #12]
 80081ac:	e01b      	b.n	80081e6 <_printf_i+0xda>
 80081ae:	6805      	ldr	r5, [r0, #0]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	0649      	lsls	r1, r1, #25
 80081b4:	d5f1      	bpl.n	800819a <_printf_i+0x8e>
 80081b6:	b22d      	sxth	r5, r5
 80081b8:	e7ef      	b.n	800819a <_printf_i+0x8e>
 80081ba:	680d      	ldr	r5, [r1, #0]
 80081bc:	6819      	ldr	r1, [r3, #0]
 80081be:	1d08      	adds	r0, r1, #4
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	062e      	lsls	r6, r5, #24
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0xbe>
 80081c6:	680d      	ldr	r5, [r1, #0]
 80081c8:	e003      	b.n	80081d2 <_printf_i+0xc6>
 80081ca:	066d      	lsls	r5, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0xba>
 80081ce:	680d      	ldr	r5, [r1, #0]
 80081d0:	b2ad      	uxth	r5, r5
 80081d2:	4b54      	ldr	r3, [pc, #336]	; (8008324 <_printf_i+0x218>)
 80081d4:	2708      	movs	r7, #8
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	2a6f      	cmp	r2, #111	; 0x6f
 80081da:	d000      	beq.n	80081de <_printf_i+0xd2>
 80081dc:	3702      	adds	r7, #2
 80081de:	0023      	movs	r3, r4
 80081e0:	2200      	movs	r2, #0
 80081e2:	3343      	adds	r3, #67	; 0x43
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	60a3      	str	r3, [r4, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db03      	blt.n	80081f6 <_printf_i+0xea>
 80081ee:	2104      	movs	r1, #4
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	438a      	bics	r2, r1
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	d102      	bne.n	8008200 <_printf_i+0xf4>
 80081fa:	9e04      	ldr	r6, [sp, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <_printf_i+0x10e>
 8008200:	9e04      	ldr	r6, [sp, #16]
 8008202:	0028      	movs	r0, r5
 8008204:	0039      	movs	r1, r7
 8008206:	f7f8 f80f 	bl	8000228 <__aeabi_uidivmod>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	3e01      	subs	r6, #1
 800820e:	5c5b      	ldrb	r3, [r3, r1]
 8008210:	7033      	strb	r3, [r6, #0]
 8008212:	002b      	movs	r3, r5
 8008214:	0005      	movs	r5, r0
 8008216:	429f      	cmp	r7, r3
 8008218:	d9f3      	bls.n	8008202 <_printf_i+0xf6>
 800821a:	2f08      	cmp	r7, #8
 800821c:	d109      	bne.n	8008232 <_printf_i+0x126>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	07db      	lsls	r3, r3, #31
 8008222:	d506      	bpl.n	8008232 <_printf_i+0x126>
 8008224:	6862      	ldr	r2, [r4, #4]
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	429a      	cmp	r2, r3
 800822a:	dc02      	bgt.n	8008232 <_printf_i+0x126>
 800822c:	2330      	movs	r3, #48	; 0x30
 800822e:	3e01      	subs	r6, #1
 8008230:	7033      	strb	r3, [r6, #0]
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	1b9b      	subs	r3, r3, r6
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	0021      	movs	r1, r4
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	aa09      	add	r2, sp, #36	; 0x24
 8008244:	f7ff fef2 	bl	800802c <_printf_common>
 8008248:	3001      	adds	r0, #1
 800824a:	d147      	bne.n	80082dc <_printf_i+0x1d0>
 800824c:	2001      	movs	r0, #1
 800824e:	4240      	negs	r0, r0
 8008250:	b00b      	add	sp, #44	; 0x2c
 8008252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008254:	2220      	movs	r2, #32
 8008256:	6809      	ldr	r1, [r1, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	6022      	str	r2, [r4, #0]
 800825c:	2278      	movs	r2, #120	; 0x78
 800825e:	4932      	ldr	r1, [pc, #200]	; (8008328 <_printf_i+0x21c>)
 8008260:	9103      	str	r1, [sp, #12]
 8008262:	0021      	movs	r1, r4
 8008264:	3145      	adds	r1, #69	; 0x45
 8008266:	700a      	strb	r2, [r1, #0]
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	c920      	ldmia	r1!, {r5}
 800826e:	0610      	lsls	r0, r2, #24
 8008270:	d402      	bmi.n	8008278 <_printf_i+0x16c>
 8008272:	0650      	lsls	r0, r2, #25
 8008274:	d500      	bpl.n	8008278 <_printf_i+0x16c>
 8008276:	b2ad      	uxth	r5, r5
 8008278:	6019      	str	r1, [r3, #0]
 800827a:	07d3      	lsls	r3, r2, #31
 800827c:	d502      	bpl.n	8008284 <_printf_i+0x178>
 800827e:	2320      	movs	r3, #32
 8008280:	4313      	orrs	r3, r2
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	2710      	movs	r7, #16
 8008286:	2d00      	cmp	r5, #0
 8008288:	d1a9      	bne.n	80081de <_printf_i+0xd2>
 800828a:	2220      	movs	r2, #32
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	4393      	bics	r3, r2
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	e7a4      	b.n	80081de <_printf_i+0xd2>
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	680d      	ldr	r5, [r1, #0]
 8008298:	1d10      	adds	r0, r2, #4
 800829a:	6949      	ldr	r1, [r1, #20]
 800829c:	6018      	str	r0, [r3, #0]
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	062e      	lsls	r6, r5, #24
 80082a2:	d501      	bpl.n	80082a8 <_printf_i+0x19c>
 80082a4:	6019      	str	r1, [r3, #0]
 80082a6:	e002      	b.n	80082ae <_printf_i+0x1a2>
 80082a8:	066d      	lsls	r5, r5, #25
 80082aa:	d5fb      	bpl.n	80082a4 <_printf_i+0x198>
 80082ac:	8019      	strh	r1, [r3, #0]
 80082ae:	2300      	movs	r3, #0
 80082b0:	9e04      	ldr	r6, [sp, #16]
 80082b2:	6123      	str	r3, [r4, #16]
 80082b4:	e7c0      	b.n	8008238 <_printf_i+0x12c>
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	1d11      	adds	r1, r2, #4
 80082ba:	6019      	str	r1, [r3, #0]
 80082bc:	6816      	ldr	r6, [r2, #0]
 80082be:	2100      	movs	r1, #0
 80082c0:	0030      	movs	r0, r6
 80082c2:	6862      	ldr	r2, [r4, #4]
 80082c4:	f000 f858 	bl	8008378 <memchr>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d001      	beq.n	80082d0 <_printf_i+0x1c4>
 80082cc:	1b80      	subs	r0, r0, r6
 80082ce:	6060      	str	r0, [r4, #4]
 80082d0:	6863      	ldr	r3, [r4, #4]
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9a04      	ldr	r2, [sp, #16]
 80082d8:	7013      	strb	r3, [r2, #0]
 80082da:	e7ad      	b.n	8008238 <_printf_i+0x12c>
 80082dc:	0032      	movs	r2, r6
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	9906      	ldr	r1, [sp, #24]
 80082e2:	9805      	ldr	r0, [sp, #20]
 80082e4:	9d07      	ldr	r5, [sp, #28]
 80082e6:	47a8      	blx	r5
 80082e8:	3001      	adds	r0, #1
 80082ea:	d0af      	beq.n	800824c <_printf_i+0x140>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	079b      	lsls	r3, r3, #30
 80082f0:	d415      	bmi.n	800831e <_printf_i+0x212>
 80082f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f4:	68e0      	ldr	r0, [r4, #12]
 80082f6:	4298      	cmp	r0, r3
 80082f8:	daaa      	bge.n	8008250 <_printf_i+0x144>
 80082fa:	0018      	movs	r0, r3
 80082fc:	e7a8      	b.n	8008250 <_printf_i+0x144>
 80082fe:	0022      	movs	r2, r4
 8008300:	2301      	movs	r3, #1
 8008302:	9906      	ldr	r1, [sp, #24]
 8008304:	9805      	ldr	r0, [sp, #20]
 8008306:	9e07      	ldr	r6, [sp, #28]
 8008308:	3219      	adds	r2, #25
 800830a:	47b0      	blx	r6
 800830c:	3001      	adds	r0, #1
 800830e:	d09d      	beq.n	800824c <_printf_i+0x140>
 8008310:	3501      	adds	r5, #1
 8008312:	68e3      	ldr	r3, [r4, #12]
 8008314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	42ab      	cmp	r3, r5
 800831a:	dcf0      	bgt.n	80082fe <_printf_i+0x1f2>
 800831c:	e7e9      	b.n	80082f2 <_printf_i+0x1e6>
 800831e:	2500      	movs	r5, #0
 8008320:	e7f7      	b.n	8008312 <_printf_i+0x206>
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	08009375 	.word	0x08009375
 8008328:	08009386 	.word	0x08009386

0800832c <memmove>:
 800832c:	b510      	push	{r4, lr}
 800832e:	4288      	cmp	r0, r1
 8008330:	d902      	bls.n	8008338 <memmove+0xc>
 8008332:	188b      	adds	r3, r1, r2
 8008334:	4298      	cmp	r0, r3
 8008336:	d303      	bcc.n	8008340 <memmove+0x14>
 8008338:	2300      	movs	r3, #0
 800833a:	e007      	b.n	800834c <memmove+0x20>
 800833c:	5c8b      	ldrb	r3, [r1, r2]
 800833e:	5483      	strb	r3, [r0, r2]
 8008340:	3a01      	subs	r2, #1
 8008342:	d2fb      	bcs.n	800833c <memmove+0x10>
 8008344:	bd10      	pop	{r4, pc}
 8008346:	5ccc      	ldrb	r4, [r1, r3]
 8008348:	54c4      	strb	r4, [r0, r3]
 800834a:	3301      	adds	r3, #1
 800834c:	429a      	cmp	r2, r3
 800834e:	d1fa      	bne.n	8008346 <memmove+0x1a>
 8008350:	e7f8      	b.n	8008344 <memmove+0x18>
	...

08008354 <_sbrk_r>:
 8008354:	2300      	movs	r3, #0
 8008356:	b570      	push	{r4, r5, r6, lr}
 8008358:	4d06      	ldr	r5, [pc, #24]	; (8008374 <_sbrk_r+0x20>)
 800835a:	0004      	movs	r4, r0
 800835c:	0008      	movs	r0, r1
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	f7fc f9d0 	bl	8004704 <_sbrk>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d103      	bne.n	8008370 <_sbrk_r+0x1c>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d000      	beq.n	8008370 <_sbrk_r+0x1c>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	200008e8 	.word	0x200008e8

08008378 <memchr>:
 8008378:	b2c9      	uxtb	r1, r1
 800837a:	1882      	adds	r2, r0, r2
 800837c:	4290      	cmp	r0, r2
 800837e:	d101      	bne.n	8008384 <memchr+0xc>
 8008380:	2000      	movs	r0, #0
 8008382:	4770      	bx	lr
 8008384:	7803      	ldrb	r3, [r0, #0]
 8008386:	428b      	cmp	r3, r1
 8008388:	d0fb      	beq.n	8008382 <memchr+0xa>
 800838a:	3001      	adds	r0, #1
 800838c:	e7f6      	b.n	800837c <memchr+0x4>

0800838e <_realloc_r>:
 800838e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008390:	0007      	movs	r7, r0
 8008392:	000e      	movs	r6, r1
 8008394:	0014      	movs	r4, r2
 8008396:	2900      	cmp	r1, #0
 8008398:	d105      	bne.n	80083a6 <_realloc_r+0x18>
 800839a:	0011      	movs	r1, r2
 800839c:	f7ff fc52 	bl	8007c44 <_malloc_r>
 80083a0:	0005      	movs	r5, r0
 80083a2:	0028      	movs	r0, r5
 80083a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	d103      	bne.n	80083b2 <_realloc_r+0x24>
 80083aa:	f7ff fbdf 	bl	8007b6c <_free_r>
 80083ae:	0025      	movs	r5, r4
 80083b0:	e7f7      	b.n	80083a2 <_realloc_r+0x14>
 80083b2:	f000 f81b 	bl	80083ec <_malloc_usable_size_r>
 80083b6:	9001      	str	r0, [sp, #4]
 80083b8:	4284      	cmp	r4, r0
 80083ba:	d803      	bhi.n	80083c4 <_realloc_r+0x36>
 80083bc:	0035      	movs	r5, r6
 80083be:	0843      	lsrs	r3, r0, #1
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d3ee      	bcc.n	80083a2 <_realloc_r+0x14>
 80083c4:	0021      	movs	r1, r4
 80083c6:	0038      	movs	r0, r7
 80083c8:	f7ff fc3c 	bl	8007c44 <_malloc_r>
 80083cc:	1e05      	subs	r5, r0, #0
 80083ce:	d0e8      	beq.n	80083a2 <_realloc_r+0x14>
 80083d0:	9b01      	ldr	r3, [sp, #4]
 80083d2:	0022      	movs	r2, r4
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d900      	bls.n	80083da <_realloc_r+0x4c>
 80083d8:	001a      	movs	r2, r3
 80083da:	0031      	movs	r1, r6
 80083dc:	0028      	movs	r0, r5
 80083de:	f7ff fbbb 	bl	8007b58 <memcpy>
 80083e2:	0031      	movs	r1, r6
 80083e4:	0038      	movs	r0, r7
 80083e6:	f7ff fbc1 	bl	8007b6c <_free_r>
 80083ea:	e7da      	b.n	80083a2 <_realloc_r+0x14>

080083ec <_malloc_usable_size_r>:
 80083ec:	1f0b      	subs	r3, r1, #4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	1f18      	subs	r0, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	da01      	bge.n	80083fa <_malloc_usable_size_r+0xe>
 80083f6:	580b      	ldr	r3, [r1, r0]
 80083f8:	18c0      	adds	r0, r0, r3
 80083fa:	4770      	bx	lr

080083fc <atan2>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	f000 fa97 	bl	8008930 <__ieee754_atan2>
 8008402:	bd10      	pop	{r4, pc}

08008404 <sqrt>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	0004      	movs	r4, r0
 8008408:	000d      	movs	r5, r1
 800840a:	f000 f9a5 	bl	8008758 <__ieee754_sqrt>
 800840e:	0022      	movs	r2, r4
 8008410:	0006      	movs	r6, r0
 8008412:	000f      	movs	r7, r1
 8008414:	002b      	movs	r3, r5
 8008416:	0020      	movs	r0, r4
 8008418:	0029      	movs	r1, r5
 800841a:	f7fa f90d 	bl	8002638 <__aeabi_dcmpun>
 800841e:	2800      	cmp	r0, #0
 8008420:	d113      	bne.n	800844a <sqrt+0x46>
 8008422:	2200      	movs	r2, #0
 8008424:	2300      	movs	r3, #0
 8008426:	0020      	movs	r0, r4
 8008428:	0029      	movs	r1, r5
 800842a:	f7f7 ff19 	bl	8000260 <__aeabi_dcmplt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d00b      	beq.n	800844a <sqrt+0x46>
 8008432:	f7ff fb65 	bl	8007b00 <__errno>
 8008436:	2321      	movs	r3, #33	; 0x21
 8008438:	2200      	movs	r2, #0
 800843a:	6003      	str	r3, [r0, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	0010      	movs	r0, r2
 8008440:	0019      	movs	r1, r3
 8008442:	f7f8 febb 	bl	80011bc <__aeabi_ddiv>
 8008446:	0006      	movs	r6, r0
 8008448:	000f      	movs	r7, r1
 800844a:	0030      	movs	r0, r6
 800844c:	0039      	movs	r1, r7
 800844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008450 <atan>:
 8008450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008452:	4b98      	ldr	r3, [pc, #608]	; (80086b4 <atan+0x264>)
 8008454:	b085      	sub	sp, #20
 8008456:	004e      	lsls	r6, r1, #1
 8008458:	0004      	movs	r4, r0
 800845a:	000d      	movs	r5, r1
 800845c:	9103      	str	r1, [sp, #12]
 800845e:	0876      	lsrs	r6, r6, #1
 8008460:	429e      	cmp	r6, r3
 8008462:	dd18      	ble.n	8008496 <atan+0x46>
 8008464:	4b94      	ldr	r3, [pc, #592]	; (80086b8 <atan+0x268>)
 8008466:	429e      	cmp	r6, r3
 8008468:	dc02      	bgt.n	8008470 <atan+0x20>
 800846a:	d10a      	bne.n	8008482 <atan+0x32>
 800846c:	2800      	cmp	r0, #0
 800846e:	d008      	beq.n	8008482 <atan+0x32>
 8008470:	0022      	movs	r2, r4
 8008472:	002b      	movs	r3, r5
 8008474:	0020      	movs	r0, r4
 8008476:	0029      	movs	r1, r5
 8008478:	f7f8 fb40 	bl	8000afc <__aeabi_dadd>
 800847c:	0004      	movs	r4, r0
 800847e:	000d      	movs	r5, r1
 8008480:	e005      	b.n	800848e <atan+0x3e>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	4c8d      	ldr	r4, [pc, #564]	; (80086bc <atan+0x26c>)
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd00      	ble.n	800848c <atan+0x3c>
 800848a:	e110      	b.n	80086ae <atan+0x25e>
 800848c:	4d8c      	ldr	r5, [pc, #560]	; (80086c0 <atan+0x270>)
 800848e:	0020      	movs	r0, r4
 8008490:	0029      	movs	r1, r5
 8008492:	b005      	add	sp, #20
 8008494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008496:	4b8b      	ldr	r3, [pc, #556]	; (80086c4 <atan+0x274>)
 8008498:	429e      	cmp	r6, r3
 800849a:	dc0f      	bgt.n	80084bc <atan+0x6c>
 800849c:	4b8a      	ldr	r3, [pc, #552]	; (80086c8 <atan+0x278>)
 800849e:	429e      	cmp	r6, r3
 80084a0:	dc09      	bgt.n	80084b6 <atan+0x66>
 80084a2:	4a8a      	ldr	r2, [pc, #552]	; (80086cc <atan+0x27c>)
 80084a4:	4b8a      	ldr	r3, [pc, #552]	; (80086d0 <atan+0x280>)
 80084a6:	f7f8 fb29 	bl	8000afc <__aeabi_dadd>
 80084aa:	2200      	movs	r2, #0
 80084ac:	4b89      	ldr	r3, [pc, #548]	; (80086d4 <atan+0x284>)
 80084ae:	f7f7 feeb 	bl	8000288 <__aeabi_dcmpgt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d1eb      	bne.n	800848e <atan+0x3e>
 80084b6:	2301      	movs	r3, #1
 80084b8:	425b      	negs	r3, r3
 80084ba:	e025      	b.n	8008508 <atan+0xb8>
 80084bc:	f000 f948 	bl	8008750 <fabs>
 80084c0:	4b85      	ldr	r3, [pc, #532]	; (80086d8 <atan+0x288>)
 80084c2:	0004      	movs	r4, r0
 80084c4:	000d      	movs	r5, r1
 80084c6:	429e      	cmp	r6, r3
 80084c8:	dd00      	ble.n	80084cc <atan+0x7c>
 80084ca:	e0aa      	b.n	8008622 <atan+0x1d2>
 80084cc:	4b83      	ldr	r3, [pc, #524]	; (80086dc <atan+0x28c>)
 80084ce:	429e      	cmp	r6, r3
 80084d0:	dd00      	ble.n	80084d4 <atan+0x84>
 80084d2:	e090      	b.n	80085f6 <atan+0x1a6>
 80084d4:	0002      	movs	r2, r0
 80084d6:	000b      	movs	r3, r1
 80084d8:	f7f8 fb10 	bl	8000afc <__aeabi_dadd>
 80084dc:	2200      	movs	r2, #0
 80084de:	4b7d      	ldr	r3, [pc, #500]	; (80086d4 <atan+0x284>)
 80084e0:	f7f9 fd28 	bl	8001f34 <__aeabi_dsub>
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	0006      	movs	r6, r0
 80084e8:	000f      	movs	r7, r1
 80084ea:	2200      	movs	r2, #0
 80084ec:	0020      	movs	r0, r4
 80084ee:	0029      	movs	r1, r5
 80084f0:	05db      	lsls	r3, r3, #23
 80084f2:	f7f8 fb03 	bl	8000afc <__aeabi_dadd>
 80084f6:	000b      	movs	r3, r1
 80084f8:	0002      	movs	r2, r0
 80084fa:	0039      	movs	r1, r7
 80084fc:	0030      	movs	r0, r6
 80084fe:	f7f8 fe5d 	bl	80011bc <__aeabi_ddiv>
 8008502:	2300      	movs	r3, #0
 8008504:	0004      	movs	r4, r0
 8008506:	000d      	movs	r5, r1
 8008508:	0022      	movs	r2, r4
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	0020      	movs	r0, r4
 800850e:	002b      	movs	r3, r5
 8008510:	0029      	movs	r1, r5
 8008512:	f7f9 fa4d 	bl	80019b0 <__aeabi_dmul>
 8008516:	0002      	movs	r2, r0
 8008518:	000b      	movs	r3, r1
 800851a:	9000      	str	r0, [sp, #0]
 800851c:	9101      	str	r1, [sp, #4]
 800851e:	f7f9 fa47 	bl	80019b0 <__aeabi_dmul>
 8008522:	0006      	movs	r6, r0
 8008524:	000f      	movs	r7, r1
 8008526:	4a6e      	ldr	r2, [pc, #440]	; (80086e0 <atan+0x290>)
 8008528:	4b6e      	ldr	r3, [pc, #440]	; (80086e4 <atan+0x294>)
 800852a:	f7f9 fa41 	bl	80019b0 <__aeabi_dmul>
 800852e:	4a6e      	ldr	r2, [pc, #440]	; (80086e8 <atan+0x298>)
 8008530:	4b6e      	ldr	r3, [pc, #440]	; (80086ec <atan+0x29c>)
 8008532:	f7f8 fae3 	bl	8000afc <__aeabi_dadd>
 8008536:	0032      	movs	r2, r6
 8008538:	003b      	movs	r3, r7
 800853a:	f7f9 fa39 	bl	80019b0 <__aeabi_dmul>
 800853e:	4a6c      	ldr	r2, [pc, #432]	; (80086f0 <atan+0x2a0>)
 8008540:	4b6c      	ldr	r3, [pc, #432]	; (80086f4 <atan+0x2a4>)
 8008542:	f7f8 fadb 	bl	8000afc <__aeabi_dadd>
 8008546:	0032      	movs	r2, r6
 8008548:	003b      	movs	r3, r7
 800854a:	f7f9 fa31 	bl	80019b0 <__aeabi_dmul>
 800854e:	4a6a      	ldr	r2, [pc, #424]	; (80086f8 <atan+0x2a8>)
 8008550:	4b6a      	ldr	r3, [pc, #424]	; (80086fc <atan+0x2ac>)
 8008552:	f7f8 fad3 	bl	8000afc <__aeabi_dadd>
 8008556:	0032      	movs	r2, r6
 8008558:	003b      	movs	r3, r7
 800855a:	f7f9 fa29 	bl	80019b0 <__aeabi_dmul>
 800855e:	4a68      	ldr	r2, [pc, #416]	; (8008700 <atan+0x2b0>)
 8008560:	4b68      	ldr	r3, [pc, #416]	; (8008704 <atan+0x2b4>)
 8008562:	f7f8 facb 	bl	8000afc <__aeabi_dadd>
 8008566:	0032      	movs	r2, r6
 8008568:	003b      	movs	r3, r7
 800856a:	f7f9 fa21 	bl	80019b0 <__aeabi_dmul>
 800856e:	4a66      	ldr	r2, [pc, #408]	; (8008708 <atan+0x2b8>)
 8008570:	4b66      	ldr	r3, [pc, #408]	; (800870c <atan+0x2bc>)
 8008572:	f7f8 fac3 	bl	8000afc <__aeabi_dadd>
 8008576:	9a00      	ldr	r2, [sp, #0]
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	f7f9 fa19 	bl	80019b0 <__aeabi_dmul>
 800857e:	4a64      	ldr	r2, [pc, #400]	; (8008710 <atan+0x2c0>)
 8008580:	9000      	str	r0, [sp, #0]
 8008582:	9101      	str	r1, [sp, #4]
 8008584:	4b63      	ldr	r3, [pc, #396]	; (8008714 <atan+0x2c4>)
 8008586:	0030      	movs	r0, r6
 8008588:	0039      	movs	r1, r7
 800858a:	f7f9 fa11 	bl	80019b0 <__aeabi_dmul>
 800858e:	4a62      	ldr	r2, [pc, #392]	; (8008718 <atan+0x2c8>)
 8008590:	4b62      	ldr	r3, [pc, #392]	; (800871c <atan+0x2cc>)
 8008592:	f7f9 fccf 	bl	8001f34 <__aeabi_dsub>
 8008596:	0032      	movs	r2, r6
 8008598:	003b      	movs	r3, r7
 800859a:	f7f9 fa09 	bl	80019b0 <__aeabi_dmul>
 800859e:	4a60      	ldr	r2, [pc, #384]	; (8008720 <atan+0x2d0>)
 80085a0:	4b60      	ldr	r3, [pc, #384]	; (8008724 <atan+0x2d4>)
 80085a2:	f7f9 fcc7 	bl	8001f34 <__aeabi_dsub>
 80085a6:	0032      	movs	r2, r6
 80085a8:	003b      	movs	r3, r7
 80085aa:	f7f9 fa01 	bl	80019b0 <__aeabi_dmul>
 80085ae:	4a5e      	ldr	r2, [pc, #376]	; (8008728 <atan+0x2d8>)
 80085b0:	4b5e      	ldr	r3, [pc, #376]	; (800872c <atan+0x2dc>)
 80085b2:	f7f9 fcbf 	bl	8001f34 <__aeabi_dsub>
 80085b6:	0032      	movs	r2, r6
 80085b8:	003b      	movs	r3, r7
 80085ba:	f7f9 f9f9 	bl	80019b0 <__aeabi_dmul>
 80085be:	4a5c      	ldr	r2, [pc, #368]	; (8008730 <atan+0x2e0>)
 80085c0:	4b5c      	ldr	r3, [pc, #368]	; (8008734 <atan+0x2e4>)
 80085c2:	f7f9 fcb7 	bl	8001f34 <__aeabi_dsub>
 80085c6:	0032      	movs	r2, r6
 80085c8:	003b      	movs	r3, r7
 80085ca:	f7f9 f9f1 	bl	80019b0 <__aeabi_dmul>
 80085ce:	0002      	movs	r2, r0
 80085d0:	000b      	movs	r3, r1
 80085d2:	9800      	ldr	r0, [sp, #0]
 80085d4:	9901      	ldr	r1, [sp, #4]
 80085d6:	f7f8 fa91 	bl	8000afc <__aeabi_dadd>
 80085da:	002b      	movs	r3, r5
 80085dc:	0022      	movs	r2, r4
 80085de:	f7f9 f9e7 	bl	80019b0 <__aeabi_dmul>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	3301      	adds	r3, #1
 80085e6:	d143      	bne.n	8008670 <atan+0x220>
 80085e8:	0002      	movs	r2, r0
 80085ea:	000b      	movs	r3, r1
 80085ec:	0020      	movs	r0, r4
 80085ee:	0029      	movs	r1, r5
 80085f0:	f7f9 fca0 	bl	8001f34 <__aeabi_dsub>
 80085f4:	e742      	b.n	800847c <atan+0x2c>
 80085f6:	2200      	movs	r2, #0
 80085f8:	4b36      	ldr	r3, [pc, #216]	; (80086d4 <atan+0x284>)
 80085fa:	f7f9 fc9b 	bl	8001f34 <__aeabi_dsub>
 80085fe:	2200      	movs	r2, #0
 8008600:	0006      	movs	r6, r0
 8008602:	000f      	movs	r7, r1
 8008604:	0020      	movs	r0, r4
 8008606:	0029      	movs	r1, r5
 8008608:	4b32      	ldr	r3, [pc, #200]	; (80086d4 <atan+0x284>)
 800860a:	f7f8 fa77 	bl	8000afc <__aeabi_dadd>
 800860e:	000b      	movs	r3, r1
 8008610:	0002      	movs	r2, r0
 8008612:	0039      	movs	r1, r7
 8008614:	0030      	movs	r0, r6
 8008616:	f7f8 fdd1 	bl	80011bc <__aeabi_ddiv>
 800861a:	2301      	movs	r3, #1
 800861c:	0004      	movs	r4, r0
 800861e:	000d      	movs	r5, r1
 8008620:	e772      	b.n	8008508 <atan+0xb8>
 8008622:	4b45      	ldr	r3, [pc, #276]	; (8008738 <atan+0x2e8>)
 8008624:	429e      	cmp	r6, r3
 8008626:	dc19      	bgt.n	800865c <atan+0x20c>
 8008628:	2200      	movs	r2, #0
 800862a:	4b44      	ldr	r3, [pc, #272]	; (800873c <atan+0x2ec>)
 800862c:	f7f9 fc82 	bl	8001f34 <__aeabi_dsub>
 8008630:	2200      	movs	r2, #0
 8008632:	0006      	movs	r6, r0
 8008634:	000f      	movs	r7, r1
 8008636:	0020      	movs	r0, r4
 8008638:	0029      	movs	r1, r5
 800863a:	4b40      	ldr	r3, [pc, #256]	; (800873c <atan+0x2ec>)
 800863c:	f7f9 f9b8 	bl	80019b0 <__aeabi_dmul>
 8008640:	2200      	movs	r2, #0
 8008642:	4b24      	ldr	r3, [pc, #144]	; (80086d4 <atan+0x284>)
 8008644:	f7f8 fa5a 	bl	8000afc <__aeabi_dadd>
 8008648:	000b      	movs	r3, r1
 800864a:	0002      	movs	r2, r0
 800864c:	0039      	movs	r1, r7
 800864e:	0030      	movs	r0, r6
 8008650:	f7f8 fdb4 	bl	80011bc <__aeabi_ddiv>
 8008654:	2302      	movs	r3, #2
 8008656:	0004      	movs	r4, r0
 8008658:	000d      	movs	r5, r1
 800865a:	e755      	b.n	8008508 <atan+0xb8>
 800865c:	000b      	movs	r3, r1
 800865e:	0002      	movs	r2, r0
 8008660:	4937      	ldr	r1, [pc, #220]	; (8008740 <atan+0x2f0>)
 8008662:	2000      	movs	r0, #0
 8008664:	f7f8 fdaa 	bl	80011bc <__aeabi_ddiv>
 8008668:	2303      	movs	r3, #3
 800866a:	0004      	movs	r4, r0
 800866c:	000d      	movs	r5, r1
 800866e:	e74b      	b.n	8008508 <atan+0xb8>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	4e34      	ldr	r6, [pc, #208]	; (8008744 <atan+0x2f4>)
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	4f34      	ldr	r7, [pc, #208]	; (8008748 <atan+0x2f8>)
 8008678:	18f6      	adds	r6, r6, r3
 800867a:	18ff      	adds	r7, r7, r3
 800867c:	6832      	ldr	r2, [r6, #0]
 800867e:	6873      	ldr	r3, [r6, #4]
 8008680:	f7f9 fc58 	bl	8001f34 <__aeabi_dsub>
 8008684:	0022      	movs	r2, r4
 8008686:	002b      	movs	r3, r5
 8008688:	f7f9 fc54 	bl	8001f34 <__aeabi_dsub>
 800868c:	000b      	movs	r3, r1
 800868e:	0002      	movs	r2, r0
 8008690:	6838      	ldr	r0, [r7, #0]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	f7f9 fc4e 	bl	8001f34 <__aeabi_dsub>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	0004      	movs	r4, r0
 800869c:	000d      	movs	r5, r1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	db00      	blt.n	80086a4 <atan+0x254>
 80086a2:	e6f4      	b.n	800848e <atan+0x3e>
 80086a4:	2180      	movs	r1, #128	; 0x80
 80086a6:	0609      	lsls	r1, r1, #24
 80086a8:	186b      	adds	r3, r5, r1
 80086aa:	001d      	movs	r5, r3
 80086ac:	e6ef      	b.n	800848e <atan+0x3e>
 80086ae:	4d27      	ldr	r5, [pc, #156]	; (800874c <atan+0x2fc>)
 80086b0:	e6ed      	b.n	800848e <atan+0x3e>
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	440fffff 	.word	0x440fffff
 80086b8:	7ff00000 	.word	0x7ff00000
 80086bc:	54442d18 	.word	0x54442d18
 80086c0:	bff921fb 	.word	0xbff921fb
 80086c4:	3fdbffff 	.word	0x3fdbffff
 80086c8:	3e1fffff 	.word	0x3e1fffff
 80086cc:	8800759c 	.word	0x8800759c
 80086d0:	7e37e43c 	.word	0x7e37e43c
 80086d4:	3ff00000 	.word	0x3ff00000
 80086d8:	3ff2ffff 	.word	0x3ff2ffff
 80086dc:	3fe5ffff 	.word	0x3fe5ffff
 80086e0:	e322da11 	.word	0xe322da11
 80086e4:	3f90ad3a 	.word	0x3f90ad3a
 80086e8:	24760deb 	.word	0x24760deb
 80086ec:	3fa97b4b 	.word	0x3fa97b4b
 80086f0:	a0d03d51 	.word	0xa0d03d51
 80086f4:	3fb10d66 	.word	0x3fb10d66
 80086f8:	c54c206e 	.word	0xc54c206e
 80086fc:	3fb745cd 	.word	0x3fb745cd
 8008700:	920083ff 	.word	0x920083ff
 8008704:	3fc24924 	.word	0x3fc24924
 8008708:	5555550d 	.word	0x5555550d
 800870c:	3fd55555 	.word	0x3fd55555
 8008710:	2c6a6c2f 	.word	0x2c6a6c2f
 8008714:	bfa2b444 	.word	0xbfa2b444
 8008718:	52defd9a 	.word	0x52defd9a
 800871c:	3fadde2d 	.word	0x3fadde2d
 8008720:	af749a6d 	.word	0xaf749a6d
 8008724:	3fb3b0f2 	.word	0x3fb3b0f2
 8008728:	fe231671 	.word	0xfe231671
 800872c:	3fbc71c6 	.word	0x3fbc71c6
 8008730:	9998ebc4 	.word	0x9998ebc4
 8008734:	3fc99999 	.word	0x3fc99999
 8008738:	40037fff 	.word	0x40037fff
 800873c:	3ff80000 	.word	0x3ff80000
 8008740:	bff00000 	.word	0xbff00000
 8008744:	080093b8 	.word	0x080093b8
 8008748:	08009398 	.word	0x08009398
 800874c:	3ff921fb 	.word	0x3ff921fb

08008750 <fabs>:
 8008750:	0049      	lsls	r1, r1, #1
 8008752:	084b      	lsrs	r3, r1, #1
 8008754:	0019      	movs	r1, r3
 8008756:	4770      	bx	lr

08008758 <__ieee754_sqrt>:
 8008758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875a:	000a      	movs	r2, r1
 800875c:	000c      	movs	r4, r1
 800875e:	496f      	ldr	r1, [pc, #444]	; (800891c <__ieee754_sqrt+0x1c4>)
 8008760:	0005      	movs	r5, r0
 8008762:	0003      	movs	r3, r0
 8008764:	0008      	movs	r0, r1
 8008766:	b087      	sub	sp, #28
 8008768:	4020      	ands	r0, r4
 800876a:	4288      	cmp	r0, r1
 800876c:	d111      	bne.n	8008792 <__ieee754_sqrt+0x3a>
 800876e:	002a      	movs	r2, r5
 8008770:	0023      	movs	r3, r4
 8008772:	0028      	movs	r0, r5
 8008774:	0021      	movs	r1, r4
 8008776:	f7f9 f91b 	bl	80019b0 <__aeabi_dmul>
 800877a:	0002      	movs	r2, r0
 800877c:	000b      	movs	r3, r1
 800877e:	0028      	movs	r0, r5
 8008780:	0021      	movs	r1, r4
 8008782:	f7f8 f9bb 	bl	8000afc <__aeabi_dadd>
 8008786:	0005      	movs	r5, r0
 8008788:	000c      	movs	r4, r1
 800878a:	0028      	movs	r0, r5
 800878c:	0021      	movs	r1, r4
 800878e:	b007      	add	sp, #28
 8008790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008792:	2c00      	cmp	r4, #0
 8008794:	dc12      	bgt.n	80087bc <__ieee754_sqrt+0x64>
 8008796:	0061      	lsls	r1, r4, #1
 8008798:	0849      	lsrs	r1, r1, #1
 800879a:	4329      	orrs	r1, r5
 800879c:	d0f5      	beq.n	800878a <__ieee754_sqrt+0x32>
 800879e:	2100      	movs	r1, #0
 80087a0:	428c      	cmp	r4, r1
 80087a2:	d100      	bne.n	80087a6 <__ieee754_sqrt+0x4e>
 80087a4:	e09f      	b.n	80088e6 <__ieee754_sqrt+0x18e>
 80087a6:	002a      	movs	r2, r5
 80087a8:	0023      	movs	r3, r4
 80087aa:	0028      	movs	r0, r5
 80087ac:	0021      	movs	r1, r4
 80087ae:	f7f9 fbc1 	bl	8001f34 <__aeabi_dsub>
 80087b2:	0002      	movs	r2, r0
 80087b4:	000b      	movs	r3, r1
 80087b6:	f7f8 fd01 	bl	80011bc <__aeabi_ddiv>
 80087ba:	e7e4      	b.n	8008786 <__ieee754_sqrt+0x2e>
 80087bc:	1521      	asrs	r1, r4, #20
 80087be:	d100      	bne.n	80087c2 <__ieee754_sqrt+0x6a>
 80087c0:	e091      	b.n	80088e6 <__ieee754_sqrt+0x18e>
 80087c2:	4857      	ldr	r0, [pc, #348]	; (8008920 <__ieee754_sqrt+0x1c8>)
 80087c4:	0312      	lsls	r2, r2, #12
 80087c6:	180c      	adds	r4, r1, r0
 80087c8:	2080      	movs	r0, #128	; 0x80
 80087ca:	0b12      	lsrs	r2, r2, #12
 80087cc:	0340      	lsls	r0, r0, #13
 80087ce:	4310      	orrs	r0, r2
 80087d0:	07c9      	lsls	r1, r1, #31
 80087d2:	d403      	bmi.n	80087dc <__ieee754_sqrt+0x84>
 80087d4:	0fda      	lsrs	r2, r3, #31
 80087d6:	0040      	lsls	r0, r0, #1
 80087d8:	1810      	adds	r0, r2, r0
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	2500      	movs	r5, #0
 80087de:	1062      	asrs	r2, r4, #1
 80087e0:	0040      	lsls	r0, r0, #1
 80087e2:	2480      	movs	r4, #128	; 0x80
 80087e4:	9205      	str	r2, [sp, #20]
 80087e6:	0fda      	lsrs	r2, r3, #31
 80087e8:	1812      	adds	r2, r2, r0
 80087ea:	0029      	movs	r1, r5
 80087ec:	2016      	movs	r0, #22
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	03a4      	lsls	r4, r4, #14
 80087f2:	190e      	adds	r6, r1, r4
 80087f4:	4296      	cmp	r6, r2
 80087f6:	dc02      	bgt.n	80087fe <__ieee754_sqrt+0xa6>
 80087f8:	1931      	adds	r1, r6, r4
 80087fa:	1b92      	subs	r2, r2, r6
 80087fc:	192d      	adds	r5, r5, r4
 80087fe:	0fde      	lsrs	r6, r3, #31
 8008800:	0052      	lsls	r2, r2, #1
 8008802:	3801      	subs	r0, #1
 8008804:	18b2      	adds	r2, r6, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	0864      	lsrs	r4, r4, #1
 800880a:	2800      	cmp	r0, #0
 800880c:	d1f1      	bne.n	80087f2 <__ieee754_sqrt+0x9a>
 800880e:	2620      	movs	r6, #32
 8008810:	2780      	movs	r7, #128	; 0x80
 8008812:	0004      	movs	r4, r0
 8008814:	9604      	str	r6, [sp, #16]
 8008816:	063f      	lsls	r7, r7, #24
 8008818:	183e      	adds	r6, r7, r0
 800881a:	46b4      	mov	ip, r6
 800881c:	428a      	cmp	r2, r1
 800881e:	dc02      	bgt.n	8008826 <__ieee754_sqrt+0xce>
 8008820:	d114      	bne.n	800884c <__ieee754_sqrt+0xf4>
 8008822:	429e      	cmp	r6, r3
 8008824:	d812      	bhi.n	800884c <__ieee754_sqrt+0xf4>
 8008826:	4660      	mov	r0, ip
 8008828:	4666      	mov	r6, ip
 800882a:	19c0      	adds	r0, r0, r7
 800882c:	9100      	str	r1, [sp, #0]
 800882e:	2e00      	cmp	r6, #0
 8008830:	da03      	bge.n	800883a <__ieee754_sqrt+0xe2>
 8008832:	43c6      	mvns	r6, r0
 8008834:	0ff6      	lsrs	r6, r6, #31
 8008836:	198e      	adds	r6, r1, r6
 8008838:	9600      	str	r6, [sp, #0]
 800883a:	1a52      	subs	r2, r2, r1
 800883c:	4563      	cmp	r3, ip
 800883e:	4189      	sbcs	r1, r1
 8008840:	4249      	negs	r1, r1
 8008842:	1a52      	subs	r2, r2, r1
 8008844:	4661      	mov	r1, ip
 8008846:	1a5b      	subs	r3, r3, r1
 8008848:	9900      	ldr	r1, [sp, #0]
 800884a:	19e4      	adds	r4, r4, r7
 800884c:	0fde      	lsrs	r6, r3, #31
 800884e:	0052      	lsls	r2, r2, #1
 8008850:	18b2      	adds	r2, r6, r2
 8008852:	9e04      	ldr	r6, [sp, #16]
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	3e01      	subs	r6, #1
 8008858:	087f      	lsrs	r7, r7, #1
 800885a:	9604      	str	r6, [sp, #16]
 800885c:	2e00      	cmp	r6, #0
 800885e:	d1db      	bne.n	8008818 <__ieee754_sqrt+0xc0>
 8008860:	431a      	orrs	r2, r3
 8008862:	d01f      	beq.n	80088a4 <__ieee754_sqrt+0x14c>
 8008864:	4e2f      	ldr	r6, [pc, #188]	; (8008924 <__ieee754_sqrt+0x1cc>)
 8008866:	4f30      	ldr	r7, [pc, #192]	; (8008928 <__ieee754_sqrt+0x1d0>)
 8008868:	6830      	ldr	r0, [r6, #0]
 800886a:	6871      	ldr	r1, [r6, #4]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	9200      	str	r2, [sp, #0]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6832      	ldr	r2, [r6, #0]
 8008876:	6873      	ldr	r3, [r6, #4]
 8008878:	9202      	str	r2, [sp, #8]
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	9a00      	ldr	r2, [sp, #0]
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	f7f9 fb58 	bl	8001f34 <__aeabi_dsub>
 8008884:	0002      	movs	r2, r0
 8008886:	000b      	movs	r3, r1
 8008888:	9802      	ldr	r0, [sp, #8]
 800888a:	9903      	ldr	r1, [sp, #12]
 800888c:	f7f7 fcf2 	bl	8000274 <__aeabi_dcmple>
 8008890:	2800      	cmp	r0, #0
 8008892:	d007      	beq.n	80088a4 <__ieee754_sqrt+0x14c>
 8008894:	6830      	ldr	r0, [r6, #0]
 8008896:	6871      	ldr	r1, [r6, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	1c67      	adds	r7, r4, #1
 800889e:	d127      	bne.n	80088f0 <__ieee754_sqrt+0x198>
 80088a0:	9c04      	ldr	r4, [sp, #16]
 80088a2:	3501      	adds	r5, #1
 80088a4:	4b21      	ldr	r3, [pc, #132]	; (800892c <__ieee754_sqrt+0x1d4>)
 80088a6:	1069      	asrs	r1, r5, #1
 80088a8:	18c9      	adds	r1, r1, r3
 80088aa:	0864      	lsrs	r4, r4, #1
 80088ac:	07ed      	lsls	r5, r5, #31
 80088ae:	d502      	bpl.n	80088b6 <__ieee754_sqrt+0x15e>
 80088b0:	2380      	movs	r3, #128	; 0x80
 80088b2:	061b      	lsls	r3, r3, #24
 80088b4:	431c      	orrs	r4, r3
 80088b6:	9b05      	ldr	r3, [sp, #20]
 80088b8:	0025      	movs	r5, r4
 80088ba:	0518      	lsls	r0, r3, #20
 80088bc:	1843      	adds	r3, r0, r1
 80088be:	001c      	movs	r4, r3
 80088c0:	e763      	b.n	800878a <__ieee754_sqrt+0x32>
 80088c2:	0ada      	lsrs	r2, r3, #11
 80088c4:	3815      	subs	r0, #21
 80088c6:	055b      	lsls	r3, r3, #21
 80088c8:	2a00      	cmp	r2, #0
 80088ca:	d0fa      	beq.n	80088c2 <__ieee754_sqrt+0x16a>
 80088cc:	2480      	movs	r4, #128	; 0x80
 80088ce:	0364      	lsls	r4, r4, #13
 80088d0:	4222      	tst	r2, r4
 80088d2:	d00a      	beq.n	80088ea <__ieee754_sqrt+0x192>
 80088d4:	2420      	movs	r4, #32
 80088d6:	001e      	movs	r6, r3
 80088d8:	1a64      	subs	r4, r4, r1
 80088da:	40e6      	lsrs	r6, r4
 80088dc:	1e4d      	subs	r5, r1, #1
 80088de:	408b      	lsls	r3, r1
 80088e0:	4332      	orrs	r2, r6
 80088e2:	1b41      	subs	r1, r0, r5
 80088e4:	e76d      	b.n	80087c2 <__ieee754_sqrt+0x6a>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e7ee      	b.n	80088c8 <__ieee754_sqrt+0x170>
 80088ea:	0052      	lsls	r2, r2, #1
 80088ec:	3101      	adds	r1, #1
 80088ee:	e7ef      	b.n	80088d0 <__ieee754_sqrt+0x178>
 80088f0:	f7f8 f904 	bl	8000afc <__aeabi_dadd>
 80088f4:	6877      	ldr	r7, [r6, #4]
 80088f6:	6836      	ldr	r6, [r6, #0]
 80088f8:	0002      	movs	r2, r0
 80088fa:	000b      	movs	r3, r1
 80088fc:	0030      	movs	r0, r6
 80088fe:	0039      	movs	r1, r7
 8008900:	f7f7 fcae 	bl	8000260 <__aeabi_dcmplt>
 8008904:	2800      	cmp	r0, #0
 8008906:	d004      	beq.n	8008912 <__ieee754_sqrt+0x1ba>
 8008908:	3402      	adds	r4, #2
 800890a:	4263      	negs	r3, r4
 800890c:	4163      	adcs	r3, r4
 800890e:	18ed      	adds	r5, r5, r3
 8008910:	e7c8      	b.n	80088a4 <__ieee754_sqrt+0x14c>
 8008912:	2301      	movs	r3, #1
 8008914:	3401      	adds	r4, #1
 8008916:	439c      	bics	r4, r3
 8008918:	e7c4      	b.n	80088a4 <__ieee754_sqrt+0x14c>
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	7ff00000 	.word	0x7ff00000
 8008920:	fffffc01 	.word	0xfffffc01
 8008924:	200000f8 	.word	0x200000f8
 8008928:	20000100 	.word	0x20000100
 800892c:	3fe00000 	.word	0x3fe00000

08008930 <__ieee754_atan2>:
 8008930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008932:	0016      	movs	r6, r2
 8008934:	001d      	movs	r5, r3
 8008936:	005a      	lsls	r2, r3, #1
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4273      	negs	r3, r6
 800893c:	4333      	orrs	r3, r6
 800893e:	4f45      	ldr	r7, [pc, #276]	; (8008a54 <__ieee754_atan2+0x124>)
 8008940:	0852      	lsrs	r2, r2, #1
 8008942:	0fdb      	lsrs	r3, r3, #31
 8008944:	4313      	orrs	r3, r2
 8008946:	42bb      	cmp	r3, r7
 8008948:	d809      	bhi.n	800895e <__ieee754_atan2+0x2e>
 800894a:	4244      	negs	r4, r0
 800894c:	004b      	lsls	r3, r1, #1
 800894e:	4304      	orrs	r4, r0
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	0fe4      	lsrs	r4, r4, #31
 8008954:	9100      	str	r1, [sp, #0]
 8008956:	9001      	str	r0, [sp, #4]
 8008958:	431c      	orrs	r4, r3
 800895a:	42bc      	cmp	r4, r7
 800895c:	d905      	bls.n	800896a <__ieee754_atan2+0x3a>
 800895e:	0032      	movs	r2, r6
 8008960:	002b      	movs	r3, r5
 8008962:	f7f8 f8cb 	bl	8000afc <__aeabi_dadd>
 8008966:	b003      	add	sp, #12
 8008968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896a:	4c3b      	ldr	r4, [pc, #236]	; (8008a58 <__ieee754_atan2+0x128>)
 800896c:	192c      	adds	r4, r5, r4
 800896e:	4334      	orrs	r4, r6
 8008970:	d102      	bne.n	8008978 <__ieee754_atan2+0x48>
 8008972:	f7ff fd6d 	bl	8008450 <atan>
 8008976:	e7f6      	b.n	8008966 <__ieee754_atan2+0x36>
 8008978:	17ac      	asrs	r4, r5, #30
 800897a:	46a4      	mov	ip, r4
 800897c:	2402      	movs	r4, #2
 800897e:	4667      	mov	r7, ip
 8008980:	403c      	ands	r4, r7
 8008982:	9f00      	ldr	r7, [sp, #0]
 8008984:	0fff      	lsrs	r7, r7, #31
 8008986:	433c      	orrs	r4, r7
 8008988:	9f01      	ldr	r7, [sp, #4]
 800898a:	431f      	orrs	r7, r3
 800898c:	d106      	bne.n	800899c <__ieee754_atan2+0x6c>
 800898e:	2c02      	cmp	r4, #2
 8008990:	d057      	beq.n	8008a42 <__ieee754_atan2+0x112>
 8008992:	2c03      	cmp	r4, #3
 8008994:	d1e7      	bne.n	8008966 <__ieee754_atan2+0x36>
 8008996:	4831      	ldr	r0, [pc, #196]	; (8008a5c <__ieee754_atan2+0x12c>)
 8008998:	4931      	ldr	r1, [pc, #196]	; (8008a60 <__ieee754_atan2+0x130>)
 800899a:	e7e4      	b.n	8008966 <__ieee754_atan2+0x36>
 800899c:	0017      	movs	r7, r2
 800899e:	4337      	orrs	r7, r6
 80089a0:	d105      	bne.n	80089ae <__ieee754_atan2+0x7e>
 80089a2:	9b00      	ldr	r3, [sp, #0]
 80089a4:	482d      	ldr	r0, [pc, #180]	; (8008a5c <__ieee754_atan2+0x12c>)
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da51      	bge.n	8008a4e <__ieee754_atan2+0x11e>
 80089aa:	492e      	ldr	r1, [pc, #184]	; (8008a64 <__ieee754_atan2+0x134>)
 80089ac:	e7db      	b.n	8008966 <__ieee754_atan2+0x36>
 80089ae:	4f29      	ldr	r7, [pc, #164]	; (8008a54 <__ieee754_atan2+0x124>)
 80089b0:	42ba      	cmp	r2, r7
 80089b2:	d110      	bne.n	80089d6 <__ieee754_atan2+0xa6>
 80089b4:	3c01      	subs	r4, #1
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d105      	bne.n	80089c6 <__ieee754_atan2+0x96>
 80089ba:	4b2b      	ldr	r3, [pc, #172]	; (8008a68 <__ieee754_atan2+0x138>)
 80089bc:	2c02      	cmp	r4, #2
 80089be:	d905      	bls.n	80089cc <__ieee754_atan2+0x9c>
 80089c0:	4826      	ldr	r0, [pc, #152]	; (8008a5c <__ieee754_atan2+0x12c>)
 80089c2:	492a      	ldr	r1, [pc, #168]	; (8008a6c <__ieee754_atan2+0x13c>)
 80089c4:	e7cf      	b.n	8008966 <__ieee754_atan2+0x36>
 80089c6:	2c02      	cmp	r4, #2
 80089c8:	d83e      	bhi.n	8008a48 <__ieee754_atan2+0x118>
 80089ca:	4b29      	ldr	r3, [pc, #164]	; (8008a70 <__ieee754_atan2+0x140>)
 80089cc:	00e4      	lsls	r4, r4, #3
 80089ce:	191b      	adds	r3, r3, r4
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	6859      	ldr	r1, [r3, #4]
 80089d4:	e7c7      	b.n	8008966 <__ieee754_atan2+0x36>
 80089d6:	4f1f      	ldr	r7, [pc, #124]	; (8008a54 <__ieee754_atan2+0x124>)
 80089d8:	42bb      	cmp	r3, r7
 80089da:	d0e2      	beq.n	80089a2 <__ieee754_atan2+0x72>
 80089dc:	1a9b      	subs	r3, r3, r2
 80089de:	151b      	asrs	r3, r3, #20
 80089e0:	2b3c      	cmp	r3, #60	; 0x3c
 80089e2:	dc18      	bgt.n	8008a16 <__ieee754_atan2+0xe6>
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	da01      	bge.n	80089ec <__ieee754_atan2+0xbc>
 80089e8:	333c      	adds	r3, #60	; 0x3c
 80089ea:	db17      	blt.n	8008a1c <__ieee754_atan2+0xec>
 80089ec:	0032      	movs	r2, r6
 80089ee:	002b      	movs	r3, r5
 80089f0:	f7f8 fbe4 	bl	80011bc <__aeabi_ddiv>
 80089f4:	f7ff feac 	bl	8008750 <fabs>
 80089f8:	f7ff fd2a 	bl	8008450 <atan>
 80089fc:	2c01      	cmp	r4, #1
 80089fe:	d010      	beq.n	8008a22 <__ieee754_atan2+0xf2>
 8008a00:	2c02      	cmp	r4, #2
 8008a02:	d013      	beq.n	8008a2c <__ieee754_atan2+0xfc>
 8008a04:	2c00      	cmp	r4, #0
 8008a06:	d0ae      	beq.n	8008966 <__ieee754_atan2+0x36>
 8008a08:	4a1a      	ldr	r2, [pc, #104]	; (8008a74 <__ieee754_atan2+0x144>)
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <__ieee754_atan2+0x148>)
 8008a0c:	f7f9 fa92 	bl	8001f34 <__aeabi_dsub>
 8008a10:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <__ieee754_atan2+0x12c>)
 8008a12:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <__ieee754_atan2+0x14c>)
 8008a14:	e012      	b.n	8008a3c <__ieee754_atan2+0x10c>
 8008a16:	4811      	ldr	r0, [pc, #68]	; (8008a5c <__ieee754_atan2+0x12c>)
 8008a18:	4919      	ldr	r1, [pc, #100]	; (8008a80 <__ieee754_atan2+0x150>)
 8008a1a:	e7ef      	b.n	80089fc <__ieee754_atan2+0xcc>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	2100      	movs	r1, #0
 8008a20:	e7ec      	b.n	80089fc <__ieee754_atan2+0xcc>
 8008a22:	2480      	movs	r4, #128	; 0x80
 8008a24:	0624      	lsls	r4, r4, #24
 8008a26:	190b      	adds	r3, r1, r4
 8008a28:	0019      	movs	r1, r3
 8008a2a:	e79c      	b.n	8008966 <__ieee754_atan2+0x36>
 8008a2c:	4a11      	ldr	r2, [pc, #68]	; (8008a74 <__ieee754_atan2+0x144>)
 8008a2e:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <__ieee754_atan2+0x148>)
 8008a30:	f7f9 fa80 	bl	8001f34 <__aeabi_dsub>
 8008a34:	0002      	movs	r2, r0
 8008a36:	000b      	movs	r3, r1
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <__ieee754_atan2+0x12c>)
 8008a3a:	4910      	ldr	r1, [pc, #64]	; (8008a7c <__ieee754_atan2+0x14c>)
 8008a3c:	f7f9 fa7a 	bl	8001f34 <__aeabi_dsub>
 8008a40:	e791      	b.n	8008966 <__ieee754_atan2+0x36>
 8008a42:	4806      	ldr	r0, [pc, #24]	; (8008a5c <__ieee754_atan2+0x12c>)
 8008a44:	490d      	ldr	r1, [pc, #52]	; (8008a7c <__ieee754_atan2+0x14c>)
 8008a46:	e78e      	b.n	8008966 <__ieee754_atan2+0x36>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	e78b      	b.n	8008966 <__ieee754_atan2+0x36>
 8008a4e:	490c      	ldr	r1, [pc, #48]	; (8008a80 <__ieee754_atan2+0x150>)
 8008a50:	e789      	b.n	8008966 <__ieee754_atan2+0x36>
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	7ff00000 	.word	0x7ff00000
 8008a58:	c0100000 	.word	0xc0100000
 8008a5c:	54442d18 	.word	0x54442d18
 8008a60:	c00921fb 	.word	0xc00921fb
 8008a64:	bff921fb 	.word	0xbff921fb
 8008a68:	080093d8 	.word	0x080093d8
 8008a6c:	3fe921fb 	.word	0x3fe921fb
 8008a70:	080093f0 	.word	0x080093f0
 8008a74:	33145c07 	.word	0x33145c07
 8008a78:	3ca1a626 	.word	0x3ca1a626
 8008a7c:	400921fb 	.word	0x400921fb
 8008a80:	3ff921fb 	.word	0x3ff921fb

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
